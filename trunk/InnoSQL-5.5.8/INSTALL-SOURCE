
Chapter 2. Installing and Upgrading MySQL

   This chapter describes how to obtain and install MySQL. A summary
   of the procedure follows and later sections provide the details.
   If you plan to upgrade an existing version of MySQL to a newer
   version rather than install MySQL for the first time, see Section
   2.13.1, "Upgrading MySQL," for information about upgrade
   procedures and about issues that you should consider before
   upgrading.

   If you are interested in migrating to MySQL from another database
   system, you may wish to read Section B.8, "MySQL 5.5 FAQ:
   Migration," which contains answers to some common questions
   concerning migration issues.

    1. Determine whether MySQL runs and is supported on your
       platform.
       Please note that not all platforms are equally suitable for
       running MySQL, and that not all platforms on which MySQL is
       known to run are officially supported by Oracle Corporation:

    2. Choose which distribution to install.
       Several versions of MySQL are available, and most are
       available in several distribution formats. You can choose from
       pre-packaged distributions containing binary (precompiled)
       programs or source code. When in doubt, use a binary
       distribution. We also provide public access to our current
       source tree for those who want to see our most recent
       developments and help us test new code. To determine which
       version and type of distribution you should use, see Section
       2.1.2, "Choosing Which MySQL Distribution to Install."

    3. Download the distribution that you want to install.
       For instructions, see Section 2.1.3, "How to Get MySQL." To
       verify the integrity of the distribution, use the instructions
       in Section 2.1.4, "Verifying Package Integrity Using MD5
       Checksums or GnuPG."

    4. Install the distribution.
       To install MySQL from a binary distribution, use the
       instructions in Section 2.2, "Installing MySQL from Generic
       Binaries on Unix/Linux."
       To install MySQL from a source distribution or from the
       current development source tree, use the instructions in
       Section 2.11, "Installing MySQL from Source."

    5. Perform any necessary postinstallation setup.
       After installing MySQL, read Section 2.12, "Postinstallation
       Setup and Testing." This section contains important
       information about making sure the MySQL server is working
       properly. It also describes how to secure the initial MySQL
       user accounts, which have no passwords until you assign
       passwords. The section applies whether you install MySQL using
       a binary or source distribution.

    6. If you want to run the MySQL benchmark scripts, Perl support
       for MySQL must be available. See Section 2.15, "Perl
       Installation Notes."

   Instructions for installing MySQL on different platforms and
   environments is available on a platform by platform basis:

     * Unix, Linux, FreeBSD
       For instructions on installing MySQL on most Linux and Unix
       platforms using a generic binary (for example, a .tar.gz
       package), see Section 2.2, "Installing MySQL from Generic
       Binaries on Unix/Linux."
       For information on building MySQL entirely from the source
       code distributions or the source code repositories, see
       Section 2.11, "Installing MySQL from Source"
       For specific platform help on installation, configuration, and
       building from source see the corresponding platform section:

          + Linux, including notes on distribution specific methods,
            see Section 2.5, "Installing MySQL on Linux."

          + Solaris and OpenSolaris, including PKG and IPS formats,
            see Section 2.6, "Installing MySQL on Solaris and
            OpenSolaris."

          + IBM AIX, see Section 2.6, "Installing MySQL on Solaris
            and OpenSolaris."

          + Hewlett-Packard HP-UX, including the DEPOT package
            format, see Section 2.8, "Installing MySQL on HP-UX."

          + FreeBSD, see Section 2.9, "Installing MySQL on FreeBSD."

     * Microsoft Windows
       For instructions on installing MySQL on Microsoft Windows,
       using either a Zipped binary or an MSI package, see Section
       2.3, "Installing MySQL on Microsoft Windows."
       For information on using the MySQL Server Instance Config
       Wizard, see Section 2.3.4, "MySQL Server Instance
       Configuration Wizard."
       For details and instructions on building MySQL from source
       code using Microsoft Visual Studio, see Section 2.11,
       "Installing MySQL from Source."

     * Mac OS X
       For installation on Mac OS X, including using both the binary
       package and native PKG formats, see Section 2.4, "Installing
       MySQL on Mac OS X."
       For information on making use of the MySQL Startup Item to
       automatically start and stop MySQL, see Section 2.4.3,
       "Installing the MySQL Startup Item."
       For information on the MySQL Preference Pane, see Section
       2.4.4, "Installing and Using the MySQL Preference Pane."

     * IBM i5/OS
       For instructions on installing, starting, and stopping MySQL
       on i5/OS, see Section 2.10, "Installing MySQL on i5/OS."

2.1. General Installation Guidance

   The immediately following sections contain the information
   necessary to choose, download, and verify your distribution. The
   instructions in later sections of the chapter describe how to
   install the distribution that you choose. For binary
   distributions, see the instructions at Section 2.2, "Installing
   MySQL from Generic Binaries on Unix/Linux" or the corresponding
   section for your platform if available. To build MySQL from
   source, use the instructions in Section 2.11, "Installing MySQL
   from Source."

2.1.1. Operating Systems Supported by MySQL Community Server

   This section lists the operating systems on which MySQL Community
   Server is known to run.
   Important

   Oracle Corporation does not necessarily provide official support
   for all the platforms listed in this section. For information
   about those platforms that are officially supported, see
   http://www.mysql.com/support/supportedplatforms.html on the MySQL
   Web site.

   We use CMake, so it is possible to port MySQL to all modern
   systems that have a C++ compiler and a working implementation of
   POSIX threads. (Thread support is needed for the server. To
   compile only the client code, the only requirement is a C++
   compiler.)

   MySQL has been reported to compile successfully on the following
   combinations of operating system and thread package.

     * AIX 4.x, 5.x with native threads. See Section 2.7, "Installing
       MySQL on IBM AIX." AIX 5.3 should be upgraded to technology
       level 7 (5300-07).

     * FreeBSD 5.x and up with native threads. See Section 2.9,
       "Installing MySQL on FreeBSD."

     * HP-UX 11.x with the native threads. See Section 2.8,
       "Installing MySQL on HP-UX."

     * Linux, builds on all fairly recent Linux distributions with
       glibc 2.3. See Section 2.5, "Installing MySQL on Linux."

     * Mac OS X. See Section 2.4, "Installing MySQL on Mac OS X."

     * Solaris 2.8 on SPARC and x86, including support for native
       threads. See Section 2.6, "Installing MySQL on Solaris and
       OpenSolaris."

     * Windows XP, Windows Vista, Windows Server 2003, and Windows
       Server 2008. See Section 2.3, "Installing MySQL on Microsoft
       Windows."

   MySQL has also been known to run on other systems in the past. See
   Section 2.1, "General Installation Guidance." Some porting effort
   might be required for current versions of MySQL on these systems.

   Not all platforms are equally well-suited for running MySQL. How
   well a certain platform is suited for a high-load mission-critical
   MySQL server is determined by the following factors:

     * General stability of the thread library. A platform may have
       an excellent reputation otherwise, but MySQL is only as stable
       as the thread library it calls, even if everything else is
       perfect.

     * The capability of the kernel and the thread library to take
       advantage of symmetric multi-processor (SMP) systems. In other
       words, when a process creates a thread, it should be possible
       for that thread to run on a CPU different from the original
       process.

     * The capability of the kernel and the thread library to run
       many threads that acquire and release a mutex over a short
       critical region frequently without excessive context switches.
       If the implementation of pthread_mutex_lock() is too anxious
       to yield CPU time, this hurts MySQL tremendously. If this
       issue is not taken care of, adding extra CPUs actually makes
       MySQL slower.

     * General file system stability and performance.

     * Table size. If your tables are large, performance is affected
       by the ability of the file system to deal with large files and
       dealing with them efficiently.

     * Our level of expertise here at Oracle Corporation with the
       platform. If we know a platform well, we enable
       platform-specific optimizations and fixes at compile time. We
       can also provide advice on configuring your system optimally
       for MySQL.

     * The amount of testing we have done internally for similar
       configurations.

     * The number of users that have run MySQL successfully on the
       platform in similar configurations. If this number is high,
       the likelihood of encountering platform-specific surprises is
       much smaller.

2.1.2. Choosing Which MySQL Distribution to Install

   When preparing to install MySQL, you should decide which version
   to use. MySQL development occurs in several release series, and
   you can pick the one that best fits your needs. After deciding
   which version to install, you can choose a distribution format.
   Releases are available in binary or source format.

2.1.2.1. Choosing Which Version of MySQL to Install

   The first decision to make is whether you want to use a production
   (stable) release or a development release. In the MySQL
   development process, multiple release series co-exist, each at a
   different stage of maturity:

     * MySQL 5.5 and 5.6 are the current development release series.

     * MySQL 5.1 is the current General Availability (Production)
       release series. New releases are issued for bugfixes only; no
       new features are being added that could affect stability.

     * MySQL 5.0 is the previous stable (production-quality) release
       series. MySQL 5.0 is now at the end of the product lifecycle.
       Active development and support for this version has ended.
       Extended support for MySQL 5.0 remains available. According to
       the http://www.mysql.com/about/legal/lifecycle/, only Security
       and Severity Level 1 issues are still being fixed for MySQL
       5.0.

     * MySQL 4.1, 4.0, and 3.23 are old stable (production-quality)
       release series. Active development and support for these
       versions has ended.

   We do not use a complete code freeze because this prevents us from
   making bugfixes and other fixes that must be done. We may add
   small things that should not affect anything that currently works
   in a production release. Naturally, relevant bugfixes from an
   earlier series propagate to later series.

   Normally, if you are beginning to use MySQL for the first time or
   trying to port it to some system for which there is no binary
   distribution, go with the General Availability release series.
   Currently, this is MySQL 5.1. All MySQL releases, even those from
   development series, are checked with the MySQL benchmarks and an
   extensive test suite before being issued.

   If you are running an older system and want to upgrade, but do not
   want to take the chance of having a nonseamless upgrade, you
   should upgrade to the latest version in the same release series
   you are using (where only the last part of the version number is
   newer than yours). We have tried to fix only fatal bugs and make
   only small, relatively "safe" changes to that version.

   If you want to use new features not present in the production
   release series, you can use a version from a development series.
   Be aware that development releases are not as stable as production
   releases.

   If you want to use the very latest sources containing all current
   patches and bugfixes, you can use one of our source code
   repositories (see Section 2.11.3, "Installing MySQL from a
   Development Source Tree"). These are not "releases" as such, but
   are available as previews of the code on which future releases are
   to be based.

   The naming scheme in MySQL 5.5 uses release names that consist of
   three numbers and a suffix; for example, mysql-5.5.6-m3. The
   numbers within the release name are interpreted as follows:

     * The first number (5) is the major version and describes the
       file format. All MySQL 5 releases have the same file format.

     * The second number (5) is the release level. Taken together,
       the major version and release level constitute the release
       series number.

     * The third number (6) is the version number within the release
       series. This is incremented for each new release. Usually you
       want the latest version for the series you have chosen.

   For each minor update, the last number in the version string is
   incremented. When there are major new features or minor
   incompatibilities with previous versions, the second number in the
   version string is incremented. When the file format changes, the
   first number is increased.

   Release names also include a suffix to indicates the stability
   level of the release. Releases within a series progress through a
   set of suffixes to indicate how the stability level improves. The
   possible suffixes are:

     * mN (for example, m1, m2, m3, ...) indicate a milestone number.
       MySQL development uses a milestone model, in which each
       milestone proceeds through a small number of versions with a
       tight focus on a small subset of thoroughly tested features.
       Following the releases for one milestone, development proceeds
       with another small number of releases that focuses on the next
       small set of features, also thoroughly tested. Features within
       milestone releases may be considered to be of pre-production
       quality.

     * rc indicates a Release Candidate. Release candidates are
       believed to be stable, having passed all of MySQL's internal
       testing, and with all known fatal runtime bugs fixed. However,
       the release has not been in widespread use long enough to know
       for sure that all bugs have been identified. Only minor fixes
       are added.

     * If there is no suffix, it indicates that the release is a
       General Availability (GA) or Production release. GA releases
       are stable, having successfully passed through all earlier
       release stages and are believed to be reliable, free of
       serious bugs, and suitable for use in production systems. Only
       critical bugfixes are applied to the release.

   All releases of MySQL are run through our standard tests and
   benchmarks to ensure that they are relatively safe to use. Because
   the standard tests are extended over time to check for all
   previously found bugs, the test suite keeps getting better.

   All releases have been tested at least with these tools:

     * An internal test suite.  The mysql-test directory contains an
       extensive set of test cases. We run these tests for every
       server binary. See Section 23.1.2, "MySQL Test Suite," for
       more information about this test suite.

     * The MySQL benchmark suite.  This suite runs a range of common
       queries. It is also a test to determine whether the latest
       batch of optimizations actually made the code faster. See
       Section 7.12.2, "The MySQL Benchmark Suite."

   We also perform additional integration and nonfunctional testing
   of the latest MySQL version in our internal production
   environment. Integration testing is done with different
   connectors, storage engines, replication modes, backup,
   partitioning, stored programs, and so forth in various
   combinations. Additional nonfunctional testing is done in areas of
   performance, concurrency, stress, high volume, upgrade and
   downgrade.

2.1.2.2. Choosing a Distribution Format

   After choosing which version of MySQL to install, you should
   decide whether to use a binary distribution or a source
   distribution. In most cases, you should probably use a binary
   distribution, if one exists for your platform. Binary
   distributions are available in native format for many platforms,
   such as RPM files for Linux or PKG package installers for Mac OS X
   or Solaris. Distributions also are available as Zip archives or
   compressed tar files.

   Reasons to choose a binary distribution include the following:

     * Binary distributions generally are easier to install than
       source distributions.

     * To satisfy different user requirements, we provide several
       servers in binary distributions. mysqld is an optimized server
       that is a smaller, faster binary. mysqld-debug is compiled
       with debugging support.
       Each of these servers is compiled from the same source
       distribution, though with different configuration options. All
       native MySQL clients can connect to servers from either MySQL
       version.

   Under some circumstances, you may be better off installing MySQL
   from a source distribution:

     * You want to install MySQL at some explicit location. The
       standard binary distributions are ready to run at any
       installation location, but you might require even more
       flexibility to place MySQL components where you want.

     * You want to configure mysqld to ensure that features are
       available that might not be included in the standard binary
       distributions. Here is a list of the most common extra options
       that you may want to use to ensure feature availability:

          + -DWITH_LIBWRAP=1 for TCP wrappers support.

          + -DWITH_ZLIB={system|bundled} for features that depend on
            compression

          + -DWITH_DEBUG=1 for debugging support

     * You want to configure mysqld without some features that are
       included in the standard binary distributions. For example,
       distributions normally are compiled with support for all
       character sets. If you want a smaller MySQL server, you can
       recompile it with support for only the character sets you
       need.

     * You want to use the latest sources from one of the Bazaar
       repositories to have access to all current bugfixes. For
       example, if you have found a bug and reported it to the MySQL
       development team, the bugfix is committed to the source
       repository and you can access it there. The bugfix does not
       appear in a release until a release actually is issued.

     * You want to read (or modify) the C and C++ code that makes up
       MySQL. For this purpose, you should get a source distribution,
       because the source code is always the ultimate manual.

     * Source distributions contain more tests and examples than
       binary distributions.

2.1.2.3. How and When Updates Are Released

   MySQL is evolving quite rapidly and we want to share new
   developments with other MySQL users. We try to produce a new
   release whenever we have new and useful features that others also
   seem to have a need for.

   We also try to help users who request features that are easy to
   implement. We take note of what our licensed users want, and we
   especially take note of what our support customers want and try to
   help them in this regard.

   No one is required to download a new release. The News section
   helps you determine whether the new release has something you
   really want. See Appendix D, "MySQL Change History."

   We use the following policy when updating MySQL:

     * Enterprise Server releases are meant to appear every 18
       months, supplemented by quarterly service packs and monthly
       rapid updates. Community Server releases are meant to appear 2
       to 3 times per year.

     * Releases are issued within each series. For each release, the
       last number in the version is one more than the previous
       release within the same series.

     * Binary distributions for some platforms are made by us for
       major releases. Other people may make binary distributions for
       other systems, but probably less frequently.

     * We make fixes available as soon as we have identified and
       corrected small or noncritical but annoying bugs. The fixes
       are available in source form immediately from our public
       Bazaar repositories, and are included in the next release.

     * If by any chance a security vulnerability or critical bug is
       found in a release, our policy is to fix it in a new release
       as soon as possible. (We would like other companies to do
       this, too!)

2.1.3. How to Get MySQL

   Check our downloads page at http://dev.mysql.com/downloads/ for
   information about the current version of MySQL and for downloading
   instructions. For a complete up-to-date list of MySQL download
   mirror sites, see http://dev.mysql.com/downloads/mirrors.html. You
   can also find information there about becoming a MySQL mirror site
   and how to report a bad or out-of-date mirror.

   To obtain the latest development source, see Section 2.11.3,
   "Installing MySQL from a Development Source Tree."

2.1.4. Verifying Package Integrity Using MD5 Checksums or GnuPG

   After you have downloaded the MySQL package that suits your needs
   and before you attempt to install it, you should make sure that it
   is intact and has not been tampered with. There are three means of
   integrity checking:

     * MD5 checksums

     * Cryptographic signatures using GnuPG, the GNU Privacy Guard

     * For RPM packages, the built-in RPM integrity verification
       mechanism

   The following sections describe how to use these methods.

   If you notice that the MD5 checksum or GPG signatures do not
   match, first try to download the respective package one more time,
   perhaps from another mirror site. If you repeatedly cannot
   successfully verify the integrity of the package, please notify us
   about such incidents, including the full package name and the
   download site you have been using, at webmaster@mysql.com or
   build@mysql.com. Do not report downloading problems using the
   bug-reporting system.

2.1.4.1. Verifying the MD5 Checksum

   After you have downloaded a MySQL package, you should make sure
   that its MD5 checksum matches the one provided on the MySQL
   download pages. Each package has an individual checksum that you
   can verify with the following command, where package_name is the
   name of the package you downloaded:
shell> md5sum package_name

   Example:
shell> md5sum mysql-standard-5.5.9-linux-i686.tar.gz
aaab65abbec64d5e907dcd41b8699945  mysql-standard-5.5.9-linux-i686.tar
.gz

   You should verify that the resulting checksum (the string of
   hexadecimal digits) matches the one displayed on the download page
   immediately below the respective package.
   Note

   Make sure to verify the checksum of the archive file (for example,
   the .zip or .tar.gz file) and not of the files that are contained
   inside of the archive.

   Note that not all operating systems support the md5sum command. On
   some, it is simply called md5, and others do not ship it at all.
   On Linux, it is part of the GNU Text Utilities package, which is
   available for a wide range of platforms. You can download the
   source code from http://www.gnu.org/software/textutils/ as well.
   If you have OpenSSL installed, you can use the command openssl md5
   package_name instead. A Windows implementation of the md5 command
   line utility is available from http://www.fourmilab.ch/md5/.
   winMd5Sum is a graphical MD5 checking tool that can be obtained
   from http://www.nullriver.com/index/products/winmd5sum.

2.1.4.2. Signature Checking Using GnuPG

   Another method of verifying the integrity and authenticity of a
   package is to use cryptographic signatures. This is more reliable
   than using MD5 checksums, but requires more work.

   We sign MySQL downloadable packages with GnuPG (GNU Privacy
   Guard). GnuPG is an Open Source alternative to the well-known
   Pretty Good Privacy (PGP) by Phil Zimmermann. See
   http://www.gnupg.org/ for more information about GnuPG and how to
   obtain and install it on your system. Most Linux distributions
   ship with GnuPG installed by default. For more information about
   GnuPG, see http://www.openpgp.org/.

   To verify the signature for a specific package, you first need to
   obtain a copy of our public GPG build key, which you can download
   from http://keyserver.pgp.com/. The key that you want to obtain is
   named build@mysql.com. Alternatively, you can cut and paste the
   key directly from the following text:
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.5 (GNU/Linux)

mQGiBD4+owwRBAC14GIfUfCyEDSIePvEW3SAFUdJBtoQHH/nJKZyQT7h9bPlUWC3
RODjQReyCITRrdwyrKUGku2FmeVGwn2u2WmDMNABLnpprWPkBdCk96+OmSLN9brZ
fw2vOUgCmYv2hW0hyDHuvYlQA/BThQoADgj8AW6/0Lo7V1W9/8VuHP0gQwCgvzV3
BqOxRznNCRCRxAuAuVztHRcEAJooQK1+iSiunZMYD1WufeXfshc57S/+yeJkegNW
hxwR9pRWVArNYJdDRT+rf2RUe3vpquKNQU/hnEIUHJRQqYHo8gTxvxXNQc7fJYLV
K2HtkrPbP72vwsEKMYhhr0eKCbtLGfls9krjJ6sBgACyP/Vb7hiPwxh6rDZ7ITnE
kYpXBACmWpP8NJTkamEnPCia2ZoOHODANwpUkP43I7jsDmgtobZX9qnrAXw+uNDI
QJEXM6FSbi0LLtZciNlYsafwAPEOMDKpMqAK6IyisNtPvaLd8lH0bPAnWqcyefep
rv0sxxqUEMcM3o7wwgfN83POkDasDbs3pjwPhxvhz6//62zQJ7Q7TXlTUUwgUGFj
a2FnZSBzaWduaW5nIGtleSAod3d3Lm15c3FsLmNvbSkgPGJ1aWxkQG15c3FsLmNv
bT6IXQQTEQIAHQULBwoDBAMVAwIDFgIBAheABQJLcC5lBQkQ8/JZAAoJEIxxjTtQ
cuH1oD4AoIcOQ4EoGsZvy06D0Ei5vcsWEy8dAJ4g46i3WEcdSWxMhcBSsPz65sh5
lohMBBMRAgAMBQI+PqPRBYMJZgC7AAoJEElQ4SqycpHyJOEAn1mxHijft00bKXvu
cSo/pECUmppiAJ41M9MRVj5VcdH/KN/KjRtW6tHFPYhMBBMRAgAMBQI+QoIDBYMJ
YiKJAAoJELb1zU3GuiQ/lpEAoIhpp6BozKI8p6eaabzF5MlJH58pAKCu/ROofK8J
Eg2aLos+5zEYrB/LsrkCDQQ+PqMdEAgA7+GJfxbMdY4wslPnjH9rF4N2qfWsEN/l
xaZoJYc3a6M02WCnHl6ahT2/tBK2w1QI4YFteR47gCvtgb6O1JHffOo2HfLmRDRi
Rjd1DTCHqeyX7CHhcghj/dNRlW2Z0l5QFEcmV9U0Vhp3aFfWC4Ujfs3LU+hkAWzE
7zaD5cH9J7yv/6xuZVw411x0h4UqsTcWMu0iM1BzELqX1DY7LwoPEb/O9Rkbf4fm
Le11EzIaCa4PqARXQZc4dhSinMt6K3X4BrRsKTfozBu74F47D8Ilbf5vSYHbuE5p
/1oIDznkg/p8kW+3FxuWrycciqFTcNz215yyX39LXFnlLzKUb/F5GwADBQf+Lwqq
a8CGrRfsOAJxim63CHfty5mUc5rUSnTslGYEIOCR1BeQauyPZbPDsDD9MZ1ZaSaf
anFvwFG6Llx9xkU7tzq+vKLoWkm4u5xf3vn55VjnSd1aQ9eQnUcXiL4cnBGoTbOW
I39EcyzgslzBdC++MPjcQTcA7p6JUVsP6oAB3FQWg54tuUo0Ec8bsM8b3Ev42Lmu
QT5NdKHGwHsXTPtl0klk4bQk4OajHsiy1BMahpT27jWjJlMiJc+IWJ0mghkKHt92
6s/ymfdf5HkdQ1cyvsz5tryVI3Fx78XeSYfQvuuwqp2H139pXGEkg0n6KdUOetdZ
Whe70YGNPw1yjWJT1IhMBBgRAgAMBQI+PqMdBQkJZgGAAAoJEIxxjTtQcuH17p4A
n3r1QpVC9yhnW2cSAjq+kr72GX0eAJ4295kl6NxYEuFApmr1+0uUq/SlsQ==
=Mski

-----END PGP PUBLIC KEY BLOCK-----

   To import the build key into your personal public GPG keyring, use
   gpg --import. For example, if you have saved the key in a file
   named mysql_pubkey.asc, the import command looks like this:
shell> gpg --import mysql_pubkey.asc
gpg: key 5072E1F5: public key "MySQL Package signing key (www.mysql.c
om) <build@mysql.com>" imported
gpg: Total number processed: 1
gpg:               imported: 1
gpg: no ultimately trusted keys found

   You can also download the key from the public keyserver using the
   public key id, 5072E1F5:
shell> gpg --recv-keys 5072E1F5
gpg: requesting key 5072E1F5 from hkp server subkeys.pgp.net
gpg: key 5072E1F5: "MySQL Package signing key (www.mysql.com) <build@
mysql.com>" 2 new signatures
gpg: no ultimately trusted keys found
gpg: Total number processed: 1
gpg:         new signatures: 2

   If you want to import the key into your RPM configuration to
   validate RPM install packages, you should be able to import the
   key directly:
shell> rpm --import mysql_pubkey.asc

   If you experience problems, try exporting the key from gpg and
   importing:
shell> gpg --export -a 5072e1f5 > 5072e1f5.asc
shell> rpm --import 5072e1f5.asc

   Alternatively, rpm also supports loading the key directly from a
   URL, and you cas use this manual page:
shell> rpm --import http://dev.mysql.com/doc/refman/5.5/en/checking-g
pg-signature.html

   After you have downloaded and imported the public build key,
   download your desired MySQL package and the corresponding
   signature, which also is available from the download page. The
   signature file has the same name as the distribution file with an
   .asc extension, as shown by the examples in the following table.

   Table 2.1. MySQL Package and Signature Files
       File Type                     File Name
   Distribution file mysql-standard-5.5.9-linux-i686.tar.gz
   Signature file    mysql-standard-5.5.9-linux-i686.tar.gz.asc

   Make sure that both files are stored in the same directory and
   then run the following command to verify the signature for the
   distribution file:
shell> gpg --verify package_name.asc

   Example:
shell> gpg --verify mysql-standard-5.5.9-linux-i686.tar.gz.asc
gpg: Signature made Tue 12 Jul 2005 23:35:41 EST using DSA key ID 507
2E1F5
gpg: Good signature from "MySQL Package signing key (www.mysql.com) <
build@mysql.com>"

   The Good signature message indicates that everything is all right.
   You can ignore any insecure memory warning you might obtain.

   See the GPG documentation for more information on how to work with
   public keys.

2.1.4.3. Signature Checking Using RPM

   For RPM packages, there is no separate signature. RPM packages
   have a built-in GPG signature and MD5 checksum. You can verify a
   package by running the following command:
shell> rpm --checksig package_name.rpm

   Example:
shell> rpm --checksig MySQL-server-5.5.9-0.glibc23.i386.rpm
MySQL-server-5.5.9-0.glibc23.i386.rpm: md5 gpg OK

   Note

   If you are using RPM 4.1 and it complains about (GPG) NOT OK
   (MISSING KEYS: GPG#5072e1f5), even though you have imported the
   MySQL public build key into your own GPG keyring, you need to
   import the key into the RPM keyring first. RPM 4.1 no longer uses
   your personal GPG keyring (or GPG itself). Rather, RPM maintains a
   separate keyring because it is a system-wide application and a
   user's GPG public keyring is a user-specific file. To import the
   MySQL public key into the RPM keyring, first obtain the key as
   described in Section 2.1.4.2, "Signature Checking Using GnuPG."
   Then use rpm --import to import the key. For example, if you have
   saved the public key in a file named mysql_pubkey.asc, import it
   using this command:
shell> rpm --import mysql_pubkey.asc

   If you need to obtain the MySQL public key, see Section 2.1.4.2,
   "Signature Checking Using GnuPG."

2.1.5. Installation Layouts

   The installation layout differs for different installation types
   (for example, native packages, binary tarballs, and source
   tarballs), which can lead to confusion when managing different
   systems or using different installation sources. The individual
   layouts are given in the corresponding installation type or
   platform chapter, as described following. Note that the layout of
   installations from vendors other than Oracle may differ from these
   layouts.

     * Section 2.3.1, "MySQL Installation Layout on Microsoft
       Windows"

     * Section 2.11.1, "MySQL Layout for Source Installation"

     * Section 2.2, "MySQL Installation Layout for Generic Unix/Linux
       Binary Package"

     * Section 2.5.1, "MySQL Installation Layout for Linux RPM"

     * Section 2.4.2, "MySQL Installation Layout on Mac OS X"

2.1.6. Compiler-Specific Build Characteristics

   In some cases, the compiler used to build MySQL affects the
   features available for use. The notes in this section apply for
   binary distributions provided by Oracle Corporation or that you
   compile yourself from source.

   icc (Intel C++ Compiler) Builds

   A server built with icc has these characteristics:

     * SSL support is not included.

2.2. Installing MySQL from Generic Binaries on Unix/Linux

   Oracle provides a set of binary distributions of MySQL. We offer
   binary distributions for a number of platforms in the form of
   compressed tar files (files with a .tar.gz extension), as well as
   binaries in platform-specific package formats for selected
   platforms.

   This section covers the installation of MySQL binary distributions
   from a compressed tar file. For other platform-specific package
   formats, see the other platform-specific sections. For example,
   for Windows distributions, see Section 2.3, "Installing MySQL on
   Microsoft Windows."

   To obtain MySQL, see Section 2.1.3, "How to Get MySQL."

   On Unix, to install a compressed tar file binary distribution,
   unpack it at the installation location you choose (typically
   /usr/local/mysql). This creates the directories shown in the
   following table.

   Table 2.2. MySQL Installation Layout for Generic Unix/Linux Binary
   Package
   Directory Contents of Directory
   bin Client programs and the mysqld server
   data Log files, databases
   docs Manual in Info format
   man Unix manual pages
   include Include (header) files
   lib Libraries
   scripts mysql_install_db
   share Miscellaneous support files, including error messages,
   sample configuration files, SQL for database installation
   sql-bench Benchmarks

   Debug versions of the mysqld binary are available as mysqld-debug.
   To compile a debug version of MySQL from a source distribution,
   you should add -DWITH_DEBUG=1 to the CMake command used to
   configure the distribution. For more information on compiling from
   source, see Section 2.11, "Installing MySQL from Source."

   MySQL compressed tar file binary distributions have names of the
   form mysql-VERSION-OS.tar.gz, where VERSION is a number (for
   example, 5.5.9), and OS indicates the type of operating system for
   which the distribution is intended (for example, pc-linux-i686 or
   winx64).

   To install MySQL from a compressed tar file binary distribution,
   your system must have the following tools:

     * GNU gunzip to uncompress the distribution.

     * A reasonable tar to unpack the distribution. If your tar
       program supports the z option, it can both uncompress and
       unpack the file. GNU tar is known to work. The standard tar
       provided with some operating systems is not able to unpack the
       long file names in the MySQL distribution. You should download
       and install GNU tar, or if available, use a preinstalled
       version of GNU tar. Usually this is available as gnutar, gtar,
       or as tar within a GNU or Free Software directory, such as
       /usr/sfw/bin or /usr/local/bin. GNU tar is available from
       http://www.gnu.org/software/tar/.

   Warning

   If you have previously installed a MySQL installation using your
   operating system native package management system, such as yum or
   apt-get, you may experience problems installing using a native
   binary. Make sure your previous MySQL previous installation has
   been removed entirely (using your package management system), and
   that any additional files, such as old versions of your data
   files, have also been removed. You should also check the existence
   of configuration files such as /etc/my.cnf or the /etc/mysql
   directory have been deleted.

   If you run into problems and need to file a bug report, please use
   the instructions in Section 1.7, "How to Report Bugs or Problems."

   The basic commands that you must execute to install and use a
   MySQL binary distribution are shown following.
shell> groupadd mysql
shell> useradd -r -g mysql mysql
shell> cd /usr/local
shell> tar zxvf /path/to/mysql-VERSION-OS.tar.gz
shell> ln -s full-path-to-mysql-VERSION-OS mysql
shell> cd mysql
shell> chown -R mysql .
shell> chgrp -R mysql .
shell> scripts/mysql_install_db --user=mysql
shell> chown -R root .
shell> chown -R mysql data
shell> cp /usr/local/mysql/support-files/my-small/etc/my.cnf # Option
al
shell> bin/mysqld_safe --user=mysql &
shell> cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mys
ql.server # Optional

   A more detailed version of the preceding description for
   installing a binary distribution follows.
   Note

   This procedure assumes that you have root (administrator) access
   to your system. Alternatively you can prefix each command using
   the sudo (Linux) or pfexec (OpenSolaris) command.

   This procedure does not set up any passwords for MySQL accounts.
   After following the procedure, proceed to Section 2.12,
   "Postinstallation Setup and Testing."

Create a mysql User and Group

   If your system does not already have a user and group for mysqld
   to run as, you may need to create one.
shell> groupadd mysql
shell> useradd -r -g mysql mysql

   Note

   The above will create a user that has login permissions to your
   server. You may wish to disable the account, as the user is only
   required for ownership purposes, not login purposes. You can do
   this on Linux by using the -r command-line option.

   These commands add the mysql group and the mysql user. The syntax
   for useradd and groupadd may differ slightly on different versions
   of Unix, or they may have different names such as adduser and
   addgroup.

   You might want to call the user and group something else instead
   of mysql. If so, substitute the appropriate name in the following
   steps.

Obtain and Unpack the Distribution

   Pick the directory under which you want to unpack the distribution
   and change location into it. The example here unpacks the
   distribution under /usr/local. (The instructions, therefore,
   assume that you have permission to create files and directories in
   /usr/local. If that directory is protected, you must perform the
   installation as root.)
shell> cd /usr/local

   Obtain a distribution file using the instructions in Section
   2.1.3, "How to Get MySQL." For a given release, binary
   distributions for all platforms are built from the same MySQL
   source distribution.

   Unpack the distribution, which creates the installation directory.
   Then create a symbolic link to that directory. tar can uncompress
   and unpack the distribution if it has z option support:
shell> tar zxvf /path/to/mysql-VERSION-OS.tar.gz
shell> ln -s full-path-to-mysql-VERSION-OS mysql

   The tar command creates a directory named mysql-VERSION-OS. The ln
   command makes a symbolic link to that directory. This enables you
   to refer more easily to the installation directory as
   /usr/local/mysql.

   If your tar does not have z option support, use gunzip to unpack
   the distribution and tar to unpack it. Replace the preceding tar
   command with the following alternative command to uncompress and
   extract the distribution:
shell> gunzip < /path/to/mysql-VERSION-OS.tar.gz | tar xvf -

Perform Postinstallation Setup


    1. Change location into the installation directory:
shell> cd mysql
       You will find several files and subdirectories in the mysql
       directory. The most important for installation purposes are
       the bin and scripts subdirectories:

          + The bin directory contains client programs and the
            server. You should add the full path name of this
            directory to your PATH environment variable so that your
            shell finds the MySQL programs properly. See Section
            2.14, "Environment Variables."

          + The scripts directory contains the mysql_install_db
            script used to initialize the mysql database containing
            the grant tables that store the server access
            permissions.

    2. Ensure that the distribution contents are accessible to mysql.
       If you unpacked the distribution as mysql, no further action
       is required. If you unpacked the distribution as root, its
       contents will be owned by root. Change its ownership to mysql
       by executing the following commands as root in the
       installation directory:
shell> chown -R mysql .
shell> chgrp -R mysql .
       The first command changes the owner attribute of the files to
       the mysql user. The second changes the group attribute to the
       mysql group.

    3. If you have not installed MySQL before, you must create the
       MySQL data directory and initialize the grant tables:
shell> scripts/mysql_install_db --user=mysql
       If you run the command as root, include the --user option as
       shown. If you run the command while logged in as that user,
       you can omit the --user option.
       The command should create the data directory and its contents
       with mysql as the owner.
       After creating or updating the grant tables, you need to
       restart the server manually.

    4. Most of the MySQL installation can be owned by root if you
       like. The exception is that the data directory must be owned
       by mysql. To accomplish this, run the following commands as
       root in the installation directory:
shell> chown -R root .
shell> chown -R mysql data

    5. You may want to optionally copy one of the provided
       configuration files from the support-files directory into your
       /etc directory. There are different sample configuration files
       for different use cases, server types, and CPU and RAM
       configurations. If you want to use one of these standard
       files, you should copy it to /etc/my.cnf, or /etc/mysql/my.cnf
       and edit and check the configuration before starting your
       MySQL server for the first time.
       If you do not copy one of the standard configuration files,
       the MySQL server will be started with the default settings.

    6. If the plugin directory is writable by the server, it may be
       possible for a user to write executable code to a file in the
       directory using SELECT ... INTO DUMPFILE. This can be
       prevented by making plugin_dir read only to the server or by
       setting --secure-file-priv to a directory where SELECT writes
       can be made safely.

    7. If you want MySQL to start automatically when you boot your
       machine, you can copy support-files/mysql.server to the
       location where your system has its startup files. More
       information can be found in the support-files/mysql.server
       script itself and in Section 2.12.1.2, "Starting and Stopping
       MySQL Automatically."

    8. You can set up new accounts using the bin/mysql_setpermission
       script if you install the DBI and DBD::mysql Perl modules. See
       Section 4.6.13, "mysql_setpermission --- Interactively Set
       Permissions in Grant Tables." For Perl module installation
       instructions, see Section 2.15, "Perl Installation Notes."

    9. If you would like to use mysqlaccess and have the MySQL
       distribution in some nonstandard location, you must change the
       location where mysqlaccess expects to find the mysql client.
       Edit the bin/mysqlaccess script at approximately line 18.
       Search for a line that looks like this:
$MYSQL     = '/usr/local/bin/mysql';    # path to mysql executable
       Change the path to reflect the location where mysql actually
       is stored on your system. If you do not do this, a Broken pipe
       error will occur when you run mysqlaccess.

   After everything has been unpacked and installed, you should test
   your distribution. To start the MySQL server, use the following
   command:
shell> bin/mysqld_safe --user=mysql &

   If you run the command as root, you must use the --user option as
   shown. The value of the option is the name of the login account
   that you created in the first step to use for running the server.
   If you run the command while logged in as mysql, you can omit the
   --user option.

   If the command fails immediately and prints mysqld ended, you can
   find some information in the host_name.err file in the data
   directory.

   More information about mysqld_safe is given in Section 4.3.2,
   "mysqld_safe --- MySQL Server Startup Script."
   Note

   The accounts that are listed in the MySQL grant tables initially
   have no passwords. After starting the server, you should set up
   passwords for them using the instructions in Section 2.12,
   "Postinstallation Setup and Testing."

2.3. Installing MySQL on Microsoft Windows

   A native Windows distribution of MySQL has been available since
   version 3.21 and represents a sizable percentage of the daily
   downloads of MySQL. This section describes the process for
   installing MySQL on Windows.
   Note

   If you are upgrading MySQL from an existing installation older
   than MySQL 4.1.5, you must first perform the procedure described
   in Section 2.3.7, "Upgrading MySQL on Windows."

   To run MySQL on Windows, you need the following:

     * A Windows operating system such as Windows 2000, Windows XP,
       Windows Vista, Windows Server 2003, or Windows Server 2008.
       Both 32-bit and 64-bit versions are supported.
       A Windows operating system permits you to run the MySQL server
       as a service. See Section 2.3.5.7, "Starting MySQL as a
       Windows Service."
       Generally, you should install MySQL on Windows using an
       account that has administrator rights. Otherwise, you may
       encounter problems with certain operations such as editing the
       PATH environment variable or accessing the Service Control
       Manager. Once installed, MySQL does not need to be executed
       using a user with Administrator privileges.

     * TCP/IP protocol support.

     * Enough space on the hard drive to unpack, install, and create
       the databases in accordance with your requirements (generally
       a minimum of 200 megabytes is recommended.)

   For a list of limitations within the Windows version of MySQL, see
   Section E.9.3, "Windows Platform Limitations."

   There may also be other requirements, depending on how you plan to
   use MySQL:

     * If you plan to connect to the MySQL server using ODBC, you
       need a Connector/ODBC driver. See Section 22.1, "MySQL
       Connector/ODBC."

     * If you plan to use MySQL server with ADO.NET applications, you
       need the Connector/NET driver. See Section 22.2, "MySQL
       Connector/NET."

     * If you need tables with a size larger than 4GB, install MySQL
       on an NTFS or newer file system. Do not forget to use MAX_ROWS
       and AVG_ROW_LENGTH when you create tables. See Section
       12.1.14, "CREATE TABLE Syntax."

   MySQL for Windows is available in several distribution formats:

     * Binary distributions are available that contain a setup
       program that installs everything you need so that you can
       start the server immediately. Another binary distribution
       format contains an archive that you simply unpack in the
       installation location and then configure yourself. For
       details, see Section 2.3.2, "Choosing An Installation
       Package."

     * The source distribution contains all the code and support
       files for building the executables using the Visual Studio
       compiler system.

   Generally speaking, you should use a binary distribution that
   includes an installer. It is simpler to use than the others, and
   you need no additional tools to get MySQL up and running. The
   installer for the Windows version of MySQL, combined with a GUI
   Configuration Wizard, automatically installs MySQL, creates an
   option file, starts the server, and secures the default user
   accounts.
   Caution

   Using virus scanning software such as Norton/Symantec Anti-Virus
   on directories containing MySQL data and temporary tables can
   cause issues, both in terms of the performance of MySQL and the
   virus-scanning software mis-identifying the contents of the files
   as containing spam. This is because of the fingerprinting
   mechanism used by the virus scanning software, and the way in
   which MySQL rapidly updates different files, which may be
   identified as a potential security risk.

   After installing MySQL Server, it is recommended that you disable
   virus scanning on the main directory (datadir) being used to store
   your MySQL table data. There is usually a system built into the
   virus scanning software to enable certain directories to be
   specifically ignored during virus scanning.

   In addition, by default, MySQL creates temporary files in the
   standard Windows temporary directory. To prevent the temporary
   files also being scanned, you should configure a separate
   temporary directory for MySQL temporary files and add this to the
   virus scanning exclusion list. To do this, add a configuration
   option for the tmpdir parameter to your my.ini configuration file.
   For more information, see Section 2.3.5.2, "Creating an Option
   File."

   The following section describes how to install MySQL on Windows
   using a binary distribution. To use an installation package that
   does not include an installer, follow the procedure described in
   Section 2.3.5, "Installing MySQL from a Noinstall Zip Archive." To
   install using a source distribution, see Section 2.11, "Installing
   MySQL from Source."

   MySQL distributions for Windows can be downloaded from
   http://dev.mysql.com/downloads/. See Section 2.1.3, "How to Get
   MySQL."

2.3.1. MySQL Installation Layout on Microsoft Windows

   For MySQL 5.5 on Windows, the default installation directory is
   C:\Program Files\MySQL\MySQL Server 5.5. Some Windows users prefer
   to install in C:\mysql, the directory that formerly was used as
   the default. However, the layout of the subdirectories remains the
   same.

   All of the files are located within this parent directory, using
   the structure shown in the following table.

   Table 2.3. MySQL Installation Layout for Windows
   Directory Contents of Directory
   bin Client programs and the mysqld server
   C:\Documents and Settings\All Users\Application Data\MySQL Log
   files, databases (Windows XP, Windows Server 2003)
   C:\ProgramData\MySQL Log files, databases (Windows 7, Windows
   Server 2008)
   examples Example programs and scripts
   include Include (header) files
   lib Libraries
   scripts Utility scripts
   share Miscellaneous support files, including error messages,
   character set files, sample configuration files, SQL for database
   installation

2.3.2. Choosing An Installation Package

   For MySQL 5.5, there are three installation packages to choose
   from when installing MySQL on Windows:

     * The Essentials Package: This package has a file name similar
       to mysql-essential-5.5.9-win32.msi and contains the minimum
       set of files needed to install MySQL on Windows, including the
       Configuration Wizard. This package does not include optional
       components such as the embedded server and benchmark suite.

     * The Complete Package: This package has a file name similar to
       mysql-5.5.9-win32.zip and contains all files needed for a
       complete Windows installation, including the Configuration
       Wizard. This package includes optional components such as the
       embedded server and benchmark suite.

     * The Noinstall Archive: This package has a file name similar to
       mysql-noinstall-5.5.9-win32.zip and contains all the files
       found in the Complete install package, with the exception of
       the Configuration Wizard. This package does not include an
       automated installer, and must be manually installed and
       configured.

   The Essentials package is recommended for most users. Both the
   Essentials and Complete distributions are available as an .msi
   file for use with the Windows Installer. The Noinstall
   distribution is packaged as Zip archives. To use Zip archives, you
   must have a tool that can unpack .zip files.

   Your choice of install package affects the installation process
   you must follow. If you choose to install either the Essentials or
   Complete install packages, see Section 2.3.3, "Installing MySQL on
   Microsoft Windows Using the MSI Package." If you choose to install
   MySQL from the Noinstall archive, see Section 2.3.5, "Installing
   MySQL from a Noinstall Zip Archive."

2.3.3. Installing MySQL on Microsoft Windows Using the MSI Package

   The MSI package is designed to install and configure MySQL in such
   a way that you can immediately get started using MySQL.

   The MySQL Installation Wizard and MySQL Configuration Wizard are
   available in the Essentials and Complete install packages. They
   are recommended for most standard MySQL installations. Exceptions
   include users who need to install multiple instances of MySQL on a
   single server host and advanced users who want complete control of
   server configuration.

     * For information on installing using the GUI MSI installer
       process, see Section 2.3.3.1, "Using the MySQL Installation
       Wizard."

     * For information on installing using the command line using the
       MSI package, see Section 2.3.3.2, "Automating MySQL
       Installation on Microsoft Windows using the MSI Package."

     * If you have previously installed MySQL using the MSI package
       and want to remove MySQL, see Section 2.3.3.3, "Removing MySQL
       When Installed from the MSI Package."

   The workflow sequence for using the installer is shown in the
   figure below:

   Figure 2.1. Installation Workflow for Windows using MSI Installer
   Installation Workflow for Windows using MSI Installer
   Note

   Microsoft Windows XP and later include a firewall which
   specifically blocks ports. If you plan on using MySQL through a
   network port then you should open and create an exception for this
   port before performing the installation. To check and if necessary
   add an exception to the firewall settings:

    1. First ensure that you are logged in as an Administrator or a
       user with Administrator privileges.

    2. Go to the Control Panel, and double click the Windows Firewall
       icon.

    3. Choose the Allow a program through Windows Firewall option and
       click the Add port button.

    4. Enter MySQL into the Name text box and 3306 (or the port of
       your choice) into the Port number text box.

    5. Also ensure that the TCP protocol radio button is selected.

    6. If you wish, you can also limit access to the MySQL server by
       choosing the Change scope button.

    7. Confirm your choices by clicking the OK button.

   Additionally, when running the MySQL Installation Wizard on
   Windows Vista, ensure that you are logged in as a user with
   administrative rights.
   Note

   When using Windows Vista, you may want to disable User Account
   Control (UAC) before performing the installation. If you do not do
   so, then MySQL may be identified as a security risk, which will
   mean that you need to enable MySQL. You can disable the security
   checking by following these instructions:

    1. Open Control Panel.

    2. Under the User Accounts and Family Safety, select Add or
       remove user accounts.

    3. Click the Got to the main User Accounts page link.

    4. Click on Turn User Account Control on or off. You may be
       prompted to provide permission to change this setting. Click
       Continue.

    5. Deselect or unceck the checkbox next to Use User Account
       Control (UAC) to help protect your computer. Click OK to save
       the setting.

   You will need to restart to complete the process. Click Restart
   Now to reboot the machine and apply the changes. You can then
   follow the instructions below for installing Windows.

2.3.3.1. Using the MySQL Installation Wizard

   MySQL Installation Wizard is an installer for the MySQL server
   that uses the latest installer technologies for Microsoft Windows.
   The MySQL Installation Wizard, in combination with the MySQL
   Configuration Wizard, enables a user to install and configure a
   MySQL server that is ready for use immediately after installation.

   The MySQL Installation Wizard is the standard installer for all
   MySQL server distributions, version 4.1.5 and higher. Users of
   previous versions of MySQL need to shut down and remove their
   existing MySQL installations manually before installing MySQL with
   the MySQL Installation Wizard. See Section 2.3.3.1.6, "Upgrading
   MySQL with the Installation Wizard," for more information on
   upgrading from a previous version.

   Microsoft has included an improved version of their Microsoft
   Windows Installer (MSI) in the recent versions of Windows. MSI has
   become the de-facto standard for application installations on
   Windows 2000, Windows XP, and Windows Server 2003. The MySQL
   Installation Wizard makes use of this technology to provide a
   smoother and more flexible installation process.

   The Microsoft Windows Installer Engine was updated with the
   release of Windows XP; those using a previous version of Windows
   can reference this Microsoft Knowledge Base article
   (http://support.microsoft.com/default.aspx?scid=kb;EN-US;292539)
   for information on upgrading to the latest version of the Windows
   Installer Engine.

   In addition, Microsoft has introduced the WiX (Windows Installer
   XML) toolkit recently. This is the first highly acknowledged Open
   Source project from Microsoft. We have switched to WiX because it
   is an Open Source project and it enables us to handle the complete
   Windows installation process in a flexible manner using scripts.

   Improving the MySQL Installation Wizard depends on the support and
   feedback of users like you. If you find that the MySQL
   Installation Wizard is lacking some feature important to you, or
   if you discover a bug, please report it in our bugs database using
   the instructions given in Section 1.7, "How to Report Bugs or
   Problems."

2.3.3.1.1. Downloading and Starting the MySQL Installation Wizard

   The MySQL installation packages can be downloaded from
   http://dev.mysql.com/downloads/. If the package you download is
   contained within a Zip archive, you need to extract the archive
   first.
   Note

   If you are installing on Windows Vista it is best to open a
   network port before beginning the installation. To do this, first
   ensure that you are logged in as an Administrator, go to the
   Control Panel, and double-click the Windows Firewall icon. Choose
   the Allow a program through Windows Firewall option and click the
   Add port button. Enter MySQL into the Name text box and 3306 (or
   the port of your choice) into the Port number text box. Also
   ensure that the TCP protocol radio button is selected. If you
   wish, you can also limit access to the MySQL server by choosing
   the Change scope button. Confirm your choices by clicking the OK
   button. If you do not open a port prior to installation, you
   cannot configure the MySQL server immediately after installation.
   Additionally, when running the MySQL Installation Wizard on
   Windows Vista, ensure that you are logged in as a user with
   administrative rights.

   The process for starting the wizard depends on the contents of the
   installation package you download. If there is a setup.exe file
   present, double-click it to start the installation process. If
   there is an .msi file present, double-click it to start the
   installation process.

2.3.3.1.2. Choosing an Install Type

   There are three installation types available: Typical, Complete,
   and Custom.

   The Typical installation type installs the MySQL server, the mysql
   command-line client, and the command-line utilities. The
   command-line clients and utilities include mysqldump, myisamchk,
   and several other tools to help you manage the MySQL server.

   The Complete installation type installs all components included in
   the installation package. The full installation package includes
   components such as the embedded server library, the benchmark
   suite, support scripts, and documentation.

   The Custom installation type gives you complete control over which
   packages you wish to install and the installation path that is
   used. See Section 2.3.3.1.3, "The Custom Install Dialog," for more
   information on performing a custom install.

   If you choose the Typical or Complete installation types and click
   the Next button, you advance to the confirmation screen to verify
   your choices and begin the installation. If you choose the Custom
   installation type and click the Next button, you advance to the
   custom installation dialog, described in Section 2.3.3.1.3, "The
   Custom Install Dialog."

2.3.3.1.3. The Custom Install Dialog

   If you wish to change the installation path or the specific
   components that are installed by the MySQL Installation Wizard,
   choose the Custom installation type.

   A tree view on the left side of the custom install dialog lists
   all available components. Components that are not installed have a
   red X icon; components that are installed have a gray icon. To
   change whether a component is installed, click that component's
   icon and choose a new option from the drop-down list that appears.

   You can change the default installation path by clicking the
   Change... button to the right of the displayed installation path.

   After choosing your installation components and installation path,
   click the Next button to advance to the confirmation dialog.

2.3.3.1.4. The Confirmation Dialog

   Once you choose an installation type and optionally choose your
   installation components, you advance to the confirmation dialog.
   Your installation type and installation path are displayed for you
   to review.

   To install MySQL if you are satisfied with your settings, click
   the Install button. To change your settings, click the Back
   button. To exit the MySQL Installation Wizard without installing
   MySQL, click the Cancel button.

   The final screen of the installer provides a summary of the
   installation and gives you the option to launch the MySQL
   Configuration Wizard, which you can use to create a configuration
   file, install the MySQL service, and configure security settings.

2.3.3.1.5. Changes Made by MySQL Installation Wizard

   Once you click the Install button, the MySQL Installation Wizard
   begins the installation process and makes certain changes to your
   system which are described in the sections that follow.

   Changes to the Registry

   The MySQL Installation Wizard creates one Windows registry key in
   a typical install situation, located in
   HKEY_LOCAL_MACHINE\SOFTWARE\MySQL AB.

   The MySQL Installation Wizard creates a key named after the major
   version of the server that is being installed, such as MySQL
   Server 5.5. It contains two string values, Location and Version.
   The Location string contains the path to the installation
   directory. In a default installation it contains C:\Program
   Files\MySQL\MySQL Server 5.5\. The Version string contains the
   release number. For example, for an installation of MySQL Server
   5.5.9, the key contains a value of 5.5.9.

   These registry keys are used to help external tools identify the
   installed location of the MySQL server, preventing a complete scan
   of the hard-disk to determine the installation path of the MySQL
   server. The registry keys are not required to run the server, and
   if you install MySQL using the noinstall Zip archive, the registry
   keys are not created.

   Changes to the Start Menu

   The MySQL Installation Wizard creates a new entry in the Windows
   Start menu under a common MySQL menu heading named after the major
   version of MySQL that you have installed. For example, if you
   install MySQL 5.5, the MySQL Installation Wizard creates a MySQL
   Server 5.5 section in the Start menu.

   The following entries are created within the new Start menu
   section:

     * MySQL Command Line Client: This is a shortcut to the mysql
       command-line client and is configured to connect as the root
       user. The shortcut prompts for a root user password when you
       connect.

     * MySQL Server Instance Config Wizard: This is a shortcut to the
       MySQL Configuration Wizard. Use this shortcut to configure a
       newly installed server, or to reconfigure an existing server.

     * MySQL Documentation: This is a link to the MySQL server
       documentation that is stored locally in the MySQL server
       installation directory. This option is not available when the
       MySQL server is installed using the Essentials installation
       package.

   Changes to the File System

   The MySQL Installation Wizard by default installs the MySQL 5.5
   server to C:\Program Files\MySQL\MySQL Server 5.5, where Program
   Files is the default location for applications in your system, and
   5.5 is the major version of your MySQL server. This is the
   recommended location for the MySQL server, replacing the former
   default location C:\mysql.

   By default, all MySQL applications are stored in a common
   directory at C:\Program Files\MySQL, where Program Files is the
   default location for applications in your Windows installation. A
   typical MySQL installation on a developer machine might look like
   this:
C:\Program Files\MySQL\MySQL Server 5.5
C:\Program Files\MySQL\MySQL Workbench 5.1 OSS

   This approach makes it easier to manage and maintain all MySQL
   applications installed on a particular system.

   The default location of the data directory is the AppData
   directory configured for the user that installed the MySQL
   application.

2.3.3.1.6. Upgrading MySQL with the Installation Wizard

   The MySQL Installation Wizard can perform server upgrades
   automatically using the upgrade capabilities of MSI. That means
   you do not need to remove a previous installation manually before
   installing a new release. The installer automatically shuts down
   and removes the previous MySQL service before installing the new
   version.

   Automatic upgrades are available only when upgrading between
   installations that have the same major and minor version numbers.
   For example, you can upgrade automatically from MySQL 5.5.5 to
   MySQL 5.5.6, but not from MySQL 5.1 to MySQL 5.5.

   See Section 2.3.7, "Upgrading MySQL on Windows."

2.3.3.2. Automating MySQL Installation on Microsoft Windows using the
MSI Package

   The Microsoft Installer (MSI) supports a both a quiet and a
   passive mode that can be used to install MySQL automatically
   without requireing intervention. You can use this either in
   scripts to automatically install MySQL or through a terminal
   connection such as Telnet where you do not have access to the
   standard Windows user interface. The MSI packages can also be used
   in combination with Microsoft's Group Policy system (part of
   Windows Server 2003 and Windows Server 2008) to install MySQL
   across multiple machines.

   To install MySQL from one of the MSI packages automatically from
   the command line (or within a script), you need to use the
   msiexec.exe tool. For example, to perform a quiet installation
   (which shows no dialog boxes or progress):
shell> msiexec /i /quiet mysql-5.5.9.msi

   The /i indicates that you want to perform an installation. The
   /quiet option indicates that you want no interactive elements.

   To provide a dialog box showing the progress during installation,
   and the dialog boxes providing information on the installation and
   registration of MySQL, use /passive mode instead of /quiet:
shell> msiexec /i /passive mysql-5.5.9.msi

   Regardless of the mode of the installation, installing the package
   in this manner performs a 'Typical' installation, and installs the
   default components into the standard location.

   You can also use this method to uninstall MySQL by using the
   /uninstall or /x options:
shell> msiexec /x /quiet mysql-5.5.9.msi

   To install MySQL and configure a MySQL instance from the command
   line, see Section 2.3.4.13, "MySQL Server Instance Config Wizard:
   Creating an Instance from the Command Line."

   For information on using MSI packages to install software
   automatically using Group Policy, see How to use Group Policy to
   remotely install software in Windows Server 2003
   (http://support.microsoft.com/kb/816102).

2.3.3.3. Removing MySQL When Installed from the MSI Package

   To uninstall a MySQL where you have used the MSI packages, you
   must use the Add/Remove Programs tool within Control Panel. To do
   this:

    1. Right-click the start menu and choose Control Panel.

    2. If the Control Panel is set to category mode (you will see
       Pick a category at the top of the Control Panel window),
       double-click Add or Remove Programs. If the Control is set to
       classic mode, double-click the Add or Remove Programs icon.

    3. Find MySQL in the list of installed software. MySQL Server is
       installed against major version numbers (MySQL 5.1, MySQL 5.5,
       etc.). Select the version that you want to remove and click
       Remove.

    4. You will be prompted to confirm the removal. Click Yes to
       remove MySQL.

   When MySQL is removed using this method, only the installed
   components are removed. Any database information (including the
   tables and data), import or export files, log files, and binary
   logs produced during execution are kept in their configured
   location.

   If you try to install MySQL again the information will be retained
   and you will be prompted to enter the password configured with the
   original installation.

   If you want to delete MySQL completely:

     * Delete the associated data directory. On Windows XP and
       Windows Server 2003, the default data directory is the
       configured AppData directory, which is C:\Documents and
       Settings\All Users\Application Data\MySQL by default.

     * On Windows 7 and Windows Server 2008, the default data
       directory location is C:\ProgramData\Mysql.
       Note
       The C:\ProgramData directory is hidden by default. You must
       change your folder options to view the hidden file. Choose
       Organize, Folder and search options, Show hidden folders.

2.3.4. MySQL Server Instance Configuration Wizard

   The MySQL Server Instance Configuration Wizard helps automate the
   process of configuring your server. It creates a custom MySQL
   configuration file (my.ini or my.cnf) by asking you a series of
   questions and then applying your responses to a template to
   generate the configuration file that is tuned to your
   installation.

   The MySQL Server Instance Configuration Wizard is included with
   the MySQL 5.5 server. The MySQL Server Instance Configuration
   Wizard is only available for Windows.

2.3.4.1. Starting the MySQL Server Instance Configuration Wizard

   The MySQL Server Instance Configuration Wizard is normally started
   as part of the installation process. You should only need to run
   the MySQL Server Instance Configuration Wizard again when you need
   to change the configuration parameters of your server.

   If you chose not to open a port prior to installing MySQL on
   Windows Vista, you can choose to use the MySQL Server
   Configuration Wizard after installation. However, you must open a
   port in the Windows Firewall. To do this see the instructions
   given in Section 2.3.3.1.1, "Downloading and Starting the MySQL
   Installation Wizard." Rather than opening a port, you also have
   the option of adding MySQL as a program that bypasses the Windows
   Firewall. One or the other option is sufficient---you need not do
   both. Additionally, when running the MySQL Server Configuration
   Wizard on Windows Vista ensure that you are logged in as a user
   with administrative rights.
   MySQL Server Instance Configuration Wizard

   You can launch the MySQL Configuration Wizard by clicking the
   MySQL Server Instance Config Wizard entry in the MySQL section of
   the Windows Start menu.

   Alternatively, you can navigate to the bin directory of your MySQL
   installation and launch the MySQLInstanceConfig.exe file directly.

   The MySQL Server Instance Configuration Wizard places the my.ini
   file in the installation directory for the MySQL server. This
   helps associate configuration files with particular server
   instances.

   To ensure that the MySQL server knows where to look for the my.ini
   file, an argument similar to this is passed to the MySQL server as
   part of the service installation:
--defaults-file="C:\Program Files\MySQL\MySQL Server 5.5\my.ini"

   Here, C:\Program Files\MySQL\MySQL Server 5.5 is replaced with the
   installation path to the MySQL Server. The --defaults-file option
   instructs the MySQL server to read the specified file for
   configuration options when it starts.

   Apart from making changes to the my.ini file by running the MySQL
   Server Instance Configuration Wizard again, you can modify it by
   opening it with a text editor and making any necessary changes.
   You can also modify the server configuration with the
   http://www.mysql.com/products/administrator/ utility. For more
   information about server configuration, see Section 5.1.2, "Server
   Command Options."

   MySQL clients and utilities such as the mysql and mysqldump
   command-line clients are not able to locate the my.ini file
   located in the server installation directory. To configure the
   client and utility applications, create a new my.ini file in the
   Windows installation directory (for example, C:\WINDOWS).

   Under Windows Server 2003, Windows Server 2000, Windows XP, and
   Windows Vista MySQL Server Instance Configuration Wizard will
   configure MySQL to work as a Windows service. To start and stop
   MySQL you use the Services application that is supplied as part of
   the Windows Administrator Tools.

2.3.4.2. Choosing a Maintenance Option

   If the MySQL Server Instance Configuration Wizard detects an
   existing configuration file, you have the option of either
   reconfiguring your existing server, or removing the server
   instance by deleting the configuration file and stopping and
   removing the MySQL service.

   To reconfigure an existing server, choose the Re-configure
   Instance option and click the Next button. Any existing
   configuration file is not overwritten, but renamed (within the
   same directory) using a timestamp (Windows) or sequential number
   (Linux). To remove the existing server instance, choose the Remove
   Instance option and click the Next button.

   If you choose the Remove Instance option, you advance to a
   confirmation window. Click the Execute button. The MySQL Server
   Configuration Wizard stops and removes the MySQL service, and then
   deletes the configuration file. The server installation and its
   data folder are not removed.

   If you choose the Re-configure Instance option, you advance to the
   Configuration Type dialog where you can choose the type of
   installation that you wish to configure.

2.3.4.3. Choosing a Configuration Type

   When you start the MySQL Server Instance Configuration Wizard for
   a new MySQL installation, or choose the Re-configure Instance
   option for an existing installation, you advance to the
   Configuration Type dialog.
   MySQL Server Instance Configuration Wizard: Configuration Type

   There are two configuration types available: Detailed
   Configuration and Standard Configuration. The Standard
   Configuration option is intended for new users who want to get
   started with MySQL quickly without having to make many decisions
   about server configuration. The Detailed Configuration option is
   intended for advanced users who want more fine-grained control
   over server configuration.

   If you are new to MySQL and need a server configured as a
   single-user developer machine, the Standard Configuration should
   suit your needs. Choosing the Standard Configuration option causes
   the MySQL Configuration Wizard to set all configuration options
   automatically with the exception of Service Options and Security
   Options.

   The Standard Configuration sets options that may be incompatible
   with systems where there are existing MySQL installations. If you
   have an existing MySQL installation on your system in addition to
   the installation you wish to configure, the Detailed Configuration
   option is recommended.

   To complete the Standard Configuration, please refer to the
   sections on Service Options and Security Options in Section
   2.3.4.10, "The Service Options Dialog," and Section 2.3.4.11, "The
   Security Options Dialog," respectively.

2.3.4.4. The Server Type Dialog

   There are three different server types available to choose from.
   The server type that you choose affects the decisions that the
   MySQL Server Instance Configuration Wizard makes with regard to
   memory, disk, and processor usage.
   MySQL Server Instance Configuration Wizard: Server Type

     * Developer Machine: Choose this option for a typical desktop
       workstation where MySQL is intended only for personal use. It
       is assumed that many other desktop applications are running.
       The MySQL server is configured to use minimal system
       resources.

     * Server Machine: Choose this option for a server machine where
       the MySQL server is running alongside other server
       applications such as FTP, email, and Web servers. The MySQL
       server is configured to use a moderate portion of the system
       resources.

     * Dedicated MySQL Server Machine: Choose this option for a
       server machine that is intended to run only the MySQL server.
       It is assumed that no other applications are running. The
       MySQL server is configured to use all available system
       resources.

   Note

   By selecting one of the preconfigured configurations, the values
   and settings of various options in your my.cnf or my.ini will be
   altered accordingly. The default values and options as described
   in the reference manual may therefore be different to the options
   and values that were created during the execution of the
   configuration wizard.

2.3.4.5. The Database Usage Dialog

   The Database Usage dialog enables you to indicate the storage
   engines that you expect to use when creating MySQL tables. The
   option you choose determines whether the InnoDB storage engine is
   available and what percentage of the server resources are
   available to InnoDB.
   MySQL Server Instance Configuration Wizard: Usage Dialog

     * Multifunctional Database: This option enables both the InnoDB
       and MyISAM storage engines and divides resources evenly
       between the two. This option is recommended for users who use
       both storage engines on a regular basis.

     * Transactional Database Only: This option enables both the
       InnoDB and MyISAM storage engines, but dedicates most server
       resources to the InnoDB storage engine. This option is
       recommended for users who use InnoDB almost exclusively and
       make only minimal use of MyISAM.

     * Non-Transactional Database Only: This option disables the
       InnoDB storage engine completely and dedicates all server
       resources to the MyISAM storage engine. This option is
       recommended for users who do not use InnoDB.

   The Configuration Wizard uses a template to generate the server
   configuration file. The Database Usage dialog sets one of the
   following option strings:
Multifunctional Database:        MIXED
Transactional Database Only:     INNODB
Non-Transactional Database Only: MYISAM

   When these options are processed through the default template
   (my-template.ini) the result is:
Multifunctional Database:
default-storage-engine=InnoDB
_myisam_pct=50

Transactional Database Only:
default-storage-engine=InnoDB
_myisam_pct=5

Non-Transactional Database Only:
default-storage-engine=MyISAM
_myisam_pct=100
skip-innodb

   The _myisam_pct value is used to calculate the percentage of
   resources dedicated to MyISAM. The remaining resources are
   allocated to InnoDB.

2.3.4.6. The InnoDB Tablespace Dialog

   Some users may want to locate the InnoDB tablespace files in a
   different location than the MySQL server data directory. Placing
   the tablespace files in a separate location can be desirable if
   your system has a higher capacity or higher performance storage
   device available, such as a RAID storage system.
   MySQL Server Instance Configuration Wizard: InnoDB Data Tablespace

   To change the default location for the InnoDB tablespace files,
   choose a new drive from the drop-down list of drive letters and
   choose a new path from the drop-down list of paths. To create a
   custom path, click the ... button.

   If you are modifying the configuration of an existing server, you
   must click the Modify button before you change the path. In this
   situation you must move the existing tablespace files to the new
   location manually before starting the server.

2.3.4.7. The Concurrent Connections Dialog

   To prevent the server from running out of resources, it is
   important to limit the number of concurrent connections to the
   MySQL server that can be established. The Concurrent Connections
   dialog enables you to choose the expected usage of your server,
   and sets the limit for concurrent connections accordingly. It is
   also possible to set the concurrent connection limit manually.
   MySQL Server Instance Configuration Wizard: Connections

     * Decision Support (DSS)/OLAP: Choose this option if your server
       does not require a large number of concurrent connections. The
       maximum number of connections is set at 100, with an average
       of 20 concurrent connections assumed.

     * Online Transaction Processing (OLTP): Choose this option if
       your server requires a large number of concurrent connections.
       The maximum number of connections is set at 500.

     * Manual Setting: Choose this option to set the maximum number
       of concurrent connections to the server manually. Choose the
       number of concurrent connections from the drop-down box
       provided, or enter the maximum number of connections into the
       drop-down box if the number you desire is not listed.

2.3.4.8. The Networking and Strict Mode Options Dialog

   Use the Networking Options dialog to enable or disable TCP/IP
   networking and to configure the port number that is used to
   connect to the MySQL server.
   MySQL Server Instance Configuration Wizard: Network Configuration

   TCP/IP networking is enabled by default. To disable TCP/IP
   networking, uncheck the box next to the Enable TCP/IP Networking
   option.

   Port 3306 is used by default. To change the port used to access
   MySQL, choose a new port number from the drop-down box or type a
   new port number directly into the drop-down box. If the port
   number you choose is in use, you are prompted to confirm your
   choice of port number.

   Set the Server SQL Mode to either enable or disable strict mode.
   Enabling strict mode (default) makes MySQL behave more like other
   database management systems. If you run applications that rely on
   MySQL's old "forgiving" behavior, make sure to either adapt those
   applications or to disable strict mode. For more information about
   strict mode, see Section 5.1.7, "Server SQL Modes."

2.3.4.9. The Character Set Dialog

   The MySQL server supports multiple character sets and it is
   possible to set a default server character set that is applied to
   all tables, columns, and databases unless overridden. Use the
   Character Set dialog to change the default character set of the
   MySQL server.
   MySQL Server Instance Configuration Wizard: Character Set

     * Standard Character Set: Choose this option if you want to use
       latin1 as the default server character set. latin1 is used for
       English and many Western European languages.

     * Best Support For Multilingualism: Choose this option if you
       want to use utf8 as the default server character set. This is
       a Unicode character set that can store characters from many
       different languages.

     * Manual Selected Default Character Set / Collation: Choose this
       option if you want to pick the server's default character set
       manually. Choose the desired character set from the provided
       drop-down list.

2.3.4.10. The Service Options Dialog

   On Windows platforms, the MySQL server can be installed as a
   Windows service. When installed this way, the MySQL server can be
   started automatically during system startup, and even restarted
   automatically by Windows in the event of a service failure.

   The MySQL Server Instance Configuration Wizard installs the MySQL
   server as a service by default, using the service name MySQL. If
   you do not wish to install the service, uncheck the box next to
   the Install As Windows Service option. You can change the service
   name by picking a new service name from the drop-down box provided
   or by entering a new service name into the drop-down box.
   Note

   Service names can include any legal character except forward (/)
   or backward (\) slashes, and must be less than 256 characters
   long.
   Warning

   If you are installing multiple versions of MySQL onto the same
   machine, you must choose a different service name for each version
   that you install. If you do not choose a different service for
   each installed version then the service manager information will
   be inconsistent and this will cause problems when you try to
   uninstall a previous version.

   If you have already installed multiple versions using the same
   service name, you must manually edit the contents of the
   HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services parameters
   within the Windows registry to update the association of the
   service name with the correct server version.

   Typically, when installing multiple versions you create a service
   name based on the version information. For example, you might
   install MySQL 5.x as mysql5, or specific versions such as MySQL
   5.5.0 as mysql50500.

   To install the MySQL server as a service but not have it started
   automatically at startup, uncheck the box next to the Launch the
   MySQL Server Automatically option.

2.3.4.11. The Security Options Dialog

   The content of the security options portion of the MySQL Server
   Instance Configuration Wizard will depend on whether this is a new
   installation, or modifying an existing installation.

     * Setting the root password for a new installation
       It is strongly recommended that you set a root password for
       your MySQL server, and the MySQL Server Instance Config Wizard
       requires by default that you do so. If you do not wish to set
       a root password, uncheck the box next to the Modify Security
       Settings option.
       MySQL Server Instance Config Wizard: Security

     * To set the root password, enter the desired password into both
       the New root password and Confirm boxes.
       Setting the root password for an existing installation
       If you are modifying the configuration of an existing
       configuration, or you are installing an upgrade and the MySQL
       Server Instance Configuration Wizard has detected an existing
       MySQL system, then you must enter the existing password for
       root before changing the configuration information.
       MySQL Server Instance Config Wizard: Security (Existing
       Installation)
       If you want to change the current root password, enter the
       desired new password into both the New root password and
       Confirm boxes.

   To permit root logins from across the network, check the box next
   to the Enable root access from remote machines option. This
   decreases the security of your root account.

   To create an anonymous user account, check the box next to the
   Create An Anonymous Account option. Creating an anonymous account
   can decrease server security and cause login and permission
   difficulties. For this reason, it is not recommended.

2.3.4.12. The Confirmation Dialog

   The final dialog in the MySQL Server Instance Configuration Wizard
   is the Confirmation Dialog. To start the configuration process,
   click the Execute button. To return to a previous dialog, click
   the Back button. To exit the MySQL Server Instance Configuration
   Wizard without configuring the server, click the Cancel button.
   MySQL Server Instance Configuration Wizard: Confirmation

   After you click the Execute button, the MySQL Server Instance
   Configuration Wizard performs a series of tasks and displays the
   progress onscreen as the tasks are performed.

   The MySQL Server Instance Configuration Wizard first determines
   configuration file options based on your choices using a template
   prepared by MySQL developers and engineers. This template is named
   my-template.ini and is located in your server installation
   directory.

   The MySQL Configuration Wizard then writes these options to the
   corresponding configuration file.

   If you chose to create a service for the MySQL server, the MySQL
   Server Instance Configuration Wizard creates and starts the
   service. If you are reconfiguring an existing service, the MySQL
   Server Instance Configuration Wizard restarts the service to apply
   your configuration changes.

   If you chose to set a root password, the MySQL Configuration
   Wizard connects to the server, sets your new root password, and
   applies any other security settings you may have selected.

   After the MySQL Server Instance Configuration Wizard has completed
   its tasks, it displays a summary. Click the Finish button to exit
   the MySQL Server Configuration Wizard.

2.3.4.13. MySQL Server Instance Config Wizard: Creating an Instance
from the Command Line

   In addition to using the GUI interface to the MySQL Server
   Instance Config Wizard, you can also create instances
   automatically from the command line.

   To use the MySQL Server Instance Config Wizard on the command
   line, you need to use the MySQLInstanceConfig.exe command that is
   installed with MySQL in the bin directory within the installation
   directory. MySQLInstanceConfig.exe takes a number of command-line
   arguments the set the properties that would normally be selected
   through the GUI interface, and then creates a new configuration
   file (my.ini) by combining these selections with a template
   configuration file to produce the working configuration file.

   The main command line options are provided in the table below.
   Some of the options are required, while some options are optional.

   Table 2.4. MySQL Server Instance Config Wizard Command Line
   Options
   Option Description
   Required Parameters
   -nPRODUCTNAME The name of the instance when installed
   -pPATH Path of the base directory for installation. This is
   equivalent to the directory when using the basedir configuration
   parameter
   -vVERSION The version tag to use for this installation
   Action to Perform
   -i Install an instance
   -r Remove an instance
   -s Stop an existing instance
   -q Perform the operation quietly
   -lFILENAME Sae the installation progress in a logfile
   Config File to Use
   -tFILENAME Path to the template config file that will be used to
   generate the installed configuration file
   -cFILENAME Path to a config file to be generated

   The -t and -c options work together to set the configuration
   parameters for a new instance. The -t option specifies the
   template configuration file to use as the basic configuration,
   which are then merged with the configuration parameters generated
   by the MySQL Server Instance Config Wizard into the configuration
   file specified by the -c option.

   A sample template file, my-template.ini is provided in the
   toplevel MySQL installation directory. The file contains elements
   are replaced automatically by the MySQL Server Instance Config
   Wizard during configuration.

   If you specify a configuration file that already exists, the
   existing configuration file will be saved in the file with the
   original, with the date and time added. For example, the mysql.ini
   will be copied to mysql 2009-10-27 1646.ini.bak.

   The parameters that you can specify on the command line are listed
   in the table below.

   Table 2.5. MySQL Server Instance Config Wizard Parameters
   Parameter Description
   ServiceName=$ Specify the name of the service to be created
   AddBinToPath={yes | no} Specifies whether to add the binary
   directory of MySQL to the standard PATH environment variable
   ServerType={DEVELOPMENT | SERVER | DEDICATED} Specify the server
   type. For more information, see Section 2.3.4.4, "The Server Type
   Dialog"
   DatabaseType={MIXED | INNODB | MYISAM} Specify the default
   database type. For more information, see Section 2.3.4.5, "The
   Database Usage Dialog"
   ConnectionUsage={DSS | OLTP} Specify the type of connection
   support, this automates the setting for the number of concurrent
   connections (see the ConnectionCount parameter). For more
   information, see Section 2.3.4.7, "The Concurrent Connections
   Dialog"
   ConnectionCount=# Specify the number of concurrent connections to
   support. For more information, see Section 2.3.4.4, "The Server
   Type Dialog"
   SkipNetworking={yes | no} Specify whether network support should
   be supported. Specifying yes disables network access altogether
   Port=# Specify the network port number to use for network
   connections. For more information, see Section 2.3.4.8, "The
   Networking and Strict Mode Options Dialog"
   StrictMode={yes | no} Specify whether to use the strict SQL mode.
   For more information, see Section 2.3.4.8, "The Networking and
   Strict Mode Options Dialog"
   Charset=$ Specify the default character set. For more information,
   see Section 2.3.4.9, "The Character Set Dialog"
   RootPassword=$ Specify the root password
   RootCurrentPassword=$ Specify the current root password then
   stopping or reconfiguring an existing service
   Note

   When specifying options on the command line, you can enclose the
   entire command-line option and the value you are specifying using
   double quotation marks. This enables you to use spaces in the
   options. For example, "-cC:\mysql.ini".

   The following command installs a MySQL Server 5.5 instance from
   the directory C:\Program Files\MySQL\MySQL Server 5.5 using the
   service name MySQL55 and setting the root password to 1234.
shell> MySQLInstanceConfig.exe -i -q "-lC:\mysql_install_log.txt" »
   "-nMySQL Server 5.5" "-pC:\Program Files\MySQL\MySQL Server 5.5" -
v5.5.9 »
   "-tmy-template.ini" "-cC:\mytest.ini" ServerType=DEVELOPMENT Datab
aseType=MIXED »
   ConnectionUsage=DSS Port=3311 ServiceName=MySQL55 RootPassword=123
4

   In the above example, a log file will be generated in
   mysql_install_log.txt containing the information about the
   instance creation process. The log file generated by the above
   example is shown below:
Welcome to the MySQL Server Instance Configuration Wizard 1.0.16.0
Date: 2009-10-27 17:07:21

Installing service ...

Product Name:         MySQL Server 5.5
Version:              5.5.9
Installation Path:    C:\Program Files\MySQL\MySQL Server 5.5\

Creating configuration file C:\mytest.ini using template my-template.
ini.
Options:
DEVELOPMENT
MIXED
DSS
STRICTMODE

Variables:
port: 3311
default-character-set: latin1
basedir: "C:/Program Files/MySQL/MySQL Server 5.5/"
datadir: "C:/Program Files/MySQL/MySQL Server 5.5/Data/"


Creating Windows service entry.
Service name: "MySQL55"
Parameters:   "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld" --
defaults-file="C:\mytest.ini" MySQL55.
Windows service MySQL55 installed.

   When using the command-line, the return values in the following
   table indicate an error performing the specified option.

   Table 2.6. Return Value from MySQL Server Instance Config Wizard
   Value                   Description
   2     Configuration template file cannot be found
   3     The Windows service entry cannot be created
   4     Could not connect to the Service Control Manager
   5     The MySQL service cannot be started
   6     The MySQL service cannot be stopped
   7     The security settings cannot be applied
   8     The configuration file cannot be written
   9     The Windows service entry cannot be removed

   You can perform an installation of MySQL automatically using the
   MSI packe. For more information, see Section 2.3.3.2, "Automating
   MySQL Installation on Microsoft Windows using the MSI Package."

2.3.5. Installing MySQL from a Noinstall Zip Archive

   Users who are installing from the Noinstall package can use the
   instructions in this section to manually install MySQL. The
   process for installing MySQL from a Zip archive is as follows:

    1. Extract the archive to the desired install directory

    2. Create an option file

    3. Choose a MySQL server type

    4. Start the MySQL server

    5. Secure the default user accounts

   This process is described in the sections that follow.

2.3.5.1. Extracting the Install Archive

   To install MySQL manually, do the following:

    1. If you are upgrading from a previous version please refer to
       Section 2.3.7, "Upgrading MySQL on Windows," before beginning
       the upgrade process.

    2. Make sure that you are logged in as a user with administrator
       privileges.

    3. Choose an installation location. Traditionally, the MySQL
       server is installed in C:\mysql. The MySQL Installation Wizard
       installs MySQL under C:\Program Files\MySQL. If you do not
       install MySQL at C:\mysql, you must specify the path to the
       install directory during startup or in an option file. See
       Section 2.3.5.2, "Creating an Option File."

    4. Extract the install archive to the chosen installation
       location using your preferred Zip archive tool. Some tools may
       extract the archive to a folder within your chosen
       installation location. If this occurs, you can move the
       contents of the subfolder into the chosen installation
       location.

2.3.5.2. Creating an Option File

   If you need to specify startup options when you run the server,
   you can indicate them on the command line or place them in an
   option file. For options that are used every time the server
   starts, you may find it most convenient to use an option file to
   specify your MySQL configuration. This is particularly true under
   the following circumstances:

     * The installation or data directory locations are different
       from the default locations (C:\Program Files\MySQL\MySQL
       Server 5.5 and C:\Program Files\MySQL\MySQL Server 5.5\data).

     * You need to tune the server settings, such as memory, cache,
       or InnoDB configuration information.

   When the MySQL server starts on Windows, it looks for option files
   in several locations, such as the Windows directory, C:\, and the
   MySQL installation directory (for the full list of locations, see
   Section 4.2.3.3, "Using Option Files"). The Windows directory
   typically is named something like C:\WINDOWS. You can determine
   its exact location from the value of the WINDIR environment
   variable using the following command:
C:\> echo %WINDIR%

   MySQL looks for options in each location first in the my.ini file,
   and then in the my.cnf file. However, to avoid confusion, it is
   best if you use only one file. If your PC uses a boot loader where
   C: is not the boot drive, your only option is to use the my.ini
   file. Whichever option file you use, it must be a plain text file.

   You can also make use of the example option files included with
   your MySQL distribution; see Section 4.2.3.3.2, "Preconfigured
   Option Files."

   An option file can be created and modified with any text editor,
   such as Notepad. For example, if MySQL is installed in E:\mysql
   and the data directory is in E:\mydata\data, you can create an
   option file containing a [mysqld] section to specify values for
   the basedir and datadir options:
[mysqld]
# set basedir to your installation path
basedir=E:/mysql
# set datadir to the location of your data directory
datadir=E:/mydata/data

   Note that Windows path names are specified in option files using
   (forward) slashes rather than backslashes. If you do use
   backslashes, double them:
[mysqld]
# set basedir to your installation path
basedir=E:\\mysql
# set datadir to the location of your data directory
datadir=E:\\mydata\\data

   The rules for use of backslash in option file values are given in
   Section 4.2.3.3, "Using Option Files."

   The data directory is located within the AppData directory for the
   user running MySQL.

   If you would like to use a data directory in a different location,
   you should copy the entire contents of the data directory to the
   new location. For example, if you want to use E:\mydata as the
   data directory instead, you must do two things:

    1. Move the entire data directory and all of its contents from
       the default location (for example C:\Program Files\MySQL\MySQL
       Server 5.5\data) to E:\mydata.

    2. Use a --datadir option to specify the new data directory
       location each time you start the server.

2.3.5.3. Selecting a MySQL Server Type

   The following table shows the available servers for Windows in
   MySQL 5.5.
   Binary Description
   mysqld Optimized binary with named-pipe support
   mysqld-debug Like mysqld, but compiled with full debugging and
   automatic memory allocation checking

   All of the preceding binaries are optimized for modern Intel
   processors, but should work on any Intel i386-class or higher
   processor.

   Each of the servers in a distribution support the same set of
   storage engines. The SHOW ENGINES statement displays which engines
   a given server supports.

   All Windows MySQL 5.5 servers have support for symbolic linking of
   database directories.

   MySQL supports TCP/IP on all Windows platforms. MySQL servers on
   Windows support named pipes as indicated in the following list.
   However, the default is to use TCP/IP regardless of platform.
   (Named pipes are slower than TCP/IP in many Windows
   configurations.)

   Named pipes are enabled only if you start the server with the
   --enable-named-pipe option. It is necessary to use this option
   explicitly because some users have experienced problems with
   shutting down the MySQL server when named pipes were used.

2.3.5.4. Starting the Server for the First Time

   This section gives a general overview of starting the MySQL
   server. The following sections provide more specific information
   for starting the MySQL server from the command line or as a
   Windows service.

   The information here applies primarily if you installed MySQL
   using the Noinstall version, or if you wish to configure and test
   MySQL manually rather than with the GUI tools.

   The examples in these sections assume that MySQL is installed
   under the default location of C:\Program Files\MySQL\MySQL Server
   5.5. Adjust the path names shown in the examples if you have MySQL
   installed in a different location.

   Clients have two options. They can use TCP/IP, or they can use a
   named pipe if the server supports named-pipe connections.

   MySQL for Windows also supports shared-memory connections if the
   server is started with the --shared-memory option. Clients can
   connect through shared memory by using the --protocol=MEMORY
   option.

   For information about which server binary to run, see Section
   2.3.5.3, "Selecting a MySQL Server Type."

   Testing is best done from a command prompt in a console window (or
   "DOS window"). In this way you can have the server display status
   messages in the window where they are easy to see. If something is
   wrong with your configuration, these messages make it easier for
   you to identify and fix any problems.

   To start the server, enter this command:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld" --console

   For a server that includes InnoDB support, you should see the
   messages similar to those following as it starts (the path names
   and sizes may differ):
InnoDB: The first specified datafile c:\ibdata\ibdata1 did not exist:
InnoDB: a new database to be created!
InnoDB: Setting file c:\ibdata\ibdata1 size to 209715200
InnoDB: Database physically writes the file full: wait...
InnoDB: Log file c:\iblogs\ib_logfile0 did not exist: new to be creat
ed
InnoDB: Setting log file c:\iblogs\ib_logfile0 size to 31457280
InnoDB: Log file c:\iblogs\ib_logfile1 did not exist: new to be creat
ed
InnoDB: Setting log file c:\iblogs\ib_logfile1 size to 31457280
InnoDB: Log file c:\iblogs\ib_logfile2 did not exist: new to be creat
ed
InnoDB: Setting log file c:\iblogs\ib_logfile2 size to 31457280
InnoDB: Doublewrite buffer not found: creating new
InnoDB: Doublewrite buffer created
InnoDB: creating foreign key constraint system tables
InnoDB: foreign key constraint system tables created
011024 10:58:25  InnoDB: Started

   When the server finishes its startup sequence, you should see
   something like this, which indicates that the server is ready to
   service client connections:
mysqld: ready for connections
Version: '5.5.9'  socket: ''  port: 3306

   The server continues to write to the console any further
   diagnostic output it produces. You can open a new console window
   in which to run client programs.

   If you omit the --console option, the server writes diagnostic
   output to the error log in the data directory (C:\Program
   Files\MySQL\MySQL Server 5.5\data by default). The error log is
   the file with the .err extension.
   Note

   The accounts that are listed in the MySQL grant tables initially
   have no passwords. After starting the server, you should set up
   passwords for them using the instructions in Section 2.12,
   "Postinstallation Setup and Testing."

2.3.5.5. Starting MySQL from the Windows Command Line

   The MySQL server can be started manually from the command line.
   This can be done on any version of Windows.

   To start the mysqld server from the command line, you should start
   a console window (or "DOS window") and enter this command:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld"

   The path to mysqld may vary depending on the install location of
   MySQL on your system.

   You can stop the MySQL server by executing this command:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqladmin" -u root
 shutdown

   Note

   If the MySQL root user account has a password, you need to invoke
   mysqladmin with the -p option and supply the password when
   prompted.

   This command invokes the MySQL administrative utility mysqladmin
   to connect to the server and tell it to shut down. The command
   connects as the MySQL root user, which is the default
   administrative account in the MySQL grant system. Note that users
   in the MySQL grant system are wholly independent from any login
   users under Windows.

   If mysqld doesn't start, check the error log to see whether the
   server wrote any messages there to indicate the cause of the
   problem. The error log is located in the C:\Program
   Files\MySQL\MySQL Server 5.5\data directory. It is the file with a
   suffix of .err. You can also try to start the server as mysqld
   --console; in this case, you may get some useful information on
   the screen that may help solve the problem.

   The last option is to start mysqld with the --standalone and
   --debug options. In this case, mysqld writes a log file
   C:\mysqld.trace that should contain the reason why mysqld doesn't
   start. See MySQL Internals: Porting
   (http://forge.mysql.com/wiki/MySQL_Internals_Porting).

   Use mysqld --verbose --help to display all the options that mysqld
   supports.

2.3.5.6. Customizing the PATH for MySQL Tools

   To make it easier to invoke MySQL programs, you can add the path
   name of the MySQL bin directory to your Windows system PATH
   environment variable:

     * On the Windows desktop, right-click the My Computer icon, and
       select Properties.

     * Next select the Advanced tab from the System Properties menu
       that appears, and click the Environment Variables button.

     * Under System Variables, select Path, and then click the Edit
       button. The Edit System Variable dialogue should appear.

     * Place your cursor at the end of the text appearing in the
       space marked Variable Value. (Use the End key to ensure that
       your cursor is positioned at the very end of the text in this
       space.) Then enter the complete path name of your MySQL bin
       directory (for example, C:\Program Files\MySQL\MySQL Server
       5.5\bin)
       Note
       There must be a semicolon separating this path from any values
       present in this field.
       Dismiss this dialogue, and each dialogue in turn, by clicking
       OK until all of the dialogues that were opened have been
       dismissed. You should now be able to invoke any MySQL
       executable program by typing its name at the DOS prompt from
       any directory on the system, without having to supply the
       path. This includes the servers, the mysql client, and all
       MySQL command-line utilities such as mysqladmin and mysqldump.
       You should not add the MySQL bin directory to your Windows
       PATH if you are running multiple MySQL servers on the same
       machine.

   Warning

   You must exercise great care when editing your system PATH by
   hand; accidental deletion or modification of any portion of the
   existing PATH value can leave you with a malfunctioning or even
   unusable system.

2.3.5.7. Starting MySQL as a Windows Service

   On Windows, the recommended way to run MySQL is to install it as a
   Windows service, whereby MySQL starts and stops automatically when
   Windows starts and stops. A MySQL server installed as a service
   can also be controlled from the command line using NET commands,
   or with the graphical Services utility. Generally, to install
   MySQL as a Windows service you should be logged in using an
   account that has administrator rights.

   The Services utility (the Windows Service Control Manager) can be
   found in the Windows Control Panel (under Administrative Tools on
   Windows 2000, XP, Vista and Server 2003). To avoid conflicts, it
   is advisable to close the Services utility while performing server
   installation or removal operations from the command line.

   Before installing MySQL as a Windows service, you should first
   stop the current server if it is running by using the following
   command:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqladmin"
          -u root shutdown

   Note

   If the MySQL root user account has a password, you need to invoke
   mysqladmin with the -p option and supply the password when
   prompted.

   This command invokes the MySQL administrative utility mysqladmin
   to connect to the server and tell it to shut down. The command
   connects as the MySQL root user, which is the default
   administrative account in the MySQL grant system. Note that users
   in the MySQL grant system are wholly independent from any login
   users under Windows.

   Install the server as a service using this command:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld" --install

   The service-installation command does not start the server.
   Instructions for that are given later in this section.

   To make it easier to invoke MySQL programs, you can add the path
   name of the MySQL bin directory to your Windows system PATH
   environment variable:

     * On the Windows desktop, right-click the My Computer icon, and
       select Properties.

     * Next select the Advanced tab from the System Properties menu
       that appears, and click the Environment Variables button.

     * Under System Variables, select Path, and then click the Edit
       button. The Edit System Variable dialogue should appear.

     * Place your cursor at the end of the text appearing in the
       space marked Variable Value. (Use the End key to ensure that
       your cursor is positioned at the very end of the text in this
       space.) Then enter the complete path name of your MySQL bin
       directory (for example, C:\Program Files\MySQL\MySQL Server
       5.5\bin), Note that there should be a semicolon separating
       this path from any values present in this field. Dismiss this
       dialogue, and each dialogue in turn, by clicking OK until all
       of the dialogues that were opened have been dismissed. You
       should now be able to invoke any MySQL executable program by
       typing its name at the DOS prompt from any directory on the
       system, without having to supply the path. This includes the
       servers, the mysql client, and all MySQL command-line
       utilities such as mysqladmin and mysqldump.
       You should not add the MySQL bin directory to your Windows
       PATH if you are running multiple MySQL servers on the same
       machine.

   Warning

   You must exercise great care when editing your system PATH by
   hand; accidental deletion or modification of any portion of the
   existing PATH value can leave you with a malfunctioning or even
   unusable system.

   The following additional arguments can be used in MySQL 5.5 when
   installing the service:

     * You can specify a service name immediately following the
       --install option. The default service name is MySQL.

     * If a service name is given, it can be followed by a single
       option. By convention, this should be
       --defaults-file=file_name to specify the name of an option
       file from which the server should read options when it starts.
       The use of a single option other than --defaults-file is
       possible but discouraged. --defaults-file is more flexible
       because it enables you to specify multiple startup options for
       the server by placing them in the named option file.

     * You can also specify a --local-service option following the
       service name. This causes the server to run using the
       LocalService Windows account that has limited system
       privileges. This account is available only for Windows XP or
       newer. If both --defaults-file and --local-service are given
       following the service name, they can be in any order.

   For a MySQL server that is installed as a Windows service, the
   following rules determine the service name and option files that
   the server uses:

     * If the service-installation command specifies no service name
       or the default service name (MySQL) following the --install
       option, the server uses the a service name of MySQL and reads
       options from the [mysqld] group in the standard option files.

     * If the service-installation command specifies a service name
       other than MySQL following the --install option, the server
       uses that service name. It reads options from the [mysqld]
       group and the group that has the same name as the service in
       the standard option files. This enables you to use the
       [mysqld] group for options that should be used by all MySQL
       services, and an option group with the service name for use by
       the server installed with that service name.

     * If the service-installation command specifies a
       --defaults-file option after the service name, the server
       reads options only from the [mysqld] group of the named file
       and ignores the standard option files.

   As a more complex example, consider the following command:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld"
          --install MySQL --defaults-file=C:\my-opts.cnf

   Here, the default service name (MySQL) is given after the
   --install option. If no --defaults-file option had been given,
   this command would have the effect of causing the server to read
   the [mysqld] group from the standard option files. However,
   because the --defaults-file option is present, the server reads
   options from the [mysqld] option group, and only from the named
   file.

   You can also specify options as Start parameters in the Windows
   Services utility before you start the MySQL service.

   Once a MySQL server has been installed as a service, Windows
   starts the service automatically whenever Windows starts. The
   service also can be started immediately from the Services utility,
   or by using a NET START MySQL command. The NET command is not case
   sensitive.

   When run as a service, mysqld has no access to a console window,
   so no messages can be seen there. If mysqld does not start, check
   the error log to see whether the server wrote any messages there
   to indicate the cause of the problem. The error log is located in
   the MySQL data directory (for example, C:\Program
   Files\MySQL\MySQL Server 5.5\data). It is the file with a suffix
   of .err.

   When a MySQL server has been installed as a service, and the
   service is running, Windows stops the service automatically when
   Windows shuts down. The server also can be stopped manually by
   using the Services utility, the NET STOP MySQL command, or the
   mysqladmin shutdown command.

   You also have the choice of installing the server as a manual
   service if you do not wish for the service to be started
   automatically during the boot process. To do this, use the
   --install-manual option rather than the --install option:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld" --install-m
anual

   To remove a server that is installed as a service, first stop it
   if it is running by executing NET STOP MySQL. Then use the
   --remove option to remove it:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqld" --remove

   If mysqld is not running as a service, you can start it from the
   command line. For instructions, see Section 2.3.5.5, "Starting
   MySQL from the Windows Command Line."

   Please see Section 2.3.6, "Troubleshooting a MySQL Installation
   Under Windows," if you encounter difficulties during installation.

2.3.5.8. Testing The MySQL Installation

   You can test whether the MySQL server is working by executing any
   of the following commands:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqlshow"
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqlshow" -u root
mysql
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqladmin" version
 status proc
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysql" test

   If mysqld is slow to respond to TCP/IP connections from client
   programs, there is probably a problem with your DNS. In this case,
   start mysqld with the --skip-name-resolve option and use only
   localhost and IP addresses in the Host column of the MySQL grant
   tables.

   You can force a MySQL client to use a named-pipe connection rather
   than TCP/IP by specifying the --pipe or --protocol=PIPE option, or
   by specifying . (period) as the host name. Use the --socket option
   to specify the name of the pipe if you do not want to use the
   default pipe name.

   Note that if you have set a password for the root account, deleted
   the anonymous account, or created a new user account, then you
   must use the appropriate -u and -p options with the commands shown
   above to connect with the MySQL Server. See Section 4.2.2,
   "Connecting to the MySQL Server."

   For more information about mysqlshow, see Section 4.5.6,
   "mysqlshow --- Display Database, Table, and Column Information."

2.3.6. Troubleshooting a MySQL Installation Under Windows

   When installing and running MySQL for the first time, you may
   encounter certain errors that prevent the MySQL server from
   starting. The purpose of this section is to help you diagnose and
   correct some of these errors.

   Your first resource when troubleshooting server issues is the
   error log. The MySQL server uses the error log to record
   information relevant to the error that prevents the server from
   starting. The error log is located in the data directory specified
   in your my.ini file. The default data directory location is
   C:\Program Files\MySQL\MySQL Server 5.5\data. See Section 5.2.2,
   "The Error Log."

   Another source of information regarding possible errors is the
   console messages displayed when the MySQL service is starting. Use
   the NET START MySQL command from the command line after installing
   mysqld as a service to see any error messages regarding the
   starting of the MySQL server as a service. See Section 2.3.5.7,
   "Starting MySQL as a Windows Service."

   The following examples show other common error messages you may
   encounter when installing MySQL and starting the server for the
   first time:

     * If the MySQL server cannot find the mysql privileges database
       or other critical files, you may see these messages:
System error 1067 has occurred.
Fatal error: Can't open privilege tables: Table 'mysql.host' doesn't
exist
       These messages often occur when the MySQL base or data
       directories are installed in different locations than the
       default locations (C:\Program Files\MySQL\MySQL Server 5.5 and
       C:\Program Files\MySQL\MySQL Server 5.5\data, respectively).
       This situation may occur when MySQL is upgraded and installed
       to a new location, but the configuration file is not updated
       to reflect the new location. In addition, there may be old and
       new configuration files that conflict. Be sure to delete or
       rename any old configuration files when upgrading MySQL.
       If you have installed MySQL to a directory other than
       C:\Program Files\MySQL\MySQL Server 5.5, you need to ensure
       that the MySQL server is aware of this through the use of a
       configuration (my.ini) file. The my.ini file needs to be
       located in your Windows directory, typically C:\WINDOWS. You
       can determine its exact location from the value of the WINDIR
       environment variable by issuing the following command from the
       command prompt:
C:\> echo %WINDIR%
       An option file can be created and modified with any text
       editor, such as Notepad. For example, if MySQL is installed in
       E:\mysql and the data directory is D:\MySQLdata, you can
       create the option file and set up a [mysqld] section to
       specify values for the basedir and datadir options:
[mysqld]
# set basedir to your installation path
basedir=E:/mysql
# set datadir to the location of your data directory
datadir=D:/MySQLdata
       Note that Windows path names are specified in option files
       using (forward) slashes rather than backslashes. If you do use
       backslashes, double them:
[mysqld]
# set basedir to your installation path
basedir=C:\\Program Files\\MySQL\\MySQL Server 5.5
# set datadir to the location of your data directory
datadir=D:\\MySQLdata
       The rules for use of backslash in option file values are given
       in Section 4.2.3.3, "Using Option Files."
       If you change the datadir value in your MySQL configuration
       file, you must move the contents of the existing MySQL data
       directory before restarting the MySQL server.
       See Section 2.3.5.2, "Creating an Option File."

     * If you reinstall or upgrade MySQL without first stopping and
       removing the existing MySQL service and install MySQL using
       the MySQL Configuration Wizard, you may see this error:
Error: Cannot create Windows service for MySql. Error: 0
       This occurs when the Configuration Wizard tries to install the
       service and finds an existing service with the same name.
       One solution to this problem is to choose a service name other
       than mysql when using the configuration wizard. This enables
       the new service to be installed correctly, but leaves the
       outdated service in place. Although this is harmless, it is
       best to remove old services that are no longer in use.
       To permanently remove the old mysql service, execute the
       following command as a user with administrative privileges, on
       the command-line:
C:\> sc delete mysql
[SC] DeleteService SUCCESS
       If the sc utility is not available for your version of
       Windows, download the delsrv utility from
       http://www.microsoft.com/windows2000/techinfo/reskit/tools/exi
       sting/delsrv-o.asp and use the delsrv mysql syntax.

2.3.7. Upgrading MySQL on Windows

   This section lists some of the steps you should take when
   upgrading MySQL on Windows.

    1. Review Section 2.13.1, "Upgrading MySQL," for additional
       information on upgrading MySQL that is not specific to
       Windows.

    2. You should always back up your current MySQL installation
       before performing an upgrade. See Section 6.2, "Database
       Backup Methods."

    3. Download the latest Windows distribution of MySQL from
       http://dev.mysql.com/downloads/.

    4. Before upgrading MySQL, you must stop the server. If the
       server is installed as a service, stop the service with the
       following command from the command prompt:
C:\> NET STOP MySQL
       If you are not running the MySQL server as a service, use the
       following command to stop it:
C:\> "C:\Program Files\MySQL\MySQL Server 5.5\bin\mysqladmin" -u root
 shutdown
       Note
       If the MySQL root user account has a password, you need to
       invoke mysqladmin with the -p option and supply the password
       when prompted.

    5. When upgrading to MySQL 5.5 from a version previous to 4.1.5,
       or when upgrading from a version of MySQL installed from a Zip
       archive to a version of MySQL installed with the MySQL
       Installation Wizard, you must manually remove the previous
       installation and MySQL service (if the server is installed as
       a service).
       To remove the MySQL service, use the following command:
C:\> C:\mysql\bin\mysqld --remove
       If you do not remove the existing service, the MySQL
       Installation Wizard may fail to properly install the new MySQL
       service.

    6. If you are using the MySQL Installation Wizard, start the
       wizard as described in Section 2.3.3.1, "Using the MySQL
       Installation Wizard."

    7. If you are installing MySQL from a Zip archive, extract the
       archive. You may either overwrite your existing MySQL
       installation (usually located at C:\mysql), or install it into
       a different directory, such as C:\mysql5. Overwriting the
       existing installation is recommended.

    8. If you were running MySQL as a Windows service and you had to
       remove the service earlier in this procedure, reinstall the
       service. (See Section 2.3.5.7, "Starting MySQL as a Windows
       Service.")

    9. Restart the server. For example, use NET START MySQL if you
       run MySQL as a service, or invoke mysqld directly otherwise.
   10. If you encounter errors, see Section 2.3.6, "Troubleshooting a
       MySQL Installation Under Windows."

2.3.8. Windows Postinstallation Procedures

   On Windows, you need not create the data directory and the grant
   tables. MySQL Windows distributions include the grant tables with
   a set of preinitialized accounts in the mysql database under the
   data directory. It is unnecessary to run the mysql_install_db
   script that is used on Unix. Regarding passwords, if you installed
   MySQL using the Windows Installation Wizard, you may have already
   assigned passwords to the accounts. (See Section 2.3.3.1, "Using
   the MySQL Installation Wizard.") Otherwise, use the
   password-assignment procedure given in Section 2.12.2, "Securing
   the Initial MySQL Accounts."

   Before setting up passwords, you might want to try running some
   client programs to make sure that you can connect to the server
   and that it is operating properly. Make sure that the server is
   running (see Section 2.3.5.4, "Starting the Server for the First
   Time"), and then issue the following commands to verify that you
   can retrieve information from the server. You may need to specify
   directory different from C:\mysql\bin on the command line. If you
   used the Windows Installation Wizard, the default directory is
   C:\Program Files\MySQL\MySQL Server 5.5, and the mysql and
   mysqlshow client programs are in C:\Program Files\MySQL\MySQL
   Server 5.5\bin. See Section 2.3.3.1, "Using the MySQL Installation
   Wizard," for more information.

   Use mysqlshow to see what databases exist:
C:\> C:\mysql\bin\mysqlshow
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+

   The list of installed databases may vary, but will always include
   the minimum of mysql and information_schema. In most cases, the
   test database will also be installed automatically.

   The preceding command (and commands for other MySQL programs such
   as mysql) may not work if the correct MySQL account does not
   exist. For example, the program may fail with an error, or you may
   not be able to view all databases. If you installed using the MSI
   packages and used the MySQL Server Instance Config Wizard, then
   the root user will have been created automatically with the
   password you supplied. In this case, you should use the -u root
   and -p options. (You will also need to use the -u root and -p
   options if you have already secured the initial MySQL accounts.)
   With -p, you will be prompted for the root password. For example:
C:\> C:\mysql\bin\mysqlshow -u root -p
Enter password: (enter root password here)
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+

   If you specify a database name, mysqlshow displays a list of the
   tables within the database:
C:\> C:\mysql\bin\mysqlshow mysql
Database: mysql
+---------------------------+
|          Tables           |
+---------------------------+
| columns_priv              |
| db                        |
| event                     |
| func                      |
| help_category             |
| help_keyword              |
| help_relation             |
| help_topic                |
| host                      |
| plugin                    |
| proc                      |
| procs_priv                |
| servers                   |
| tables_priv               |
| time_zone                 |
| time_zone_leap_second     |
| time_zone_name            |
| time_zone_transition      |
| time_zone_transition_type |
| user                      |
+---------------------------+

   Use the mysql program to select information from a table in the
   mysql database:
C:\> C:\mysql\bin\mysql -e "SELECT Host,Db,User FROM mysql.db"
+------+--------+------+
| host | db     | user |
+------+--------+------+
| %    | test   |      |
| %    | test_% |      |
+------+--------+------+

   For more information about mysqlshow and mysql, see Section 4.5.6,
   "mysqlshow --- Display Database, Table, and Column Information,"
   and Section 4.5.1, "mysql --- The MySQL Command-Line Tool."

   If you are running a version of Windows that supports services,
   you can set up the MySQL server to run automatically when Windows
   starts. See Section 2.3.5.7, "Starting MySQL as a Windows
   Service."

2.4. Installing MySQL on Mac OS X

   MySQL for Mac OS X is available in a number of different forms:

     * Native Package Installer format, which uses the native Mac OS
       X installer to walk you through the installation of MySQL. For
       more information, see Section 2.4.2, "Installing MySQL on Mac
       OS X Using Native Packages." You can use the package installer
       with Mac OS X 10.3 and later, and the package is available for
       both PowerPC and Intel architectures, and 32-bit and 64-bit
       architectures. There is no Universal Binary available using
       the package installation method. The user you use to perform
       the installation must have administrator privileges.

     * Tar package format, which uses a file packaged using the Unix
       tar and gzip commands. To use this method, you will need to
       open a Terminal window. You do not need administrator
       privileges using this method, as you can install the MySQL
       server anywhere using this method. For more information on
       using this method, you can use the generic instructions for
       using a tarball, Section 2.2, "Installing MySQL from Generic
       Binaries on Unix/Linux."You can use the package installer with
       Mac OS X 10.3 and later, and available for both PowerPC and
       Intel architectures, and both 32-bit and 64-bit architectures.
       A Universal Binary, incorporating both Power PC and Intel
       architectures and 32-bit and 64-bit binaries is available.
       In addition to the core installation, the Package Installer
       also includes Section 2.4.3, "Installing the MySQL Startup
       Item" and Section 2.4.4, "Installing and Using the MySQL
       Preference Pane," both of which simplify the management of
       your installation.

     * Mac OS X server includes a version of MySQL as standard. If
       you want to use a more recent version than that supplied with
       the Mac OS X server release, you can make use of the package
       or tar formats. For more information on using the MySQL
       bundled with Mac OS X, see Section 2.4.5, "Using the Bundled
       MySQL on Mac OS X Server."

   For additional information on using MySQL on Mac OS X, see Section
   2.4.1, "General Notes on Installing MySQL on Mac OS X."

2.4.1. General Notes on Installing MySQL on Mac OS X

   You should keep the following issues and notes in mind:

     * The default location for the MySQL Unix socket is different on
       Mac OS X and Mac OS X Server depending on the installation
       type you chose. The following table shows the default
       locations by installation type.
       Table 2.7. MySQL Unix Socket Locations on Mac OS X by
       Installation Type

               Installation Type             Socket Location
       Package Installer from MySQL       /tmp/mysql.sock
       Tarball from MySQL                 /tmp/mysql.sock
       MySQL Bundled with Mac OS X Server /var/mysql/mysql.sock
       To prevent issues, you should either change the configuration
       of the socket used within your application (for example,
       changing php.ini), or you should configure the socket location
       using a MySQL configuration file and the socket option. For
       more information, see Section 5.1.2, "Server Command Options."

     * You may need (or want) to create a specific mysql user to own
       the MySQL directory and data. On Mac OS X 10.4 and lower you
       can do this by using the Netinfo Manager application, located
       within the Utilities folder within the Applications folder. On
       Mac OS X 10.5 and later you can do this through the Directory
       Utility. From Mac OS X 10.5 and later (including Mac OS X
       Server 10.5) the mysql should already exist. For use in single
       user mode, an entry for _mysql (note the underscore prefix)
       should already exist within the system /etc/passwd file.

     * Due to a bug in the Mac OS X package installer, you may see
       this error message in the destination disk selection dialog:
You cannot install this software on this disk. (null)
       If this error occurs, click the Go Back button once to return
       to the previous screen. Then click Continue to advance to the
       destination disk selection again, and you should be able to
       choose the destination disk correctly. We have reported this
       bug to Apple and it is investigating this problem.

     * Because the MySQL package installer installs the MySQL
       contents into a version and platform specific directory, you
       can use this to upgrade and migrate your database between
       versions. You will need to either copy the data directory from
       the old version to the new version, or alternatively specify
       an alternative datadir value to set location of the data
       directory.

     * You might want to add aliases to your shell's resource file to
       make it easier to access commonly used programs such as mysql
       and mysqladmin from the command line. The syntax for bash is:
alias mysql=/usr/local/mysql/bin/mysql
alias mysqladmin=/usr/local/mysql/bin/mysqladmin
       For tcsh, use:
alias mysql /usr/local/mysql/bin/mysql
alias mysqladmin /usr/local/mysql/bin/mysqladmin
       Even better, add /usr/local/mysql/bin to your PATH environment
       variable. You can do this by modifying the appropriate startup
       file for your shell. For more information, see Section 4.2.1,
       "Invoking MySQL Programs."

     * After you have copied over the MySQL database files from the
       previous installation and have successfully started the new
       server, you should consider removing the old installation
       files to save disk space. Additionally, you should also remove
       older versions of the Package Receipt directories located in
       /Library/Receipts/mysql-VERSION.pkg.

2.4.2. Installing MySQL on Mac OS X Using Native Packages

   You can install MySQL on Mac OS X 10.3.x ("Panther") or newer
   using a Mac OS X binary package in PKG format instead of the
   binary tarball distribution. Please note that older versions of
   Mac OS X (for example, 10.1.x or 10.2.x) are not supported by this
   package.

   The package is located inside a disk image (.dmg) file that you
   first need to mount by double-clicking its icon in the Finder. It
   should then mount the image and display its contents.
   Note

   Before proceeding with the installation, be sure to stop all
   running MySQL server instances by using either the MySQL Manager
   Application (on Mac OS X Server) or mysqladmin shutdown on the
   command line.

   When installing from the package version, you should also install
   the MySQL Preference Pane, which will enable you to control the
   startup and execution of your MySQL server from System
   Preferences. For more information, see Section 2.4.4, "Installing
   and Using the MySQL Preference Pane."

   When installing using the package installer, the files are
   installed into a directory within /usr/local matching the name of
   the installation version and platform. For example, the installer
   file mysql-5.1.39-osx10.5-x86_64.pkg installs MySQL into
   /usr/local/mysql-5.1.39-osx10.5-x86_64 . The following table shows
   the layout of the installation directory.

   Table 2.8. MySQL Installation Layout on Mac OS X
   Directory Contents of Directory
   bin Client programs and the mysqld server
   data Log files, databases
   docs Manual in Info format
   include Include (header) files
   lib Libraries
   man Unix manual pages
   mysql-test MySQL test suite
   scripts mysql_install_db
   share Miscellaneous support files, including error messages,
   sample configuration files, SQL for database installation
   sql-bench Benchmarks
   support-files Scripts and sample configuration files
   /tmp/mysql.sock Location of the MySQL Unix socket

   During the package installer process, a symbolic link from
   /usr/local/mysql to the version/platform specific directory
   created during installation will be created automatically.

    1. Download and open the MySQL package installer, which is
       provided on a disk image (.dmg) that includes the main MySQL
       installation package, the MySQLStartupItem.pkg installation
       package, and the MySQL.prefPane. Double-click the disk image
       to open it.

    2. Double-click the MySQL installer package. It will be named
       according to the version of MySQL you have downloaded. For
       example, if you have downloaded MySQL 5.1.39, double-click
       mysql-5.1.39-osx10.5-x86.pkg.

    3. You will be presented with the opening installer dialog. Click
       Continue to begin installation.
       MySQL Package Installer: Step 1

    4. A copy of the installation instructions and other important
       information relevant to this installation are displayed. Click
       Continue .

    5. If you have downloaded the community version of MySQL, you
       will be shown a copy of the relevent GNU General Public
       License. Click Continue .

    6. Select the drive you want to use to install the MySQL Startup
       Item. The drive must have a valid, bootable, Mac OS X
       operating system installed. Click Continue.
       MySQL Package Installer: Step 4

    7. You will be asked to confirm the details of the installation,
       including the space required for the installation. To change
       the drive on which the startup item is installed, click either
       Go Back or Change Install Location.... To install the startup
       item, click Install.

    8. Once the installation has been completed successfully, you
       will be shown an Install Succeeded message.

   For convenience, you may also want to install the startup item and
   preference pane. See Section 2.4.3, "Installing the MySQL Startup
   Item," and Section 2.4.4, "Installing and Using the MySQL
   Preference Pane."

2.4.3. Installing the MySQL Startup Item

   The MySQL Installation Package includes a startup item that can be
   used to automatically start and stop MySQL.

   To install the MySQL Startup Item:

    1. Download and open the MySQL package installer, which is
       provided on a disk image (.dmg) that includes the main MySQL
       installation package, the MySQLStartupItem.pkg installation
       package, and the MySQL.prefPane. Double-click the disk image
       to open it.

    2. Double-click the MySQLStartItem.pkg file to start the
       installation process.

    3. You will be presented with the Install MySQL Startup Item
       dialog.
       MySQL Startup Item Installer: Step 1
       Click Continue to continue the installation process.

    4. A copy of the installation instructions and other important
       information relevant to this installation are displayed. Click
       Continue .

    5. Select the drive you want to use to install the MySQL Startup
       Item. The drive must have a valid, bootable, Mac OS X
       operating system installed. Click Continue.
       MySQL Startup Item Installer: Step 3

    6. You will be asked to confirm the details of the installation.
       To change the drive on which the startup item is installed,
       click either Go Back or Change Install Location.... To install
       the startup item, click Install.

    7. Once the installation has been completed successfully, you
       will be shown an Install Succeeded message.
       MySQL Startup Item Installer: Step 5

   The Startup Item for MySQL is installed into
   /Library/StartupItems/MySQLCOM. The Startup Item installation adds
   a variable MYSQLCOM=-YES- to the system configuration file
   /etc/hostconfig. If you want to disable the automatic startup of
   MySQL, change this variable to MYSQLCOM=-NO-.

   After the installation, you can start and stop MySQL by running
   the following commands in a terminal window. You must have
   administrator privileges to perform these tasks, and you may be
   prompted for your password.

   If you have installed the Startup Item, use this command to start
   the server:
shell> sudo /Library/StartupItems/MySQLCOM/MySQLCOM start

   If you have installed the Startup Item, use this command to stop
   the server:
shell> sudo /Library/StartupItems/MySQLCOM/MySQLCOM stop

2.4.4. Installing and Using the MySQL Preference Pane

   The MySQL Package installer disk image also includes a custom
   MySQL Preference Pane that enables you to start, stop, and control
   automated startup during boot of your MySQL installation.

   To install the MySQL Preference Pane:

    1. Download and open the MySQL package installer package, which
       is provided on a disk image (.dmg) that includes the main
       MySQL installation package, the MySQLStartupItem.pkg
       installation package, and the MySQL.prefPane. Double-click the
       disk image to open it.

    2. Double-click the MySQL.prefPane. The MySQL System Preferences
       will open.

    3. If this is the first time you have installed the preference
       pane, you will be asked to confirm installation and whether
       you want to install the preference pane for all users, or only
       the current user. To install the preference pane for all users
       you will need administrator privileges. If necessary, you will
       be prompted for the username and password for a user with
       administrator privileges.

    4. If you already have the MySQL Preference Pane installed, you
       will be asked to confirm whether you want to overwrite the
       existing MySQL Preference Pane.

   Note

   The MySQL Preference Pane only starts and stops MySQL installation
   installed from the MySQL package installation that have been
   installed in the default location.

   Once the MySQL Preference Pane has been installed, you can control
   your MySQL server instance using the preference pane. To use the
   preference pane, open the System Preferences... from the Apple
   menu. Select the MySQL preference pane by clicking the MySQL logo
   within the Other section of the preference panes list.
   MySQL Preference Pane

   The MySQL Preference Pane shows the current status of the MySQL
   server, showing stopped (in red) if the server is not running and
   running (in green) if the server has already been started. The
   preference pane also shows the current setting for whether the
   MySQL server has been set to start automatically.

     * To start MySQL using the preference pane: 
       Click Start MySQL Server. You may be prompted for the username
       and password of a user with administrator privileges to start
       the MySQL server.

     * To stop MySQL using the preference pane: 
       Click Stop MySQL Server. You may be prompted for the username
       and password of a user with administrator privileges to stop
       the MySQL server.

     * To automatically start the MySQL server when the system boots:
       Check the checkbox next to Automatically Start MySQL Server on
       Startup.

     * To disable automatic MySQL server startup when the system
       boots:
       Uncheck the checkbox next to Automatically Start MySQL Server
       on Startup.

   You can close the System Preferences... window once you have
   completed your settings.

2.4.5. Using the Bundled MySQL on Mac OS X Server

   If you are running Mac OS X Server, a version of MySQL should
   already be installed. The following table shows the versions of
   MySQL that ship with Mac OS X Server versions.

   Table 2.9. MySQL Versions Preinstalled with Mac OS X Server
   Mac OS X Server Version MySQL Version
   10.2-10.2.2             3.23.51
   10.2.3-10.2.6           3.23.53
   10.3                    4.0.14
   10.3.2                  4.0.16
   10.4.0                  4.1.10a
   10.5.0                  5.0.45
   10.6.0                  5.0.82

   The following table shows the installation layout of MySQL on Mac
   OS X Server.

   Table 2.10. MySQL Directory Layout for Preinstalled MySQL
   Installations on Mac OS X Server
   Directory Contents of Directory
   /usr/bin Client programs
   /var/mysql Log files, databases
   /usr/libexec The mysqld server
   /usr/share/man Unix manual pages
   /usr/share/mysql/mysql-test MySQL test suite
   /usr/share/mysql Miscellaneous support files, including error
   messages, character set files, sample configuration files, SQL for
   database installation
   /var/mysql/mysql.sock Location of the MySQL Unix socket

Additional Resources


     * For more information on managing the bundled MySQL instance in
       Mac OS X Server 10.5, see Mac OS X Server: Web Technologies
       Administration For Version 10.5 Leopard
       (http://images.apple.com/server/macosx/docs/Web_Technologies_A
       dmin_v10.5.pdf).

     * For more information on managing the bundled MySQL instance in
       Mac OS X Server 10.6, see Mac OS X Server: Web Technologies
       Administration Version 10.6 Snow Leopard
       (http://manuals.info.apple.com/en_US/WebTech_v10.6.pdf).

     * The MySQL server bundled with Mac OS X Server does not include
       the MySQL client libraries and header files required to access
       and use MySQL from a third-party driver, such as Perl DBI or
       PHP. For more information on obtaining and installing MySQL
       libraries, see Mac OS X Server version 10.5: MySQL libraries
       available for download (http://support.apple.com/kb/TA25017).
       Alternatively, you can ignore the bundled MySQL server and
       install MySQL from the package or tarball installation.

2.5. Installing MySQL on Linux

   Linux supports a number of different solutions for installing
   MySQL. The recommended method is to use one of the distributions
   from Oracle. If you choose this method, there are three options
   available:

     * Installing from a generic binary package in .tar.gz format.
       See Section 2.2, "Installing MySQL from Generic Binaries on
       Unix/Linux" for more information.

     * Extracting and compiling MySQL from a source distribution. For
       detailed instructions, see Section 2.11, "Installing MySQL
       from Source."

     * Installing using a pre-compiled RPM package. For more
       information on using the RPM solution, see Section 2.5.1,
       "Installing MySQL from RPM Packages on Linux."

   As an alternative, you can use the native package manager within
   your Linux distribution to automatically download and install
   MySQL for you. Native package installations can take of the
   download and depdendencies required to run MySQL, but the MySQL
   version will often be some way behind the currently available
   release. You will also normally be unable to install developmental
   releases, as these are not usually made available in the native
   repository. For more information on using the native package
   installers, see Section 2.5.2, "Installing MySQL on Linux using
   Native Package Manager."
   Note

   For many Linux installations, you will want to set up MySQL to be
   started automatically when your machine starts. Many of the native
   package installations perform this operation for you, but for
   source, binary and RPM solutions you may need to set this up
   separately. The required script, mysql.server, can be found in the
   support-files directory under the MySQL installation directory or
   in a MySQL source tree. You can install it as /etc/init.d/mysql
   for automatic MySQL startup and shutdown. See Section 2.12.1.2,
   "Starting and Stopping MySQL Automatically."

2.5.1. Installing MySQL from RPM Packages on Linux

   The recommended way to install MySQL on RPM-based Linux
   distributions is by using the RPM packages. The RPMs that we
   provide to the community should work on all versions of Linux that
   support RPM packages and use glibc 2.3. To obtain RPM packages,
   see Section 2.1.3, "How to Get MySQL."

   For non-RPM Linux distributions, you can install MySQL using a
   .tar.gz package. See Section 2.2, "Installing MySQL from Generic
   Binaries on Unix/Linux."

   Installations created from our Linux RPM distributions result in
   files under the following system directories.

   Table 2.11. MySQL Installation Layout for Linux RPM
   Directory Contents of Directory
   /usr/bin Client programs and scripts
   /usr/sbin The mysqld server
   /var/lib/mysql Log files, databases
   /usr/share/info Manual in Info format
   /usr/share/man Unix manual pages
   /usr/include/mysql Include (header) files
   /usr/lib/mysql Libraries
   /usr/share/mysql Miscellaneous support files, including error
   messages, character set files, sample configuration files, SQL for
   database installation
   /usr/share/sql-bench Benchmarks
   Note

   RPM distributions of MySQL often are provided by other vendors. Be
   aware that they may differ in features and capabilities from those
   built by us, and that the instructions in this manual do not
   necessarily apply to installing them. The vendor's instructions
   should be consulted instead.

   In most cases, you need to install only the MySQL-server and
   MySQL-client packages to get a functional MySQL installation. The
   other packages are not required for a standard installation.

   RPMs for MySQL Cluster.  Standard MySQL server RPMs built by MySQL
   do not provide support for the NDBCLUSTER
   (http://dev.mysql.com/doc/refman/5.1/en/mysql-cluster.html)
   storage engine.
   Important

   When upgrading a MySQL Cluster RPM installation, you must upgrade
   all installed RPMs, including the Server and Client RPMs.

   For more information about installing MySQL Cluster from RPMs, see
   MySQL Cluster Multi-Computer Installation
   (http://dev.mysql.com/doc/refman/5.1/en/mysql-cluster-multi-instal
   l.html).

   For upgrades, if your installation was originally produced by
   installing multiple RPM packages, it is best to upgrade all the
   packages, not just some. For example, if you previously installed
   the server and client RPMs, do not upgrade just the server RPM.

   If you get a dependency failure when trying to install MySQL
   packages (for example, error: removing these packages would break
   dependencies: libmysqlclient.so.10 is needed by ...), you should
   also install the MySQL-shared-compat package, which includes both
   the shared libraries for backward compatibility
   (libmysqlclient.so.12 for MySQL 4.0 and libmysqlclient.so.10 for
   MySQL 3.23).

   The RPM packages shown in the following list are available. The
   names shown here use a suffix of .glibc23.i386.rpm, but particular
   packages can have different suffixes, described later.

     * MySQL-server-VERSION.glibc23.i386.rpm
       The MySQL server. You need this unless you only want to
       connect to a MySQL server running on another machine.

     * MySQL-client-VERSION.glibc23.i386.rpm
       The standard MySQL client programs. You probably always want
       to install this package.

     * MySQL-devel-VERSION.glibc23.i386.rpm
       The libraries and include files that are needed if you want to
       compile other MySQL clients, such as the Perl modules.

     * MySQL-debuginfo-VERSION.glibc23.i386.rpm
       This package contains debugging information. debuginfo RPMs
       are never needed to use MySQL software; this is true both for
       the server and for client programs. However, they contain
       additional information that might be needed by a debugger to
       analyze a crash.

     * MySQL-shared-VERSION.glibc23.i386.rpm
       This package contains the shared libraries
       (libmysqlclient.so*) that certain languages and applications
       need to dynamically load and use MySQL. It contains
       single-threaded and thread-safe libraries. Prior to MySQL
       5.5.6, if you install this package, do not install the
       MySQL-shared-compat package.

     * MySQL-shared-compat-VERSION.glibc23.i386.rpm
       This package includes the shared libraries for MySQL 3.23,
       4.0, and so on. It contains single-threaded and thread-safe
       libraries. Install this package if you have applications
       installed that are dynamically linked against older versions
       of MySQL but you want to upgrade to the current version
       without breaking the library dependencies. Before MySQL 5.5.6,
       MySQL-shared-compat also includes the libraries for the
       current release, so if you install it, you should not also
       install MySQL-shared. As of 5.5.6, MySQL-shared-compat does
       not include the current library version, so there is no
       conflict.

     * MySQL-embedded-VERSION.glibc23.i386.rpm
       The embedded MySQL server library.

     * MySQL-test-VERSION.glibc23.i386.rpm
       This package includes the MySQL test suite.

     * MySQL-VERSION.src.rpm
       This contains the source code for all of the previous
       packages. It can also be used to rebuild the RPMs on other
       architectures (for example, Alpha or SPARC).

   The suffix of RPM package names (following the VERSION value) has
   the following syntax:
.PLATFORM.CPU.rpm

   The PLATFORM and CPU values indicate the type of system for which
   the package is built. PLATFORM indicates the platform and CPU
   indicates the processor type or family.

   All packages are dynamically linked against glibc 2.3. The
   PLATFORM value indicates whether the package is platform
   independent or intended for a specific platform, as shown in the
   following table.

   Table 2.12. MySQL Linux Installation Packages
   PLATFORM Value Intended Use
   glibc23 Platform independent, should run on any Linux distribution
   that supports glibc 2.3
   rhel3, rhel4 Red Hat Enterprise Linux 3 or 4
   sles9, sles10 SuSE Linux Enterprise Server 9 or 10

   In MySQL 5.5, only glibc23 packages are available currently.

   The CPU value indicates the processor type or family for which the
   package is built.

   Table 2.13. MySQL Installation Packages for Linux CPU Identifier
   CPU Value Intended Processor Type or Family
   i386      x86 processor, 386 and up
   i586      x86 processor, Pentium and up
   x86_64    64-bit x86 processor
   ia64      Itanium (IA-64) processor

   To see all files in an RPM package (for example, a MySQL-server
   RPM), run a command like this:
shell> rpm -qpl MySQL-server-VERSION.glibc23.i386.rpm

   To perform a standard minimal installation, install the server and
   client RPMs:
shell> rpm -i MySQL-server-VERSION.glibc23.i386.rpm
shell> rpm -i MySQL-client-VERSION.glibc23.i386.rpm

   To install only the client programs, install just the client RPM:
shell> rpm -i MySQL-client-VERSION.glibc23.i386.rpm

   RPM provides a feature to verify the integrity and authenticity of
   packages before installing them. If you would like to learn more
   about this feature, see Section 2.1.4, "Verifying Package
   Integrity Using MD5 Checksums or GnuPG."

   The server RPM places data under the /var/lib/mysql directory. The
   RPM also creates a login account for a user named mysql (if one
   does not exist) to use for running the MySQL server, and creates
   the appropriate entries in /etc/init.d/ to start the server
   automatically at boot time. (This means that if you have performed
   a previous installation and have made changes to its startup
   script, you may want to make a copy of the script so that you do
   not lose it when you install a newer RPM.) See Section 2.12.1.2,
   "Starting and Stopping MySQL Automatically," for more information
   on how MySQL can be started automatically on system startup.

   If you want to install the MySQL RPM on older Linux distributions
   that do not support initialization scripts in /etc/init.d
   (directly or through a symlink), you should create a symbolic link
   that points to the location where your initialization scripts
   actually are installed. For example, if that location is
   /etc/rc.d/init.d, use these commands before installing the RPM to
   create /etc/init.d as a symbolic link that points there:
shell> cd /etc
shell> ln -s rc.d/init.d .

   However, all current major Linux distributions should support the
   new directory layout that uses /etc/init.d, because it is required
   for LSB (Linux Standard Base) compliance.

   In MySQL 5.5.5 and later, during a new installation, the server
   boot scripts are installed, but the MySQL server is not started at
   the end of the installation, since the status of the server during
   an unattended installation is not known.

   In MySQL 5.5.5 and later, during an upgrade installation using the
   RPM packages, if the MySQL server is running when the upgrade
   occurs, the MySQL server is stopped, the upgrade occurs, and the
   MySQL server is restarted. If the MySQL server is not already
   running when the RPM upgrade occurs, the MySQL server is not
   started at the end of the installation.

   If the RPM files that you install include MySQL-server, the mysqld
   server should be up and running after installation. You should be
   able to start using MySQL.

   If something goes wrong, you can find more information in the
   binary installation section. See Section 2.2, "Installing MySQL
   from Generic Binaries on Unix/Linux."
   Note

   The accounts that are listed in the MySQL grant tables initially
   have no passwords. After starting the server, you should set up
   passwords for them using the instructions in Section 2.12,
   "Postinstallation Setup and Testing."

   During RPM installation, a user named mysql and a group named
   mysql are created on the system. This is done using the useradd,
   groupadd, and usermod commands. Those commands require appropriate
   administrative privileges, which is required for locally managed
   users and groups (as listed in the /etc/passwd and /etc/group
   files) by the RPM installation process being run by root.

   If you log in as the mysql user, you may find that MySQL displays
   "Invalid (old?) table or database name" errors that mention
   .mysqlgui, lost+found, .mysqlgui, .bash_history, .fonts.cache-1,
   .lesshst, .mysql_history, .profile, .viminfo, and similar files
   created by MySQL or operating system utilities. You can safely
   ignore these error messages or remove the files or directories
   that cause them if you do not need them.

   For nonlocal user management (LDAP, NIS, and so forth), the
   administrative tools may require additional authentication (such
   as a password), and will fail if the installing user does not
   provide this authentication. Even if they fail, the RPM
   installation will not abort but succeed, and this is intentional.
   If they failed, some of the intended transfer of ownership may be
   missing, and it is recommended that the system administrator then
   manually ensures some appropriate user and group exists and
   manually transfers ownership following the actions in the RPM spec
   file.

2.5.2. Installing MySQL on Linux using Native Package Manager

   Many Linux distributions include a version of the MySQL server,
   client tools, and development components into the standard package
   management system built into distributions such as Fedora, Debian,
   Ubuntu, and Gentoo. This section provides basic instructions for
   installing MySQL using these systems.
   Important

   Native package installations can take care of the download and
   depdendencies required to run MySQL, but the MySQL version will
   often be some way behind the currently available release. You will
   also normally be unable to install developmental releases, as
   these are not usually made available in the native repository.

   Distribution specific instructions are shown below:

     * RedHat Linux, Fedora, CentOS
       For RedHat and similar distributions, the MySQL distribution
       is divided into a number of separate packages, mysql for the
       client tools, mysql-server for the server and associated
       tools, and mysql-libs for the libraries. The libraries are
       required if you want to provide connectivity from different
       languages and environments such as Perl, Python and others.
       To install, use the yum command to specify the packages that
       you want to install. For example:
root-shell> install mysql mysql-server mysql-libs mysql-server
Loaded plugins: presto, refresh-packagekit
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mysql.x86_64 0:5.1.48-2.fc13 set to be updated
---> Package mysql-libs.x86_64 0:5.1.48-2.fc13 set to be updated
---> Package mysql-server.x86_64 0:5.1.48-2.fc13 set to be updated
--> Processing Dependency: perl-DBD-MySQL for package: mysql-server-5
.1.48-2.fc13.x86_64
--> Running transaction check
---> Package perl-DBD-MySQL.x86_64 0:4.017-1.fc13 set to be updated
--> Finished Dependency Resolution

Dependencies Resolved

=====================================================================
===========
 Package               Arch          Version               Repository
      Size
=====================================================================
===========
Installing:
 mysql                 x86_64        5.1.48-2.fc13         updates
     889 k
 mysql-libs            x86_64        5.1.48-2.fc13         updates
     1.2 M
 mysql-server          x86_64        5.1.48-2.fc13         updates
     8.1 M
Installing for dependencies:
 perl-DBD-MySQL        x86_64        4.017-1.fc13          updates
     136 k

Transaction Summary
=====================================================================
===========
Install       4 Package(s)
Upgrade       0 Package(s)

Total download size: 10 M
Installed size: 30 M
Is this ok [y/N]: y
Downloading Packages:
Setting up and reading Presto delta metadata
Processing delta metadata
Package(s) data still to download: 10 M
(1/4): mysql-5.1.48-2.fc13.x86_64.rpm                    | 889 kB
 00:04
(2/4): mysql-libs-5.1.48-2.fc13.x86_64.rpm               | 1.2 MB
 00:06
(3/4): mysql-server-5.1.48-2.fc13.x86_64.rpm             | 8.1 MB
 00:40
(4/4): perl-DBD-MySQL-4.017-1.fc13.x86_64.rpm            | 136 kB
 00:00
---------------------------------------------------------------------
-----------
Total                                           201 kB/s |  10 MB
 00:52
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing     : mysql-libs-5.1.48-2.fc13.x86_64
       1/4
  Installing     : mysql-5.1.48-2.fc13.x86_64
       2/4
  Installing     : perl-DBD-MySQL-4.017-1.fc13.x86_64
       3/4
  Installing     : mysql-server-5.1.48-2.fc13.x86_64
       4/4

Installed:
  mysql.x86_64 0:5.1.48-2.fc13            mysql-libs.x86_64 0:5.1.48-
2.fc13
  mysql-server.x86_64 0:5.1.48-2.fc13

Dependency Installed:
  perl-DBD-MySQL.x86_64 0:4.017-1.fc13


Complete!
       MySQL and the MySQL server should now be installed. A sample
       configuration file is installed into /etc/my.cnf. An init
       script, to start and stop the server, will have been installed
       into /etc/init.d/mysqld. To start the MySQL server use
       service:
root-shell> service mysqld start
       To enable the server to be started and stopped automatically
       during boot, use chkconfig:
root-shell> chkconfig --levels 235 mysqld on
       Which enables the MySQL server to be started (and stopped)
       automatically at the specified the run levels.
       The database tables will have been automatically created for
       you, if they do not already exist. You should, however, run
       mysql_secure_installation to set the root passwords on your
       server.

     * Debian, Ubuntu, Kubuntu
       On Debian and related distributions, there are two packages,
       mysql-client and mysql-server, for the client and server
       components respectively. You should specify an explicit
       version, for example mysql-client-5.1, to ensure that you
       install the version of MySQL that you want.
       To download and install, including any dependencies, use the
       apt-get command, specifying the pacakges that you want to
       install.
       Note
       Before installing, make sure that you update your apt-get
       index files to ensure you are downloading the latest available
       version.
       A sample installation of the MySQL packages might look like
       this (some sections trimmed for clarity):
root-shell> apt-get install mysql-client-5.1 mysql-server-5.1
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages were automatically installed and are no longer
 required:
  linux-headers-2.6.28-11 linux-headers-2.6.28-11-generic
Use 'apt-get autoremove' to remove them.
The following extra packages will be installed:
  bsd-mailx libdbd-mysql-perl libdbi-perl libhtml-template-perl
  libmysqlclient15off libmysqlclient16 libnet-daemon-perl libplrpc-pe
rl mailx
  mysql-common postfix
Suggested packages:
  dbishell libipc-sharedcache-perl tinyca procmail postfix-mysql post
fix-pgsql
  postfix-ldap postfix-pcre sasl2-bin resolvconf postfix-cdb
The following NEW packages will be installed
  bsd-mailx libdbd-mysql-perl libdbi-perl libhtml-template-perl
  libmysqlclient15off libmysqlclient16 libnet-daemon-perl libplrpc-pe
rl mailx
  mysql-client-5.1 mysql-common mysql-server-5.1 postfix
0 upgraded, 13 newly installed, 0 to remove and 182 not upgraded.
Need to get 1907kB/25.3MB of archives.
After this operation, 59.5MB of additional disk space will be used.
Do you want to continue [Y/n]? Y
Get: 1 http://gb.archive.ubuntu.com jaunty-updates/main mysql-common
5.1.30really5.0.75-0ubuntu10.5 [63.6kB]
Get: 2 http://gb.archive.ubuntu.com jaunty-updates/main libmysqlclien
t15off 5.1.30really5.0.75-0ubuntu10.5 [1843kB]
Fetched 1907kB in 9s (205kB/s)

Preconfiguring packages ...
Selecting previously deselected package mysql-common.
(Reading database ... 121260 files and directories currently installe
d.)
...
Processing 1 added doc-base file(s)...
Registering documents with scrollkeeper...
Setting up libnet-daemon-perl (0.43-1) ...
Setting up libplrpc-perl (0.2020-1) ...
Setting up libdbi-perl (1.607-1) ...
Setting up libmysqlclient15off (5.1.30really5.0.75-0ubuntu10.5) ...

Setting up libdbd-mysql-perl (4.008-1) ...
Setting up libmysqlclient16 (5.1.31-1ubuntu2) ...

Setting up mysql-client-5.1 (5.1.31-1ubuntu2) ...

Setting up mysql-server-5.1 (5.1.31-1ubuntu2) ...

 * Stopping MySQL database server mysqld
   ...done.
100825 11:46:15  InnoDB: Started; log sequence number 0 46409
100825 11:46:15  InnoDB: Starting shutdown...
100825 11:46:17  InnoDB: Shutdown completed; log sequence number 0 46
409
100825 11:46:17 [Warning] Forcing shutdown of 1 plugins

 * Starting MySQL database server mysqld
   ...done.

 * Checking for corrupt, not cleanly closed and upgrade needing table
s.
...
Processing triggers for libc6 ...
ldconfig deferred processing now taking place
       Note
       The apt-get command will install a number of packages,
       including the MySQL server, in order to provide the typical
       tools and application environment. This can mean that you
       install a large number of packages in addition to the main
       MySQL package.
       During installation, the initial database will be created, and
       you will be prompted for the MySQL root password (and
       confirmation). A configuration file will have been created in
       /etc/mysql/my.cnf. An init script will have been created in
       /etc/init.d/mysql.
       The server will already be started. You can manually start and
       stop the server using:
root-shell> service mysql [start|stop]
       The service will automatically be added to the 2, 3 and 4 run
       levels, with stop scripts in the single, shutdown and restart
       levels.

     * Gentoo Linux
       As a source-based distribution, installing MySQL on Gentoo
       involves downloading the source, patching the Gentoo
       specifics, and then compiling the MySQL server and installing
       it. This process is handled automatically by the emerge
       command. Depending on the version of MySQL that you want to
       install, you may need to unmask the specific version that you
       want for your chosen platform.
       The MySQL server and client tools are provided within a single
       package, dev-db/mysql. You can obtain a list of the versions
       available to install by looking at the portage directory for
       the package:
root-shell> ls /usr/portage/dev-db/mysql/mysql-5.1*
mysql-5.1.39-r1.ebuild
mysql-5.1.44-r1.ebuild
mysql-5.1.44-r2.ebuild
mysql-5.1.44-r3.ebuild
mysql-5.1.44.ebuild
mysql-5.1.45-r1.ebuild
mysql-5.1.45.ebuild
mysql-5.1.46.ebuild
       To install a specific MySQL version, you must specify the
       entire atom. For example:
root-shell> emerge =dev-db/mysql-5.1.46
       A simpler alternative is to use the virtual/mysql-5.1 package,
       which will install the latest version:
root-shell> emerge =virtual/mysql-5.1
       If the package is masked (because it is not tested or
       certified for the current platform), use the ACCEPT_KEYWORDS
       environment variable. For example:
root-shell> ACCEPT_KEYWORDS="~x86" emerge =virtual/mysql-5.1
       After installation, you should create a new database using
       mysql_install_db, and set the password for the root user on
       MySQL. You can use the configuration interface to set the
       password and create the initial database:
root-shell> emerge --config =dev-db/mysql-5.1.46
       A sample configuration file will have been created for you in
       /etc/mysql/my.cnf, and an init script will have been created
       in /etc/init.d/mysql.
       To enable MySQL to start automatically at the normal (default)
       run levels, you can use:
root-shell> rc-update add default mysql

2.6. Installing MySQL on Solaris and OpenSolaris

   MySQL on Solaris and OpenSolaris is available in a number of
   different formats.

     * For information on installing using the native Solaris PKG
       format, see Section 2.6.1, "Installing MySQL on Solaris using
       a Solaris PKG."

     * On OpenSolaris, the standard package repositories include
       MySQL packages specially built for OpenSolaris that include
       entries for the Service Management Framework (SMF) to enable
       control of the installation using the SMF administration
       commands. For more information, see Section 2.6.2, "Installing
       MySQL on OpenSolaris using IPS."

     * To use a standard tar binary installation, use the notes
       provided in Section 2.2, "Installing MySQL from Generic
       Binaries on Unix/Linux." Check the notes and hints at the end
       of this section for Solaris specific notes that you may need
       before or after installation.

   To obtain a binary MySQL distribution for Solaris in tarball or
   PKG format, http://dev.mysql.com/downloads/mysql/5.5.html.

   Additional notes to be aware of when installing and using MySQL on
   Solaris:

     * If you want to use MySQL with the mysql user and group, use
       the groupadd and useradd commands:
groupadd mysql
useradd -g mysql mysql

     * If you install MySQL using a binary tarball distribution on
       Solaris, you may run into trouble even before you get the
       MySQL distribution unpacked, as the Solaris tar cannot handle
       long file names. This means that you may see errors when you
       try to unpack MySQL.
       If this occurs, you must use GNU tar (gtar) to unpack the
       distribution. In Solaris 10 and OpenSolaris gtar is normally
       located in /usr/sfw/bin/gtar, but may not be included in the
       default path definition.

     * When using Solaris 10 for x86_64, you should mount any file
       systems on which you intend to store InnoDB files with the
       forcedirectio option. (By default mounting is done without
       this option.) Failing to do so will cause a significant drop
       in performance when using the InnoDB storage engine on this
       platform.

     * If you would like MySQL to start automatically, you can copy
       support-files/mysql.server to /etc/init.d and create a
       symbolic link to it named /etc/rc3.d/S99mysql.server.

     * If too many processes try to connect very rapidly to mysqld,
       you should see this error in the MySQL log:
Error in accept: Protocol error
       You might try starting the server with the --back_log=50
       option as a workaround for this.

     * To configure the generation of core files on Solaris you
       should use the coreadm command. Because of the security
       implications of generating a core on a setuid() application,
       by default, Solaris does not support core files on setuid()
       programs. However, you can modify this behavior using coreadm.
       If you enable setuid() core files for the current user, they
       will be generated using the mode 600 and owned by the
       superuser.

2.6.1. Installing MySQL on Solaris using a Solaris PKG

   You can install MySQL on Solaris and OpenSolaris using a binary
   package using the native Solaris PKG format instead of the binary
   tarball distribution.

   To use this package, download the corresponding
   mysql-VERSION-solaris10-PLATFORM.pkg.gz file, then decompress it.
   For example:
shell> gunzip mysql-5.5.9-solaris10-x86_64.pkg.gz

   To install a new package, use pkgadd and follow the onscreen
   prompts. You must have root privileges to perform this operation:
shell> pkgadd -d mysql-5.5.9-solaris10-x86_64.pkg

The following packages are available:
  1  mysql     MySQL Community Server (GPL)
               (i86pc) 5.5.9

Select package(s) you wish to process (or 'all' to process
all packages). (default: all) [?,??,q]:

   The PKG installer installs all of the files and tools needed, and
   then initializes your database if one does not exist. To complete
   the installation, you should set the root password for MySQL as
   provided in the instructions at the end of the installation.
   Alternatively, you can run the mysql_secure_installation script
   that comes with the installation.

   The default installation directory is /opt/mysql. You can only
   change the root path of the installation when using pkgadd, which
   can be used to install MySQL in a different Solaris zone. If you
   need to install in a specific directory, use the binary tar file.

   The pkg installer copies a suitable startup script for MySQL into
   /etc/init.d/mysql. To enable MySQL to startup and shutdown
   automatically, you should create a link between this file and the
   init script directories. For example, to ensure safe startup and
   shutdown of MySQL you could use the following commands to add the
   right links:
shell> ln /etc/init.d/mysql /etc/rc3.d/S91mysql
shell> ln /etc/init.d/mysql /etc/rc0.d/K02mysql

   To remove MySQL, the installed package name is mysql. You can use
   this in combination with the pkgrm command to remove the
   installation.

   To upgrade when using the Solaris package file format, you must
   remove the existing installation before installing the updated
   package. Removal of the package does not delete the existing
   database information, only the server, binaries and support files.
   The typical upgrade sequence is therefore:
shell> mysqladmin shutdown
shell> pkgrm mysql
shell> pkgadd -d mysql-5.5.9-solaris10-x86_64.pkg
shell> mysql_upgrade
shell> mysqld_safe &

   You should check the notes in Section 2.13, "Upgrading or
   Downgrading MySQL" before performing any upgrade.

2.6.2. Installing MySQL on OpenSolaris using IPS

   OpenSolaris includes standard packages for MySQL in the core
   repository. The MySQL packages are based on a specific release of
   MySQL and updated periodically. For the latest release you must
   use either the native Solaris PKG, tar, or source installations.
   The native OpenSolaris packages include SMF files so that you can
   easily control your MySQL installation, including automatic
   startup and recovery, using the native service management tools.

   To install MySQL on OpenSolaris, use the pkg command. You will
   need to be logged in as root, or use the pfexec tool, as shown in
   the example below:
shell> pfexec pkg install SUNWmysql55

   The package set installs three individual packages,
   SUNWmysql55lib, which contains the MySQL client libraries;
   SUNWmysql55r which contains the root components, including SMF and
   configuration files; and SUNWmysql55u which contains the scripts,
   binary tools and other files. You can install these packages
   individually if you only need the corresponding components.

   The MySQL files are installed into /usr/mysql which symbolic links
   for the sub directories (bin, lib, etc.) to a version specific
   directory. For MySQL 5.5, the full installation is located in
   /usr/mysql/5.5. The default data directory is /var/mysql/5.5/data.
   The configuration file is installed in /etc/mysql/5.5/my.cnf. This
   layout permits multiple versions of MySQL to be installed, without
   overwriting the data and binaries from other versions.

   Once installed, you must run mysql_install_db to initalize the
   database, and use the mysql_secure_installation to secure your
   installation.

Using SMF to manage your MySQL installation

   Once installed, you can start and stop your MySQL server using the
   installed SMF configuration. The service name is mysql, or if you
   have multiple versions installed, you should use the full version
   name, for example mysql:version_55. To start and enable MySQL to
   be started at boot time:
shell> svcadm enable mysql

   To disable MySQL from starting during boot time, and shut the
   MySQL server down if it is running, use:
shell> svcadm disable mysql

   To restart MySQL, for example after a configuration file changes,
   use the restart option:
shell> svcadm restart mysql

   You can also use SMF to configure the data directory and enable
   full 64-bit mode. For example, to set the data directory used by
   MySQL:
shell> svccfg
svc:> select mysql:version_55
svc:/application/database/mysql:version_55> setprop mysql/data=/data0
/mysql


   By default, the 32-bit binaries are used. To enable the 64-bit
   server on 64-bit platforms, set the enable_64bit parameter. For
   example:
svc:/application/database/mysql:version_55> setprop mysql/enable_64bi
t=1

   You need to refresh the SMF after settings these options:
shell> svcadm refresh mysql

2.7. Installing MySQL on IBM AIX

   MySQL for IBM AIX is available as a binary tarball distribution
   provided at http://dev.mysql.com/downloads/. Please read the
   general notes on AIX installation before continuing. For more
   information on binary installations, see Section 2.2, "Installing
   MySQL from Generic Binaries on Unix/Linux."

2.7.1. General Notes on Installing MySQL on AIX

   General notes on using MySQL on IBM AIX:

     * If you have problems with threads on AIX 5.3, you should
       upgrade AIX 5.3 to technology level 7 (5300-07).

2.8. Installing MySQL on HP-UX

   MySQL for HP-UX is available in a number of different forms:

     * Using a DEPOT distribution provided at
       http://dev.mysql.com/downloads/. Please read the general notes
       on HP-UX installation before continuing. For more information
       on DEPOT installations, see Section 2.8.2, "Installing MySQL
       on HP-UX using DEPOT."

     * Using a binary tarball distribution provided at
       http://dev.mysql.com/downloads/. Please read the general notes
       on HP-UX installation before continuing. For more information
       on binary installations, see Section 2.2, "Installing MySQL
       from Generic Binaries on Unix/Linux."

2.8.1. General Notes on Installing MySQL on HP-UX

   Some additional notes on installing and using MySQL on HP-UX:

     * If you install MySQL using a binary tarball distribution on
       HP-UX, you may run into trouble even before you get the MySQL
       distribution unpacked, as the HP-UX tar cannot handle long
       file names. This means that you may see errors when you try to
       unpack MySQL.
       If this occurs, you must use GNU tar (gtar) to unpack the
       distribution.

     * Because of some critical bugs in the standard HP-UX libraries,
       you should install the following patches before trying to run
       MySQL on HP-UX 11.0:
PHKL_22840 Streams cumulative
PHNE_22397 ARPA cumulative
       This solves the problem of getting EWOULDBLOCK from recv() and
       EBADF from accept() in threaded applications.

2.8.2. Installing MySQL on HP-UX using DEPOT

   The HP-UX DEPOT format packages can be installed using the
   swinstall command. You should install the ncurses and zlib
   libraries before installing the MySQL DEPOT package. You can use
   the free software depothelper tool to install these packages and
   any dependencies for you automatically.

   To install using the MySQL DEPOT packages, follow this guide:

    1. Download the MySQL DEPOT package from
       http://dev.mysql.com/downloads/. You must decompress the
       package before installation:
root-shell> gunzip mysql-5.1.48-hpux11.31-ia64-64bit.depot.gz

    2. Install the DEPOT package using swinstall:
root-shell> swinstall -s mysql-5.1.49-hpux11.31-ia64-64bit.depot
       MySQL will be installed into a directory matching the depot
       package name, within /usr/local. For convenience, you may want
       to create a symbolic link to the installed directory, for
       example:
root-shell> ln -s mysql-5.1.49-hpux11.31-ia64-64bit mysql

    3. Your package is now installed. You should complete the
       configuration of MySQL by creating a user and group:
root-shell> /usr/sbin/groupadd mysql
root-shell> /usr/sbin/useradd -g mysql -d /var/lib/mysql/ -s /bin/fal
se mysql

    4. Create the standard database using the new user/group you have
       created, and set the permissions:
root-shell> cd /usr/local/
root-shell> scripts/mysql_install_db --user=mysql
root-shell> chown -R root .
root-shell> chown -R mysql data

    5. Finally, secure your new installation by setting the root
       passwords, and then start your MySQL server using the mysql
       user:
root-shell> mysql_secure_installation
root-shell> mysqld_safe --user=mysql &

2.9. Installing MySQL on FreeBSD

   This section provides information about installing MySQL on
   variants of FreeBSD Unix.

   You can install MySQL on FreeBSD by using the binary distribution
   provided by Oracle. For more information, see Section 2.2,
   "Installing MySQL from Generic Binaries on Unix/Linux."

   The easiest (and preferred) way to install MySQL is to use the
   mysql-server and mysql-client ports available at
   http://www.freebsd.org/. Using these ports gives you the following
   benefits:

     * A working MySQL with all optimizations enabled that are known
       to work on your version of FreeBSD.

     * Automatic configuration and build.

     * Startup scripts installed in /usr/local/etc/rc.d.

     * The ability to use pkg_info -L to see which files are
       installed.

     * The ability to use pkg_delete to remove MySQL if you no longer
       want it on your machine.

   The MySQL build process requires GNU make (gmake) to work. If GNU
   make is not available, you must install it first before compiling
   MySQL.

   To install using the ports system:
# cd /usr/ports/databases/mysql51-server
# make
...
# cd /usr/ports/databases/mysql51-client
# make
...

   The standard port installation places the server into
   /usr/local/libexec/mysqld, with the startup script for the MySQL
   server placed in /usr/local/etc/rc.d/mysql-server.

   Some additional notes on the BSD implementation:

     * To remove MySQL after installation using the ports system:
# cd /usr/ports/databases/mysql51-server
# make deinstall
...
# cd /usr/ports/databases/mysql51-client
# make deinstall
...

     * If you get problems with the current date in MySQL, setting
       the TZ variable should help. See Section 2.14, "Environment
       Variables."

2.10. Installing MySQL on i5/OS

   The i5/OS POWER MySQL package was created in cooperation with IBM.
   MySQL works within the Portable Application Solution Environment
   (PASE) on the System i series of hardware and will also provide
   database services for the Zend Core for i5/OS.

   MySQL for i5/OS is provided both as a tar file and as a save file
   (.savf) package that can be downloaded and installed directly
   without any additional installation steps required. To install
   MySQL using the tar file, see Section 2.2, "Installing MySQL from
   Generic Binaries on Unix/Linux."

   MySQL is only supported on i5/OS V5R4 or later releases. The i5/OS
   PASE must be installed for MySQL to operate. You must be able to
   login as a user in *SECOFR class.

   You should the installation notes and tips for i5/OS before
   starting installation. See i5/OS Installation Notes.

   Before Installation:
   Note

   The installation package will use an existing configuration if you
   have previously installed MySQL (which is identified by looking
   for the file /etc/my.cnf). The values for the data directory
   (DATADIR) and owner of the MySQL files (USRPRF) specified during
   the installation will be ignored, and the values determined from
   the /etc/my.cnf will be used instead.

   If you want to change these parameters during a new install, you
   should temporarily rename /etc/my.cnf, install MySQL using the new
   parameters you want to use, and then merge your previous
   /etc/my.cnf configuration settings with the new /etc/my.cnf file
   that is created during installation.

     * You must have a user profile with PASE with suitable
       privileges. The user should be within the *SECOFR class, such
       as the QSECOFR user ID. You can use the WRKUSRPRF command to
       check your user profile.

     * For network connections to MySQL, you must have TCP/IP
       enabled. You should also check the following:

          + Ensure that a name has defined for the system. Run the
            Configure TCP/IP (CFGTCP) command and select option 12
            (Change TCP/IP domain information) to display this
            setting. Make sure that a value is listed in the Host
            name field.

          + Make sure that the system has a loopback entry which
            represents the localhost or 127.0.0.1.

          + Ensure that the IP address of the IBM i machine is mapped
            correctly to the host name.

   To install MySQL on i5/OS, follow these steps:

    1. On the System i machine, create a save file that will be used
       to receive the downloaded installation save file. The file
       should be located within the General Purpose Library (QGPL):
CRTSAVF FILE(QGPL/MYSQLINST) TESXT('MySQL Save file')

    2. Download the MySQL installation save file in 32-bit
       (mysql-5.5.9-i5os-power-32bit.savf) or 64-bit
       (mysql-5.5.9-i5os-power-64bit.savf) from MySQL Downloads
       (http://dev.mysql.com/downloads).

    3. You need to FTP the downloaded .savf file directly into the
       QGPL/MYSQLINST file on the System i server. You can do this
       through FTP using the following steps after logging in to the
       System i machine:
ftp> bin
ftp> cd qgpl
ftp> put mysql-5.5.9-i5os-power.savf mysqlinst

    4. Log into the System i server using a user in the *SECOFR
       class, such as the QSECOFR user ID.

    5. You need to restore the installation library stored in the
       .savf save file:
RSTLIB MYSQLINST DEV(*SAVF) SAVF(QGPL/MYSQLINST) MBROPT(*ALL) ALWOBJD
IF(*ALL)
       Note
       You can ignore the security changes-type message at the bottom
       of the installation panel.

    6. Once you have finished restoring the MYSQLINST library, check
       that all the necessary objects for installation are on the
       system by using the Display Library (DSPLIB) command:
DSPLIB LIB(MYSQLINST)

    7. You need to execute the installation command,
       MYSQLINST/INSMYSQL. You can specify three parameter settings
       during installation:

          + DIR('/QOpenSys/usr/local/mysql') sets the installation
            location for the MySQL files. The directory will be
            created if it does not already exist.

          + DATADIR('/QOpenSys/usr/local/mysql/data') sets the
            location of the directory that will be used to store the
            database files and binary logs. The default setting is
            /QOpenSys/usr/local/mysql/data. Note that if the
            installer detects an existing installation (due to the
            existence of /etc/my.cnf), then the existing setting will
            be used instead of the default.

          + USRPRF(MYSQL) sets the user profile that will own the
            files that are installed. The profile will be created if
            it does not already exist.
            Note
            You should choose an appropriate user for using the MySQL
            server installation. The user will be used whenever you
            need to do any administration on the MySQL server.
       Once you have set the appropriate parameters, you can begin
       the installation.
       The installation copies all the necessary files into a
       directory matching the DIR configuration value; sets the
       ownership on those files, sets up the MySQL environment and
       creates the MySQL configuration file (in /etc/my.cnf)
       completing all the steps in a typical binary installation
       process automatically. If this is a new installation of MySQL,
       or if the installer detects that this is a new version
       (because the /etc/my.cnf file does not exist), then the
       initial core MySQL databases will also be created during
       installation.
       Once the installation has been completed, you will get a
       notice advising you to set the password for the root user. For
       more information, Section 2.12, "Postinstallation Setup and
       Testing."

    8. Once the installation has completed, you can delete the
       installation file:
DLTLIB LIB(MYSQLINST)

   Upgrading an existing MySQL instance

   You need to execute the upgrade command, MYSQLINST/UPGMYSQL.
   Note

   You cannot use MYSQLINST/UPGMYSQL to upgrade between major
   versions of MySQL (for example from 5.1 to 5.5). For information
   and advice on migrating between major versions you can use the
   advice provided in Section 2.13.1.2, "Upgrading from MySQL 5.4 to
   5.5."

   You must specify 6 parameters to perform an upgrade:

     * DIR('/QOpenSys/usr/local/'): Sets the installation location
       for the MySQL files. The directory will be created if it does
       not already exist. This is the directory that the MySQL server
       will be installed into, inside a directory with a name
       matching the version and release. For example, if installing
       MySQL 5.5.9 with the DIR set to /QOpenSys/usr/local/ would
       result in /QOpenSys/usr/local/mysql-5.5.9-i5os-power64 and a
       symbolic link to this directory will be created in
       /QOpenSys/usr/local/mysql.

     * DATADIR('/QOpenSys/mysql/data'): Sets the location of the
       directory that will be upgraded.

     * USRPRF('MYSQL'): Sets the user profile that will own the files
       that are installed. The profile will be created if it does not
       already exist; if it is created as part of the upgrade
       process, it will be disabled initially. You may wish to enable
       this user profile so that it can be used to start the MySQL
       server later. It is best practice to use the one previously
       created during the first installation.

     * MYSQLUSR('root user'): Any user account in the current MySQL
       server with SUPER privileges.

     * PASSWORD('root user password'): The password for the above
       account. This is necessary as the upgrade starts the MySQL
       server to upgrade the tables and the password is need to be
       able to shutdown the MySQL server.

     * CURINST('path to previous install'): The full path to the
       installation that is being upgraded. For example an
       installation in /QOpenSys/usr/local/ will be
       /QOpenSys/usr/local/msyql-5.5.9-i5os-power64. Failure to
       specify this option may result in corruption of your existing
       data files.

   For example:
MYSQLINST/UPGMYSQL DIR('/QOpenSys/usr/local/') DATADIR('/QOpenSys/mys
ql/data') »
     USERPRF(MYSQL) MYSQLUSR('root') PASSWORD('root') CURINST('/QOpen
Sys/usr/local/mysql-5.5.9-i5os-power64')

   You should receive a Program Message indicating UPGRADE
   SUCCESSFUL! upon completion or an error message if there is a
   problem.You can view the upgrade programs progression and the
   error in the text file upgrade.log in the installation directory.

   To start MySQL:

    1. Log into the System i server using the user profile create or
       specified during installation. By default, this is MYSQL.
       Note
       You should start mysqld_safe using a user that in the PASE
       environment has the id=0 (the equivalent of the standard Unix
       root user). If you do not use a user with this ID then the
       system will be unable to change the user when executing mysqld
       as set using --user option. If this happens, mysqld may be
       unable to read the files located within the MySQL data
       directory and the execution will fail.

    2. Enter the PASE environment using call qp2term.

    3. Start the MySQL server by changing to the installation
       directory and running mysqld_safe, specifying the user name
       used to install the server. The installer conveniently
       installs a symbolic link to the installation directory
       (mysql-5.0.42-i5os-power-32bit) as /opt/mysql/mysql:
> cd /opt/mysql/mysql
> bin/mysqld_safe --user=mysql &
       You should see a message similar to the following:
Starting mysqld daemon with databases »
     from /opt/mysql/mysql-enterprise-5.0.42-i5os-power-32bit/data

   If you are having problems starting MySQL server, see Section
   2.12.1.3, "Starting and Troubleshooting the MySQL Server."

   To stop MySQL:

    1. Log into the System i server using the user profile create or
       specified during installation. By default, this is MYSQL.

    2. Enter the PASE environment using call qp2term.

    3. Stop the MySQL server by changing into the installation
       directory and running mysqladmin, specifying the user name
       used to install the server:
> cd /opt/mysql/mysql
> bin/mysqladmin -u root shutdown
       If the session that you started and stopped MySQL are the
       same, you may get the log output from mysqld:
   STOPPING server from pid file »
     /opt/mysql/mysql-enterprise-5.0.42-i5os-power-32bit/data/I5DBX.R
CHLAND.IBM.COM.pid
   070718 10:34:20  mysqld ended
       If the sessions used to start and stop MySQL are different,
       you will not receive any confirmation of the shutdown.

   Note and tips

     * A problem has been identified with the installation process on
       DBCS systems. If you are having problems install MySQL on a
       DBCS system, you need to change your job's coded character set
       identifier (CSSID) to 37 (EBCDIC) before executing the install
       command, INSMYSQL. To do this, determine your existing CSSID
       (using DSPJOB and selecting option 2), execute CHGJOB
       CSSID(37), run INSMYSQL to install MySQL and then execute
       CHGJOB again with your original CSSID.

     * If you want to use the Perl scripts that are included with
       MySQL, you need to download the iSeries Tools for Developers
       (5799-PTL). See
       http://www-03.ibm.com/servers/enable/site/porting/tools/.

2.11. Installing MySQL from Source

   Building MySQL from the source code enables you to customize build
   parameters, compiler optimizations, and installation location. For
   a list of systems on which MySQL is known to run, see Section
   2.1.1, "Operating Systems Supported by MySQL Community Server."

   Before you proceed with an installation from source, check whether
   we produce a precompiled binary distribution for your platform and
   whether it works for you. We put a great deal of effort into
   ensuring that our binaries are built with the best possible
   options for optimal performance. Instructions for installing
   binary distributions are available in Section 2.2, "Installing
   MySQL from Generic Binaries on Unix/Linux."
   Note

   This section describes how to build MySQL from source using CMake.
   Before MySQL 5.5, source builds used the GNU autotools on
   Unix-like systems. Source builds on Windows used CMake, but the
   process was different from that described here. For
   source-building instructions for older versions of MySQL, see
   Installing MySQL from Source
   (http://dev.mysql.com/doc/refman/5.1/en/source-installation.html),
   in the MySQL 5.1 Reference Manual.

Source Installation Methods

   Installation of MySQL from source can be done using two different
   methods:

     * Use a standard MySQL source distribution. Standard
       distributions are available as compressed tar files, Zip
       archives, or RPM packages. Distribution files have names of
       the form mysql-VERSION.tar.gz, mysql-VERSION.zip, or
       mysql-VERSION.rpm, where VERSION is a number like 5.5.9.
       File names for source distributions can be distinguished from
       those for precompiled binary distributions in that source
       distribution names are generic and include no platform name,
       whereas binary distribution names include a platform name
       indicating the type of system for which the distribution is
       intended (for example, pc-linux-i686 or winx64).
       To obtain a standard source distribution, see Section 2.1.3,
       "How to Get MySQL." For instructions on building from a
       standard distribution, see Section 2.11.2, "Installing MySQL
       from a Standard Source Distribution."

     * Use a MySQL development tree. Development trees have not
       necessarily received the same level of testing as standard
       release distributions, so this installation method is usually
       necessary only if you need the most recent code changes. For
       information on building from one of the development trees, see
       Section 2.11.3, "Installing MySQL from a Development Source
       Tree."

Source Installation System Requirements

   Installation of MySQL from source requires several development
   tools. Some of these tools are required no matter whether you use
   a standard source distribution or a development source tree. Other
   tools requirements depend on which installation method you use.

   To install MySQL from source, your system must have the following
   tools, regardless of installation method:

     * CMake, which can be downloaded from http://www.cmake.org.

     * A good make program. Although some platforms come with their
       own make implementations, it is highly recommended that you
       use GNU make 3.75 or newer. It may already be available on
       your system as gmake. GNU make is available from
       http://www.gnu.org/software/make/.

     * A working ANSI C++ compiler. GCC 3.2 or later, Sun Studio 10
       or later, Visual Studio 2008 or later, and many current
       vendor-supplied compilers are known to work.

     * Perl is needed if you intend to run test scripts. Most
       Unix-like systems include Perl. On Windows, you can use a
       version such as ActiveState Perl.

   To install MySQL from a standard source distribution, one of the
   following tools is required to unpack the distribution file:

     * For a .tar.gz compressed tar file: GNU gunzip to uncompress
       the distribution and a reasonable tar to unpack it. If your
       tar program supports the z option, it can both uncompress and
       unpack the file.
       GNU tar is known to work. The standard tar provided with some
       operating systems is not able to unpack the long file names in
       the MySQL distribution. You should download and install GNU
       tar, or if available, use a preinstalled version of GNU tar.
       Usually this is available as gnutar, gtar, or as tar within a
       GNU or Free Software directory, such as /usr/sfw/bin or
       /usr/local/bin. GNU tar is available from
       http://www.gnu.org/software/tar/.

     * For a .zip Zip archive: WinZip or another tool that can read
       .zip files.

     * For an .rpm RPM package: The rpmbuild program used to build
       the distribution unpacks it.

   To install MySQL from a development source tree, the following
   additional tools are required:

     * To obtain the source tree, you must have Bazaar installed. The
       Bazaar VCS Web site (http://bazaar-vcs.org) has instructions
       for downloading and installing Bazaar on different platforms.
       Bazaar is supported on any platform that supports Python, and
       is therefore compatible with any Linux, Unix, Windows, or Mac
       OS X host.

     * bison is needed to generate sql_yacc.cc from sql_yacc.yy You
       should use the latest version of bison where possible.
       Versions 1.75 and version 2.1 are known to work. There have
       been reported problems with bison 1.875. If you experience
       problems, upgrade to a later, rather than earlier, version.
       bison is available from http://www.gnu.org/software/bison/.
       bison for Windows can be downloaded from
       http://gnuwin32.sourceforge.net/packages/bison.htm. Download
       the package labeled "Complete package, excluding sources". On
       Windows, the default location for bison is the C:\Program
       Files\GnuWin32 directory. Some utilities may fail to find
       bison because of the space in the directory name. Also, Visual
       Studio may simply hang if there are spaces in the path. You
       can resolve these problems by installing into a directory that
       does not contain a space; for example C:\GnuWin32.

     * On OpenSolaris and Solaris Express, m4 must be installed in
       addition to bison. m4 is available from
       http://www.gnu.org/software/m4/.

   Note

   If you have to install any programs, modify your PATH environment
   variable to include any directories in which the programs are
   located. See Section 4.2.4, "Setting Environment Variables."

   If you run into problems and need to file a bug report, please use
   the instructions in Section 1.7, "How to Report Bugs or Problems."

2.11.1. MySQL Layout for Source Installation

   By default, when you install MySQL after compiling it from source,
   the installation step installs files under /usr/local. The
   component locations under the installation directory are the same
   as for binary distributions. See Section 2.2, "MySQL Installation
   Layout for Generic Unix/Linux Binary Package," and Section 2.3.1,
   "MySQL Installation Layout on Microsoft Windows." To configure
   installation locations different from the defaults, use the
   options described at Section 2.11.4, "MySQL Source-Configuration
   Options."

2.11.2. Installing MySQL from a Standard Source Distribution

   To install MySQL from a standard source distribution:

    1. Verify that your system satisfies the tool requirements listed
       at Section 2.11, "Installing MySQL from Source."

    2. Obtain a distribution file using the instructions in Section
       2.1.3, "How to Get MySQL."

    3. Configure, build, and install the distribution using the
       instructions in this section.

    4. Follow the same postinstallation setup sequence as for a
       binary installation. This sequence is described in Section
       2.2, "Installing MySQL from Generic Binaries on Unix/Linux."

   In MySQL 5.5, CMake is used as the build framework on all
   platforms. For instructions beyond those given here on using CMake
   to build MySQL, see http://forge.mysql.com/wiki/CMake.

   If you start from a source RPM, use the following command to make
   a binary RPM that you can install. If you do not have rpmbuild,
   use rpm instead.
shell> rpmbuild --rebuild --clean MySQL-VERSION.src.rpm

   The result is one or more binary RPM packages that you install as
   indicated in Section 2.5.1, "Installing MySQL from RPM Packages on
   Linux."

   The sequence for installation from a compressed tar file or Zip
   archive source distribution is similar to the process for
   installing from a generic binary distribution that is detailed in
   Section 2.2, "Installing MySQL from Generic Binaries on
   Unix/Linux," except that it includes steps to configure and
   compile the distribution. For example, with a compressed tar file
   source distribution on Unix, the basic installation command
   sequence looks like this:
# Preconfiguration setup
shell> groupadd mysql
shell> useradd -g mysql mysql
# Beginning of source-build specific instructions
shell> tar zxvf mysql-VERSION.tar.gz
shell> cd mysql-VERSION
shell> cmake .
shell> make
shell> make install
# End of source-build specific instructions
# Postinstallation setup
shell> cd /usr/local/mysql
shell> chown -R mysql .
shell> chgrp -R mysql .
shell> scripts/mysql_install_db --user=mysql
shell> chown -R root .
shell> chown -R mysql var
shell> cp support-files/my-medium.cnf /etc/my.cnf #optional
shell> bin/mysqld_safe --user=mysql &
shell> cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mys
ql.server # Optional

   A more detailed version of the source-build specific instructions
   is shown following. On Unix, perform the following steps as the
   mysql user, except as noted.
   Note

   The procedure shown here does not set up any passwords for MySQL
   accounts. After following the procedure, proceed to Section 2.12,
   "Postinstallation Setup and Testing," for postinstallation setup
   and testing.

Perform Preconfiguration Setup

   On Unix, set up the mysql user and group that will be used to run
   and execute the MySQL server and own the database directory. For
   details, see Creating a mysql System User and Group, in Section
   2.2, "Installing MySQL from Generic Binaries on Unix/Linux."

Obtain and Unpack the Distribution

   Pick the directory under which you want to unpack the distribution
   and change location into it.

   Obtain a distribution file using the instructions in Section
   2.1.3, "How to Get MySQL."

   Unpack the distribution into the current directory.

     * To unpack a compressed tar file, tar can uncompress and unpack
       the distribution if it has z option support:
shell> tar zxvf mysql-VERSION.tar.gz
       If your tar does not have z option support, use gunzip to
       unpack the distribution and tar to unpack it:
shell> gunzip < mysql-VERSION.tar.gz | tar xvf -
       Alternatively, CMake can uncompress and unpack the
       distribution:
shell> cmake -E tar zxvf mysql-VERSION.tar.gz

     * To unpack a Zip archive, use WinZip or another tool that can
       read .zip files.

   Unpacking the distribution file creates a directory named
   mysql-VERSION.

Configure the Distribution

   Change location into the top-level directory of the unpacked
   distribution:
shell> cd mysql-VERSION

   Configure the source directory. The minimum configuration command
   includes no options to override configuration defaults:
shell> cmake .

   On Windows, specify the development environment. For example, the
   following commands configure MySQL for 32-bit and 64-bit builds,
   respectively:
shell> cmake . -G "Visual Studio 9 2008"
shell> cmake . -G "Visual Studio 9 2008 Win64"

   When you run cmake, you might want to add options to the command
   line. Here are some examples:

     * -DBUILD_CONFIG=mysql_release: Configure the source with the
       same build options used by Oracle to produce binary
       distributions for official MySQL releases.

     * -DCMAKE_INSTALL_PREFIX=dir_name: Configure the distribution
       for installation under a particular location.

     * -DCPACK_MONOLITHIC_INSTALL=1: Cause make package to generate a
       single installation file rather than multiple files.

     * -DWITH_DEBUG=1: Build the distribution with debugging support.

   For a more extensive list of options, see Section 2.11.4, "MySQL
   Source-Configuration Options."

   If CMake fails, you may need to reconfigure by running it again
   with different options. If you do reconfigure, take note of the
   following:

     * If CMake is run after it has previously been run, it may use
       information that was gathered during its previous invocation.
       This information is stored in CMakeCache.txt. When CMake
       starts up, it looks for that file and reads its contents if it
       exists, on the assumption that the information is still
       correct. That assumption is invalid when you reconfigure.

     * Each time you run CMake, you must run make again to recompile.
       However, you may want to remove old object files from previous
       builds first because they were compiled using different
       configuration options.

   To prevent old configuration information or object files from
   being used, run these commands before re-running CMake:
shell> rm CMakeCache.txt
shell> make clean

   If you are going to send mail to a MySQL mailing list to ask for
   configuration assistance, first check the files in the CMakeFiles
   directory for useful information about the failure. To file a bug
   report, please use the instructions in Section 1.7, "How to Report
   Bugs or Problems."

Build the Distribution

   On Unix:
shell> make

   Use gmake instead on systems where you are using GNU make and it
   has been installed as gmake.

   On Windows:
shell> devenv MySQL.sln /build RelWithDebInfo

   If you have gotten to the compilation stage, but the distribution
   does not build, see Section 2.11.5, "Dealing with Problems
   Compiling MySQL," for help. If that does not solve the problem,
   please enter it into our bugs database using the instructions
   given in Section 1.7, "How to Report Bugs or Problems." If you
   have installed the latest versions of the required tools, and they
   crash trying to process our configuration files, please report
   that also. However, if you get a command not found error or a
   similar problem for required tools, do not report it. Instead,
   make sure that all the required tools are installed and that your
   PATH variable is set correctly so that your shell can find them.

Install the Distribution

   On Unix:
shell> make install

   This installs the files under the configured installation
   directory (by default, /usr/local/mysql). You might need to run
   the command as root.

   Alternatively, generate installation package files that you can
   install where you like:
shell> make package

   This operation produces one or more .tar.gz files that can be
   installed like generic binary distribution packages. See Section
   2.2, "Installing MySQL from Generic Binaries on Unix/Linux." If
   CMake was run with -DCPACK_MONOLITHIC_INSTALL=1, the operation
   produces a single file. Otherwise, it produces multiple files.

   On Windows, generate the data directory, then create a .zip
   archive installation package:
shell> devenv MySQL.sln /build RelWithDebInfo /project initial_databa
se
shell> devenv MySQL.sln /build RelWithDebInfo /project package

   You can install the resulting .zip archive where you like. See
   Section 2.3.5, "Installing MySQL from a Noinstall Zip Archive."

Perform Postinstallation Setup

   The remainder of the installation process involves setting up the
   configuration file, creating the core databases, starting the
   MySQL server, and assigning passwords to the initial MySQL
   accounts. For instructions, see Section 2.12, "Postinstallation
   Setup and Testing."
   Note

   The accounts that are listed in the MySQL grant tables initially
   have no passwords. After starting the server, you should set up
   passwords for them using the instructions in Section 2.12,
   "Postinstallation Setup and Testing."

2.11.3. Installing MySQL from a Development Source Tree

   This section discusses how to install MySQL from the latest
   development source code. Development trees have not necessarily
   received the same level of testing as standard release
   distributions, so this installation method is usually necessary
   only if you need the most recent code changes. If your goal is
   simply to get MySQL up and running on your system, you should use
   a standard release distribution (either a binary or source
   distribution). See Section 2.1.3, "How to Get MySQL."

   MySQL development projects are hosted on Launchpad
   (http://launchpad.net/). MySQL projects, including MySQL server,
   MySQL Workbench, and others are available from the Oracle/MySQL
   Engineering (http://launchpad.net/~mysql) page. For the
   repositories related only to MySQL Server, see the MySQL Server
   (http://launchpad.net/mysql-server) page.

   To install MySQL from a development source tree, your system must
   satisfy the tool requirements listed at Section 2.11, "Installing
   MySQL from Source," including the requirements for Bazaar and
   bison. For information about using Bazaar with MySQL, see
   http://forge.mysql.com/wiki/MySQL_Bazaar_Howto.

   To create a local branch of the MySQL development tree on your
   machine, use this procedure:

    1. To obtain a copy of the MySQL source code, you must create a
       new Bazaar branch. If you do not already have a Bazaar
       repository directory set up, you must initialize a new
       directory:
shell> mkdir mysql-server
shell> bzr init-repo --trees mysql-server
       This is a one-time operation.

    2. Assuming that you have an initialized repository directory,
       you can branch from the public MySQL server repositories to
       create a local source tree. To create a branch of a specific
       version:
shell> cd mysql-server
shell> bzr branch lp:mysql-server/5.5 mysql-5.5
       This is a one-time operation per source tree. You can branch
       the source trees for several versions of MySQL under the
       mysql-server directory.

    3. The initial download will take some time to complete,
       depending on the speed of your connection. Please be patient.
       Once you have downloaded the first tree, additional trees
       should take significantly less time to download.

    4. When building from the Bazaar branch, you may want to create a
       copy of your active branch so that you can make configuration
       and other changes without affecting the original branch
       contents. You can achieve this by branching from the original
       branch:
shell> bzr branch mysql-5.5 mysql-5.5-build

    5. To obtain changes made after you have set up the branch
       initially, update it using the pull option periodically. Use
       this command in the top-level directory of the local copy:
shell> bzr pull
       To examine the changeset comments for the tree, use the log
       option to bzr:
shell> bzr log
       You can also browse changesets, comments, and source code
       online at the Launchpad MySQL Server
       (http://launchpad.net/mysql-server) page.
       If you see diffs (changes) or code that you have a question
       about, do not hesitate to send email to the MySQL internals
       mailing list. See Section 1.6.1, "MySQL Mailing Lists." If you
       think you have a better idea on how to do something, send an
       email message to the list with a patch.

   After you have the local branch, you can build MySQL server from
   the source code. For information, see Section 2.11.2, "Installing
   MySQL from a Standard Source Distribution," except that you skip
   the part about obtaining and unpacking the distribution.

   Be careful about installing a build from a distribution source
   tree on a production machine. The installation command may
   overwrite your live release installation. If you already have
   MySQL installed and do not want to overwrite it, run CMake with
   values for the CMAKE_INSTALL_PREFIX, MYSQL_TCP_PORT, and
   MYSQL_UNIX_ADDR options different from those used for your
   production server. For additional information about preventing
   multiple servers from interfering with each other, see Section
   5.6, "Running Multiple MySQL Servers on the Same Machine."

   Play hard with your new installation. For example, try to make new
   features crash. Start by running make test. See Section 23.1.2,
   "MySQL Test Suite."

2.11.4. MySQL Source-Configuration Options

   The CMake program gives you a great deal of control over how you
   configure a MySQL source distribution. Typically, you do this
   using options on the CMake command line. For information about
   options supported by CMake, run either of these commands in the
   top-level source directory:
shell> cmake . -LH
shell> ccmake .

   You can also affect CMake using certain environment variables. See
   Section 2.14, "Environment Variables."

   The following table shows the available CMake options. In the
   Default column, PREFIX stands for the value of the
   CMAKE_INSTALL_PREFIX option, which specifies the installation base
   directory. This value is used as the parent location for several
   of the installation subdirectories.

   Table 2.14. MySQL Source-Configuration Option Reference (CMake)
   Formats Description Default Introduced Removed
   BUILD_CONFIG Use same build options as official releases 5.5.7
   CMAKE_BUILD_TYPE Type of build to produce RelWithDebInfo 5.5.7
   CMAKE_INSTALL_PREFIX Installation base directory /usr/local/mysql
   5.5.7
   CPACK_MONOLITHIC_INSTALL Whether package build produces single
   file OFF 5.5.7
   DEFAULT_CHARSET The default server character set latin1 5.5.7
   DEFAULT_COLLATION The default server collation latin1_swedish_ci
   5.5.7
   ENABLE_DEBUG_SYNC Whether to enable Debug Sync support ON 5.5.7
   ENABLE_DOWNLOADS Whether to download optional files 5.5.7
   ENABLE_DTRACE Whether to include DTrace support 5.5.7
   ENABLED_LOCAL_INFILE Whether to enable LOAD DATA LOCAL INFILE
   5.5.7
   ENABLED_PROFILING Whether to enable query profiling code 5.5.7
   INSTALL_BINDIR User executables directory PREFIX/bin 5.5.7
   INSTALL_DOCDIR Documentation directory PREFIX/docs 5.5.7
   INSTALL_DOCREADMEDIR README file directory PREFIX 5.5.7
   INSTALL_INCLUDEDIR Header file directory PREFIX/include 5.5.7
   INSTALL_INFODIR Info file directory PREFIX/docs 5.5.7
   INSTALL_LAYOUT Select predefined installation layout STANDALONE
   5.5.7
   INSTALL_LIBDIR Library file directory PREFIX/lib 5.5.7
   INSTALL_MANDIR Manual page directory PREFIX/man 5.5.7
   INSTALL_MYSQLSHAREDIR Shared data directory PREFIX/share 5.5.7
   INSTALL_MYSQLTESTDIR mysql-test directory PREFIX/mysql-test 5.5.7

   INSTALL_PLUGINDIR Plugin directory PREFIX/lib/plugin 5.5.7
   INSTALL_SBINDIR Server executable directory PREFIX/bin 5.5.7
   INSTALL_SCRIPTDIR Scripts directory PREFIX/scripts 5.5.7
   INSTALL_SHAREDIR aclocal/mysql.m4 installation directory
   PREFIX/share 5.5.7
   INSTALL_SQLBENCHDIR sql-bench directory PREFIX 5.5.7
   INSTALL_SUPPORTFILESDIR Extra support files directory
   PREFIX/support-files 5.5.7
   MYSQL_DATADIR Data directory 5.5.7
   MYSQL_MAINTAINER_MODE Whether to enable MySQL maintainer-specific
   development environment OFF 5.5.7
   MYSQL_TCP_PORT TCP/IP port number 3306 5.5.7
   MYSQL_UNIX_ADDR Unix socket file /tmp/mysql.sock 5.5.7
   SYSCONFDIR Option file directory 5.5.7
   WITH_COMMENT Comment about compilation environment 5.5.7
   WITH_DEBUG Whether to include debugging support 5.5.7
   WITH_EMBEDDED_SERVER Whether to build embedded server 5.5.7
   WITH_xxx_STORAGE_ENGINE Compile storage engine xxx statically into
   server 5.5.7
   WITH_EXTRA_CHARSETS Which extra character sets to include all
   5.5.7
   WITH_LIBWRAP Whether to include libwrap (tcp_wrappers) support OFF
   5.5.7
   WITH_READLINE Use bundled readline OFF 5.5.7
   WITH_SSL Type of SSL support no 5.5.7
   WITH_ZLIB Type of zlib support system 5.5.7
   WITHOUT_xxx_STORAGE_ENGINE Exclude storage engine xxx from build
   5.5.7

   The following descriptions provide more information about CMake
   options.

     * General Options

     * Installation Layout Options

     * Feature Options

     * Compiler Flags

   For boolean options, the value may be specified as 1 or ON to
   enable the option, or as 0 or OFF to disable the option.

General Options


     * -DBUILD_CONFIG=mysql_release
       This option configures a source distribution with the same
       build options used by Oracle to produce binary distributions
       for official MySQL releases.

     * -DCMAKE_BUILD_TYPE=type
       The type of build to produce:

          + RelWithDebInfo: Enable optimizations and generate
            debugging information. This is the default MySQL build
            type.

          + Debug: Disable optimizations and generate debugging
            information. This build type is also used if the
            WITH_DEBUG option is enabled. That is, -DWITH_DEBUG=1 has
            the same effect as -DCMAKE_BUILD_TYPE=Debug.

     * -DCPACK_MONOLITHIC_INSTALL=bool
       If enabled, the make package operation produces a single
       distribution file. If disabled, the operation produces
       multiple files.

Installation Layout Options

   The CMAKE_INSTALL_PREFIX option indicates the base installation
   directory. Other options with names of the form INSTALL_xxx that
   indicate component locations are interpreted relative to the
   prefix and their values are relative pathnames. Their values
   should not include the prefix.

     * -DCMAKE_INSTALL_PREFIX=dir_name
       The installation base directory.

     * -DINSTALL_BINDIR=dir_name
       Where to install user programs.

     * -DINSTALL_DOCDIR=dir_name
       Where to install documentation.

     * -DINSTALL_DOCREADMEDIR=dir_name
       Where to install README files.

     * -DINSTALL_INCLUDEDIR=dir_name
       Where to install header files.

     * -DINSTALL_INFODIR=dir_name
       Where to install Info files.

     * -DINSTALL_LAYOUT=name
       Select a predefined installation layout:

          + STANDALONE: Same layout as used for .tar.gz/.zip
            packages. This is the default.

          + RPM: Layout similar to RPM packages.

          + SVR4: Solaris package layout.

          + DEB: DEB package layout (experimental).

     * -DINSTALL_LIBDIR=dir_name
       Where to install library files.

     * -DINSTALL_MANDIR=dir_name
       Where to install manual pages.

     * -DINSTALL_MYSQLSHAREDIR=dir_name
       Where to install shared data files.

     * -DINSTALL_MYSQLTESTDIR=dir_name
       Where to install the mysql-test directory.

     * -DINSTALL_PLUGINDIR=dir_name
       The location of the plugin directory.

     * -DINSTALL_SBINDIR=dir_name
       Where to install the mysqld server.

     * -DINSTALL_SCRIPTDIR=dir_name
       Where to install mysql_install_db.

     * -DINSTALL_SHAREDIR=dir_name
       Where to install aclocal/mysql.m4.

     * -DINSTALL_SQLBENCHDIR=dir_name
       Where to install the sql-bench directory. To not install this
       directory, use an empty value (-DINSTALL_SQLBENCHDIR=).

     * -DINSTALL_SUPPORTFILESDIR=dir_name
       Where to install extra support files.

     * -DMYSQL_DATADIR=dir_name
       The location of the MySQL data directory.

     * -DSYSCONFDIR=dir_name
       The default my.cnf option file directory.

Storage Engine Options

   Storage engines are built as plugins. You can build a plugin as a
   static module (compiled into the server) or a dynamic module
   (built as a dynamic library that must be installed into the server
   using the INSTALL PLUGIN statement or the --plugin-load option
   before it can be used). Some plugins might not support static or
   dynamic building.

   The MyISAM, MERGE, MEMORY, and CSV engines are mandatory (always
   compiled into the server) and need not be installed explicitly.

   To compile a storage engine statically into the server, use
   -DWITH_engine_STORAGE_ENGINE=1. Some permissible engine values are
   ARCHIVE, BLACKHOLE, EXAMPLE, FEDERATED, INNOBASE (InnoDB),
   PARTITION (partitioning support), and PERFSCHEMA (Performance
   Schema). Examples:
-DWITH_INNOBASE_STORAGE_ENGINE=1
-DWITH_ARCHIVE_STORAGE_ENGINE=1
-DWITH_BLACKHOLE_STORAGE_ENGINE=1
-DWITH_PERFSCHEMA_STORAGE_ENGINE=1

   To exclude a storage engine from the build, use
   -DWITHOUT_engine_STORAGE_ENGINE=1. Examples:
-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1
-DWITHOUT_FEDERATED_STORAGE_ENGINE=1
-DWITHOUT_PARTITION_STORAGE_ENGINE=1

   If neither -DWITH_engine_STORAGE_ENGINE nor
   -DWITHOUT_engine_STORAGE_ENGINE are specified for a given storage
   engine, the engine is built as a shared module, or excluded if it
   cannot be built as a shared module.

Feature Options


     * -DDEFAULT_CHARSET=charset_name
       The server character set. By default, MySQL uses the latin1
       (cp1252 West European) character set.
       charset_name may be one of binary, armscii8, ascii, big5,
       cp1250, cp1251, cp1256, cp1257, cp850, cp852, cp866, cp932,
       dec8, eucjpms, euckr, gb2312, gbk, geostd8, greek, hebrew,
       hp8, keybcs2, koi8r, koi8u, latin1, latin2, latin5, latin7,
       macce, macroman, sjis, swe7, tis620, ucs2, ujis, utf8,
       utf8mb4, utf16, utf32.

     * -DDEFAULT_COLLATION=collation_name
       The server collation. By default, MySQL uses
       latin1_swedish_ci. Use the SHOW COLLATION statement to
       determine which collations are available for each character
       set.

     * -DENABLE_DEBUG_SYNC=bool
       Whether to compile the Debug Sync facility into the server.
       This facility is used for testing and debugging. When compiled
       in, Debug Sync is disabled by default. To enable it, start
       mysqld with the --debug-sync-timeout=N option, where N is a
       timeout value greater than 0. (The default value is 0, which
       disables Debug Sync.) N becomes the default timeout for
       individual synchronization points.
       This option is enabled by default, but has no effect unless
       MySQL is configured with debugging enabled. If debugging is
       enabled and you want to disable Debug Sync, use
       -DENABLE_DEBUG_SYNC=0.
       For a description of the Debug Sync facility and how to use
       synchronization points, see MySQL Internals: Test
       Synchronization
       (http://forge.mysql.com/wiki/MySQL_Internals_Test_Synchronizat
       ion).

     * -DENABLE_DOWNLOADS=bool
       Whether to download optional files. For example, with this
       option enabled, CMake downloads the Google Test distribution
       that is used by the test suite to run unit tests.

     * -DENABLE_DTRACE=bool
       Whether to include support for DTrace probes.

     * -DENABLED_LOCAL_INFILE=bool
       Whether to enable LOAD DATA LOCAL INFILE.

     * -DENABLED_PROFILING=bool
       Whether to enable query profiling code (the SHOW PROFILE and
       SHOW PROFILES statements).

     * -DMYSQL_MAINTAINER_MODE=bool
       Whether to enable a MySQL maintainer-specific development
       environment. If enabled, this option causes compiler warnings
       to become errors.

     * -DMYSQL_TCP_PORT=port_num
       The port number on on which the server listens for TCP/IP
       connections. The default is 3306.

     * -DMYSQL_UNIX_ADDR=file_name
       The Unix socket file path on which the server listens for
       socket connections. This must be an absolute path name. The
       default is /tmp/mysql.sock.

     * -DWITH_COMMENT=string
       A descriptive comment about the compilation environment.

     * -DWITH_DEBUG=bool
       Whether to include debugging support.
       Configuring MySQL with debugging support enables you to use
       the --debug="d,parser_debug" option when you start the server.
       This causes the Bison parser that is used to process SQL
       statements to dump a parser trace to the server's standard
       error output. Typically, this output is written to the error
       log.

     * -DWITH_EMBEDDED_SERVER=bool
       Whether to build the libmysqld embedded server library.

     * -DWITH_EXTRA_CHARSETS=name
       Which extra character sets to include:

          + all: All character sets. This is the default.

          + complex: Complex character sets.

          + none: No extra character sets.

     * -DWITH_LIBWRAP=bool
       Whether to include libwrap (TCP wrappers) support.

     * -DWITH_READLINE=bool
       Whether to use the readline library bundled with the
       distribution.

     * -DWITH_SSL=ssl_type
       The type of SSL support to include, if any:

          + no: No SSL support. This is the default.

          + yes: Use the system SSL library if present, else the
            library bundled with the distribution.

          + bundled: Use the SSL library bundled with the
            distribution.

          + system: Use the system SSL library.

     * -DWITH_ZLIB=zlib_type
       Some features require that the server be built with
       compression library support, such as the COMPRESS() and
       UNCOMPRESS() functions, and compression of the client/server
       protocol. The WITH_ZLIB indicates the source of zlib support:

          + bundled: Use the zlib library bundled with the
            distribution.

          + system: Use the system zlib library. This is the default.

Compiler Flags

   To specify compiler flags, set the CFLAGS and CXXFLAGS environment
   variables. Example:
shell> CFLAGS=-DDISABLE_GRANT_OPTIONS
shell> CXXFLAGS=-DDISABLE_GRANT_OPTIONS
shell> export CFLAGS CXXFLAGS

   The following flags control configuration features:

     * DISABLE_GRANT_OPTIONS
       If this flag is defined, it causes the --bootstrap,
       --skip-grant-tables, and --init-file options for mysqld to be
       disabled.

     * HAVE_EMBEDDED_PRIVILEGE_CONTROL
       By default, authentication for connections to the embedded
       server is disabled. To enable authentication for the embedded
       server, define this flag.

2.11.5. Dealing with Problems Compiling MySQL

   On some systems, warnings may occur due to differences in system
   include files. For other problems, check the following list.

   The solution to many problems involves reconfiguring. If you do
   reconfigure, take note of the following:

     * If CMake is run after it has previously been run, it may use
       information that was gathered during its previous invocation.
       This information is stored in CMakeCache.txt. When CMake
       starts up, it looks for that file and reads its contents if it
       exists, on the assumption that the information is still
       correct. That assumption is invalid when you reconfigure.

     * Each time you run CMake, you must run make again to recompile.
       However, you may want to remove old object files from previous
       builds first because they were compiled using different
       configuration options.

   To prevent old configuration information or object files from
   being used, run these commands before re-running CMake:
shell> rm CMakeCache.txt
shell> make clean

   The following list describes some of the problems when compiling
   MySQL that have been found to occur most often:

     * If you want to define flags to be used by your C compiler, do
       so by adding the flags to the CFLAGS and CXXFLAGS environment
       variables. You can also specify the compiler names this way
       using CC and CXX. For example:
shell> CC=gcc
shell> CFLAGS=-O3
shell> CXX=gcc
shell> CXXFLAGS=-O3
shell> export CC CFLAGS CXX CXXFLAGS

     * If compilation fails, check whether the MYSQL_MAINTAINER_MODE
       option is enabled. This mode causes compiler warnings to
       become errors, so disabling it may enable compilation to
       proceed.

     * If your compile fails with errors such as any of the
       following, you must upgrade your version of make to GNU make:
make: Fatal error in reader: Makefile, line 18:
Badly formed macro assignment
       Or:
make: file `Makefile' line 18: Must be a separator (:
       Or:
pthread.h: No such file or directory
       Solaris and FreeBSD are known to have troublesome make
       programs.
       GNU make 3.75 is known to work.

     * The sql_yacc.cc file is generated from sql_yacc.yy. Normally,
       the build process does not need to create sql_yacc.cc because
       MySQL comes with a pregenerated copy. However, if you do need
       to re-create it, you might encounter this error:
"sql_yacc.yy", line xxx fatal: default action causes potential...
       This is a sign that your version of yacc is deficient. You
       probably need to install bison (the GNU version of yacc) and
       use that instead.
       Versions of bison older than 1.75 may report this error:
sql_yacc.yy:#####: fatal error: maximum table size (32767) exceeded
       The maximum table size is not actually exceeded; the error is
       caused by bugs in older versions of bison.

     * On Debian Linux 3.0, you need to install gawk instead of the
       default mawk.

2.12. Postinstallation Setup and Testing

   After installing MySQL, there are some issues that you should
   address. For example, on Unix, you should initialize the data
   directory and create the MySQL grant tables. On all platforms, an
   important security concern is that the initial accounts in the
   grant tables have no passwords. You should assign passwords to
   prevent unauthorized access to the MySQL server. Optionally, you
   can create time zone tables to enable recognition of named time
   zones.

   The following sections include postinstallation procedures that
   are specific to Windows systems and to Unix systems. Another
   section, Section 2.12.1.3, "Starting and Troubleshooting the MySQL
   Server," applies to all platforms; it describes what to do if you
   have trouble getting the server to start. Section 2.12.2,
   "Securing the Initial MySQL Accounts," also applies to all
   platforms. You should follow its instructions to make sure that
   you have properly protected your MySQL accounts by assigning
   passwords to them.

   When you are ready to create additional user accounts, you can
   find information on the MySQL access control system and account
   management in Section 5.4, "The MySQL Access Privilege System,"
   and Section 5.5, "MySQL User Account Management."

2.12.1. Unix Postinstallation Procedures

   After installing MySQL on Unix, you must initialize the grant
   tables, start the server, and make sure that the server works
   satisfactorily. You may also wish to arrange for the server to be
   started and stopped automatically when your system starts and
   stops. You should also assign passwords to the accounts in the
   grant tables.

   On Unix, the grant tables are set up by the mysql_install_db
   program. For some installation methods, this program is run for
   you automatically if an existing database cannot be found.

     * If you install MySQL on Linux using RPM distributions, the
       server RPM runs mysql_install_db.

     * Using the native packaging system on many platforms, including
       Windows (MSI), Debian Linux, Ubuntu Linux, Gentoo Linux and
       others, the mysql_install_db command is run for you.

     * If you install MySQL on Mac OS X using a PKG distribution, the
       installer runs mysql_install_db.

   For other platforms and installation types, including generic
   binary and source installs, you will need to run mysql_install_db
   yourself.

   The following procedure describes how to initialize the grant
   tables (if that has not previously been done) and start the
   server. It also suggests some commands that you can use to test
   whether the server is accessible and working properly. For
   information about starting and stopping the server automatically,
   see Section 2.12.1.2, "Starting and Stopping MySQL Automatically."

   After you complete the procedure and have the server running, you
   should assign passwords to the accounts created by
   mysql_install_db and perhaps tighten access to test databases. For
   instructions, see Section 2.12.2, "Securing the Initial MySQL
   Accounts."

   In the examples shown here, the server runs under the user ID of
   the mysql login account. This assumes that such an account exists.
   Either create the account if it does not exist, or substitute the
   name of a different existing login account that you plan to use
   for running the server.

    1. Change location into the top-level directory of your MySQL
       installation, represented here by BASEDIR:
shell> cd BASEDIR
       BASEDIR is the installation directory for your MySQL instance.
       It is likely to be something like /usr/local/mysql or
       /usr/local. The following steps assume that you have changed
       location to this directory.

    2. If necessary, run the mysql_install_db program to set up the
       initial MySQL grant tables containing the privileges that
       determine how users are permitted to connect to the server.
       You will need to do this if you used a distribution type for
       which the installation procedure does not run the program for
       you.
shell> scripts/mysql_install_db --user=mysql
       Typically, mysql_install_db needs to be run only the first
       time you install MySQL, so you can skip this step if you are
       upgrading an existing installation, However, mysql_install_db
       does not overwrite any existing privilege tables, so it should
       be safe to run in any circumstances.
       It might be necessary to specify other options such as
       --basedir or --datadir if mysql_install_db does not identify
       the correct locations for the installation directory or data
       directory. For example:
shell> scripts/mysql_install_db --user=mysql \
         --basedir=/opt/mysql/mysql \
         --datadir=/opt/mysql/mysql/data
       The mysql_install_db script creates the server's data
       directory. Under the data directory, it creates directories
       for the mysql database that holds the grant tables and the
       test database that you can use to test MySQL. The script also
       creates privilege table entries for root and anonymous-user
       accounts. The accounts have no passwords initially. Section
       2.12.2, "Securing the Initial MySQL Accounts," describes the
       initial privileges. Briefly, these privileges permit the MySQL
       root user to do anything, and permit anybody to create or use
       databases with a name of test or starting with test_.
       It is important to make sure that the database directories and
       files are owned by the mysql login account so that the server
       has read and write access to them when you run it later. To
       ensure this, the --user option should be used as shown if you
       run mysql_install_db as root. Otherwise, you should execute
       the script while logged in as mysql, in which case you can
       omit the --user option from the command.
       mysql_install_db creates several tables in the mysql database,
       including user, db, host, tables_priv, columns_priv, func, and
       others. See Section 5.4, "The MySQL Access Privilege System,"
       for a complete listing and description of these tables.
       If you do not want to have the test database, you can remove
       it after starting the server, using the instructions in
       Section 2.12.2, "Securing the Initial MySQL Accounts."
       If you have trouble with mysql_install_db at this point, see
       Section 2.12.1.1, "Problems Running mysql_install_db."

    3. Start the MySQL server:
shell> bin/mysqld_safe --user=mysql &
       It is important that the MySQL server be run using an
       unprivileged (non-root) login account. To ensure this, the
       --user option should be used as shown if you run mysqld_safe
       as system root. Otherwise, you should execute the script while
       logged in to the system as mysql, in which case you can omit
       the --user option from the command.
       Further instructions for running MySQL as an unprivileged user
       are given in Section 5.3.6, "How to Run MySQL as a Normal
       User."
       If the command fails immediately and prints mysqld ended, look
       for information in the error log (which by default is the
       host_name.err file in the data directory).
       If you neglected to create the grant tables by running
       mysql_install_db before proceeding to this step, the following
       message appears in the error log file when you start the
       server:
mysqld: Can't find file: 'host.frm'
       This error also occurs if you run mysql_install_db as root
       without the --user option. Remove the data directory and run
       mysql_install_db with the --user option as described
       previously.
       If you have other problems starting the server, see Section
       2.12.1.3, "Starting and Troubleshooting the MySQL Server."

    4. Use mysqladmin to verify that the server is running. The
       following commands provide simple tests to check whether the
       server is up and responding to connections:
shell> bin/mysqladmin version
shell> bin/mysqladmin variables
       The output from mysqladmin version varies slightly depending
       on your platform and version of MySQL, but should be similar
       to that shown here:
shell> bin/mysqladmin version
mysqladmin  Ver 14.12 Distrib 5.5.9, for pc-linux-gnu on i686
...

Server version          5.5.9
Protocol version        10
Connection              Localhost via UNIX socket
UNIX socket             /var/lib/mysql/mysql.sock
Uptime:                 14 days 5 hours 5 min 21 sec

Threads: 1  Questions: 366  Slow queries: 0
Opens: 0  Flush tables: 1  Open tables: 19
Queries per second avg: 0.000
       To see what else you can do with mysqladmin, invoke it with
       the --help option.

    5. Verify that you can shut down the server:
shell> bin/mysqladmin -u root shutdown

    6. Verify that you can start the server again. Do this by using
       mysqld_safe or by invoking mysqld directly. For example:
shell> bin/mysqld_safe --user=mysql --log &
       If mysqld_safe fails, see Section 2.12.1.3, "Starting and
       Troubleshooting the MySQL Server."

    7. Run some simple tests to verify that you can retrieve
       information from the server. The output should be similar to
       what is shown here:
shell> bin/mysqlshow
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+

shell> bin/mysqlshow mysql
Database: mysql
+---------------------------+
|          Tables           |
+---------------------------+
| columns_priv              |
| db                        |
| event                     |
| func                      |
| help_category             |
| help_keyword              |
| help_relation             |
| help_topic                |
| host                      |
| plugin                    |
| proc                      |
| procs_priv                |
| servers                   |
| tables_priv               |
| time_zone                 |
| time_zone_leap_second     |
| time_zone_name            |
| time_zone_transition      |
| time_zone_transition_type |
| user                      |
+---------------------------+

shell> bin/mysql -e "SELECT Host,Db,User FROM db" mysql
+------+--------+------+
| host | db     | user |
+------+--------+------+
| %    | test   |      |
| %    | test_% |      |
+------+--------+------+

    8. There is a benchmark suite in the sql-bench directory (under
       the MySQL installation directory) that you can use to compare
       how MySQL performs on different platforms. The benchmark suite
       is written in Perl. It requires the Perl DBI module that
       provides a database-independent interface to the various
       databases, and some other additional Perl modules:
DBI
DBD::mysql
Data::Dumper
Data::ShowTable
       These modules can be obtained from CPAN
       (http://www.cpan.org/). See also Section 2.15.1, "Installing
       Perl on Unix."
       The sql-bench/Results directory contains the results from many
       runs against different databases and platforms. To run all
       tests, execute these commands:
shell> cd sql-bench
shell> perl run-all-tests
       If you do not have the sql-bench directory, you probably
       installed MySQL using RPM files other than the source RPM.
       (The source RPM includes the sql-bench benchmark directory.)
       In this case, you must first install the benchmark suite
       before you can use it. There are separate benchmark RPM files
       named mysql-bench-VERSION.i386.rpm that contain benchmark code
       and data.
       If you have a source distribution, there are also tests in its
       tests subdirectory that you can run. For example, to run
       auto_increment.tst, execute this command from the top-level
       directory of your source distribution:
shell> mysql -vvf test < ./tests/auto_increment.tst
       The expected result of the test can be found in the
       ./tests/auto_increment.res file.

    9. At this point, you should have the server running. However,
       none of the initial MySQL accounts have a password, and the
       server permits permissive access to test databases. To tighten
       security, follow the instructions in Section 2.12.2, "Securing
       the Initial MySQL Accounts."

   The MySQL 5.5 installation procedure creates time zone tables in
   the mysql database. However, you must populate the tables manually
   using the instructions in Section 9.6, "MySQL Server Time Zone
   Support."

   To make it more convenient to invoke programs installed in the bin
   directory under the installation directory, you can add that
   directory to your PATH environment variable setting. That enables
   you to run a program by typing only its name, not its entire path
   name. See Section 4.2.4, "Setting Environment Variables."

2.12.1.1. Problems Running mysql_install_db

   The purpose of the mysql_install_db script is to generate new
   MySQL privilege tables. It does not overwrite existing MySQL
   privilege tables, and it does not affect any other data.

   If you want to re-create your privilege tables, first stop the
   mysqld server if it is running. Then rename the mysql directory
   under the data directory to save it, and then run
   mysql_install_db. Suppose that your current directory is the MySQL
   installation directory and that mysql_install_db is located in the
   bin directory and the data directory is named data. To rename the
   mysql database and re-run mysql_install_db, use these commands.
shell> mv data/mysql data/mysql.old
shell> scripts/mysql_install_db --user=mysql

   When you run mysql_install_db, you might encounter the following
   problems:

     * mysql_install_db fails to install the grant tables
       You may find that mysql_install_db fails to install the grant
       tables and terminates after displaying the following messages:
Starting mysqld daemon with databases from XXXXXX
mysqld ended
       In this case, you should examine the error log file very
       carefully. The log should be located in the directory XXXXXX
       named by the error message and should indicate why mysqld did
       not start. If you do not understand what happened, include the
       log when you post a bug report. See Section 1.7, "How to
       Report Bugs or Problems."

     * There is a mysqld process running
       This indicates that the server is running, in which case the
       grant tables have probably been created already. If so, there
       is no need to run mysql_install_db at all because it needs to
       be run only once (when you install MySQL the first time).

     * Installing a second mysqld server does not work when one
       server is running
       This can happen when you have an existing MySQL installation,
       but want to put a new installation in a different location.
       For example, you might have a production installation, but you
       want to create a second installation for testing purposes.
       Generally the problem that occurs when you try to run a second
       server is that it tries to use a network interface that is in
       use by the first server. In this case, you should see one of
       the following error messages:
Can't start server: Bind on TCP/IP port:
Address already in use
Can't start server: Bind on unix socket...
       For instructions on setting up multiple servers, see Section
       5.6, "Running Multiple MySQL Servers on the Same Machine."

     * You do not have write access to the /tmp directory
       If you do not have write access to create temporary files or a
       Unix socket file in the default location (the /tmp directory)
       or the TMP_DIR environment variable, if it has been set, an
       error occurs when you run mysql_install_db or the mysqld
       server.
       You can specify different locations for the temporary
       directory and Unix socket file by executing these commands
       prior to starting mysql_install_db or mysqld, where
       some_tmp_dir is the full path name to some directory for which
       you have write permission:
shell> TMPDIR=/some_tmp_dir/
shell> MYSQL_UNIX_PORT=/some_tmp_dir/mysql.sock
shell> export TMPDIR MYSQL_UNIX_PORT
       Then you should be able to run mysql_install_db and start the
       server with these commands:
shell> scripts/mysql_install_db --user=mysql
shell> bin/mysqld_safe --user=mysql &
       If mysql_install_db is located in the scripts directory,
       modify the first command to scripts/mysql_install_db.
       See Section C.5.4.5, "How to Protect or Change the MySQL Unix
       Socket File," and Section 2.14, "Environment Variables."

   There are some alternatives to running the mysql_install_db script
   provided in the MySQL distribution:

     * If you want the initial privileges to be different from the
       standard defaults, you can modify mysql_install_db before you
       run it. However, it is preferable to use GRANT and REVOKE to
       change the privileges after the grant tables have been set up.
       In other words, you can run mysql_install_db, and then use
       mysql -u root mysql to connect to the server as the MySQL root
       user so that you can issue the necessary GRANT and REVOKE
       statements.
       If you want to install MySQL on several machines with the same
       privileges, you can put the GRANT and REVOKE statements in a
       file and execute the file as a script using mysql after
       running mysql_install_db. For example:
shell> scripts/mysql_install_db --user=mysql
shell> bin/mysql -u root < your_script_file
       By doing this, you can avoid having to issue the statements
       manually on each machine.

     * It is possible to re-create the grant tables completely after
       they have previously been created. You might want to do this
       if you're just learning how to use GRANT and REVOKE and have
       made so many modifications after running mysql_install_db that
       you want to wipe out the tables and start over.
       To re-create the grant tables, remove all the .frm, .MYI, and
       .MYD files in the mysql database directory. Then run the
       mysql_install_db script again.

     * You can start mysqld manually using the --skip-grant-tables
       option and add the privilege information yourself using mysql:
shell> bin/mysqld_safe --user=mysql --skip-grant-tables &
shell> bin/mysql mysql
       From mysql, manually execute the SQL commands contained in
       mysql_install_db. Make sure that you run mysqladmin
       flush-privileges or mysqladmin reload afterward to tell the
       server to reload the grant tables.
       Note that by not using mysql_install_db, you not only have to
       populate the grant tables manually, you also have to create
       them first.

2.12.1.2. Starting and Stopping MySQL Automatically

   Generally, you start the mysqld server in one of these ways:

     * Invoke mysqld directly. This works on any platform.

     * Run the MySQL server as a Windows service. The service can be
       set to start the server automatically when Windows starts, or
       as a manual service that you start on request. For
       instructions, see Section 2.3.5.7, "Starting MySQL as a
       Windows Service."

     * Invoke mysqld_safe, which tries to determine the proper
       options for mysqld and then runs it with those options. This
       script is used on Unix and Unix-like systems. See Section
       4.3.2, "mysqld_safe --- MySQL Server Startup Script."

     * Invoke mysql.server. This script is used primarily at system
       startup and shutdown on systems that use System V-style run
       directories (that is, /etc/init.d and run-level specific
       directories), where it usually is installed under the name
       mysql. The mysql.server script starts the server by invoking
       mysqld_safe. See Section 4.3.3, "mysql.server --- MySQL Server
       Startup Script."

     * On Mac OS X, install a separate MySQL Startup Item package to
       enable the automatic startup of MySQL on system startup. The
       Startup Item starts the server by invoking mysql.server. See
       Section 2.4.3, "Installing the MySQL Startup Item," for
       details. A MySQL Preference Pane also provides control for
       starting and stopping MySQL through the System Preferences,
       see Section 2.4.4, "Installing and Using the MySQL Preference
       Pane."

     * Use the Solaris/OpenSolaris service management framework (SMF)
       system to initiate and control MySQL startup. For more
       information, see Section 2.6.2, "Installing MySQL on
       OpenSolaris using IPS."

   The mysqld_safe and mysql.server scripts, Windows server,
   Solaris/OpenSolaris SMF, and the Mac OS X Startup Item (or MySQL
   Preference Pane) can be used to start the server manually, or
   automatically at system startup time. mysql.server and the Startup
   Item also can be used to stop the server.

   To start or stop the server manually using the mysql.server
   script, invoke it with start or stop arguments:
shell> mysql.server start
shell> mysql.server stop

   Before mysql.server starts the server, it changes location to the
   MySQL installation directory, and then invokes mysqld_safe. If you
   want the server to run as some specific user, add an appropriate
   user option to the [mysqld] group of the /etc/my.cnf option file,
   as shown later in this section. (It is possible that you will need
   to edit mysql.server if you've installed a binary distribution of
   MySQL in a nonstandard location. Modify it to change location into
   the proper directory before it runs mysqld_safe. If you do this,
   your modified version of mysql.server may be overwritten if you
   upgrade MySQL in the future, so you should make a copy of your
   edited version that you can reinstall.)

   mysql.server stop stops the server by sending a signal to it. You
   can also stop the server manually by executing mysqladmin
   shutdown.

   To start and stop MySQL automatically on your server, you need to
   add start and stop commands to the appropriate places in your
   /etc/rc* files.

   If you use the Linux server RPM package
   (MySQL-server-VERSION.rpm), or a native Linux package
   installation, the mysql.server script may be installed in the
   /etc/init.d directory with the name mysql. See Section 2.5.1,
   "Installing MySQL from RPM Packages on Linux," for more
   information on the Linux RPM packages.

   Some vendors provide RPM packages that install a startup script
   under a different name such as mysqld.

   If you install MySQL from a source distribution or using a binary
   distribution format that does not install mysql.server
   automatically, you can install it manually. The script can be
   found in the support-files directory under the MySQL installation
   directory or in a MySQL source tree.

   To install mysql.server manually, copy it to the /etc/init.d
   directory with the name mysql, and then make it executable. Do
   this by changing location into the appropriate directory where
   mysql.server is located and executing these commands:
shell> cp mysql.server /etc/init.d/mysql
shell> chmod +x /etc/init.d/mysql

   Note

   Older Red Hat systems use the /etc/rc.d/init.d directory rather
   than /etc/init.d. Adjust the preceding commands accordingly.
   Alternatively, first create /etc/init.d as a symbolic link that
   points to /etc/rc.d/init.d:
shell> cd /etc
shell> ln -s rc.d/init.d .

   After installing the script, the commands needed to activate it to
   run at system startup depend on your operating system. On Linux,
   you can use chkconfig:
shell> chkconfig --add mysql

   On some Linux systems, the following command also seems to be
   necessary to fully enable the mysql script:
shell> chkconfig --level 345 mysql on

   On FreeBSD, startup scripts generally should go in
   /usr/local/etc/rc.d/. The rc(8) manual page states that scripts in
   this directory are executed only if their basename matches the
   *.sh shell file name pattern. Any other files or directories
   present within the directory are silently ignored. In other words,
   on FreeBSD, you should install the mysql.server script as
   /usr/local/etc/rc.d/mysql.server.sh to enable automatic startup.

   As an alternative to the preceding setup, some operating systems
   also use /etc/rc.local or /etc/init.d/boot.local to start
   additional services on startup. To start up MySQL using this
   method, you could append a command like the one following to the
   appropriate startup file:
/bin/sh -c 'cd /usr/local/mysql; ./bin/mysqld_safe --user=mysql &'

   For other systems, consult your operating system documentation to
   see how to install startup scripts.

   You can add options for mysql.server in a global /etc/my.cnf file.
   A typical /etc/my.cnf file might look like this:
[mysqld]
datadir=/usr/local/mysql/var
socket=/var/tmp/mysql.sock
port=3306
user=mysql

[mysql.server]
basedir=/usr/local/mysql

   The mysql.server script supports the following options: basedir,
   datadir, and pid-file. If specified, they must be placed in an
   option file, not on the command line. mysql.server supports only
   start and stop as command-line arguments.

   The following table shows which option groups the server and each
   startup script read from option files.

   Table 2.15. MySQL Startup scripts and supported server option
   groups
      Script                  Option Groups
   mysqld       [mysqld], [server], [mysqld-major_version]
   mysqld_safe  [mysqld], [server], [mysqld_safe]
   mysql.server [mysqld], [mysql.server], [server]

   [mysqld-major_version] means that groups with names like
   [mysqld-5.1] and [mysqld-5.5] are read by servers having versions
   5.1.x, 5.5.x, and so forth. This feature can be used to specify
   options that can be read only by servers within a given release
   series.

   For backward compatibility, mysql.server also reads the
   [mysql_server] group and mysqld_safe also reads the [safe_mysqld]
   group. However, you should update your option files to use the
   [mysql.server] and [mysqld_safe] groups instead when using MySQL
   5.5.

   For more information on MySQL configuration files and their
   structure and contents, see Section 4.2.3.3, "Using Option Files."

2.12.1.3. Starting and Troubleshooting the MySQL Server

   This section provides troubleshooting suggestions for problems
   starting the server on Unix. If you are using Windows, see Section
   2.3.6, "Troubleshooting a MySQL Installation Under Windows."

   If you have problems starting the server, here are some things to
   try:

     * Check the error log to see why the server does not start.

     * Specify any special options needed by the storage engines you
       are using.

     * Make sure that the server knows where to find the data
       directory.

     * Make sure that the server can access the data directory. The
       ownership and permissions of the data directory and its
       contents must be set such that the server can read and modify
       them.

     * Verify that the network interfaces the server wants to use are
       available.

   Some storage engines have options that control their behavior. You
   can create a my.cnf file and specify startup options for the
   engines that you plan to use. If you are going to use storage
   engines that support transactional tables (InnoDB, NDB
   (http://dev.mysql.com/doc/refman/5.1/en/mysql-cluster.html)), be
   sure that you have them configured the way you want before
   starting the server:

     * If you are using InnoDB tables, see Section 13.6.1,
       "Configuring InnoDB."

     * If you are using MySQL Cluster, see MySQL Cluster
       Configuration
       (http://dev.mysql.com/doc/refman/5.1/en/mysql-cluster-configur
       ation.html).

   Storage engines will use default option values if you specify
   none, but it is recommended that you review the available options
   and specify explicit values for those for which the defaults are
   not appropriate for your installation.

   When the mysqld server starts, it changes location to the data
   directory. This is where it expects to find databases and where it
   expects to write log files. The server also writes the pid
   (process ID) file in the data directory.

   The data directory location is hardwired in when the server is
   compiled. This is where the server looks for the data directory by
   default. If the data directory is located somewhere else on your
   system, the server will not work properly. You can determine what
   the default path settings are by invoking mysqld with the
   --verbose and --help options.

   If the default locations do not match the MySQL installation
   layout on your system, you can override them by specifying options
   to mysqld or mysqld_safe on the command line or in an option file.

   To specify the location of the data directory explicitly, use the
   --datadir option. However, normally you can tell mysqld the
   location of the base directory under which MySQL is installed and
   it looks for the data directory there. You can do this with the
   --basedir option.

   To check the effect of specifying path options, invoke mysqld with
   those options followed by the --verbose and --help options. For
   example, if you change location into the directory where mysqld is
   installed and then run the following command, it shows the effect
   of starting the server with a base directory of /usr/local:
shell> ./mysqld --basedir=/usr/local --verbose --help

   You can specify other options such as --datadir as well, but
   --verbose and --help must be the last options.

   Once you determine the path settings you want, start the server
   without --verbose and --help.

   If mysqld is currently running, you can find out what path
   settings it is using by executing this command:
shell> mysqladmin variables

   Or:
shell> mysqladmin -h host_name variables

   host_name is the name of the MySQL server host.

   If you get Errcode 13 (which means Permission denied) when
   starting mysqld, this means that the privileges of the data
   directory or its contents do not permit server access. In this
   case, you change the permissions for the involved files and
   directories so that the server has the right to use them. You can
   also start the server as root, but this raises security issues and
   should be avoided.

   On Unix, change location into the data directory and check the
   ownership of the data directory and its contents to make sure the
   server has access. For example, if the data directory is
   /usr/local/mysql/var, use this command:
shell> ls -la /usr/local/mysql/var

   If the data directory or its files or subdirectories are not owned
   by the login account that you use for running the server, change
   their ownership to that account. If the account is named mysql,
   use these commands:
shell> chown -R mysql /usr/local/mysql/var
shell> chgrp -R mysql /usr/local/mysql/var

   If it possible that even with correct ownership, MySQL may fail to
   start up if there is other security software running on your
   system that manages application access to various parts of the
   file system. In this case, you may need to reconfigure that
   software to enable mysqld to access the directories it uses during
   normal operation.

   If the server fails to start up correctly, check the error log.
   Log files are located in the data directory (typically C:\Program
   Files\MySQL\MySQL Server 5.5\data on Windows,
   /usr/local/mysql/data for a Unix binary distribution, and
   /usr/local/var for a Unix source distribution). Look in the data
   directory for files with names of the form host_name.err and
   host_name.log, where host_name is the name of your server host.
   Then examine the last few lines of these files. On Unix, you can
   use tail to display them:
shell> tail host_name.err
shell> tail host_name.log

   The error log should contain information that indicates why the
   server could not start.

   If either of the following errors occur, it means that some other
   program (perhaps another mysqld server) is using the TCP/IP port
   or Unix socket file that mysqld is trying to use:
Can't start server: Bind on TCP/IP port: Address already in use
Can't start server: Bind on unix socket...

   Use ps to determine whether you have another mysqld server
   running. If so, shut down the server before starting mysqld again.
   (If another server is running, and you really want to run multiple
   servers, you can find information about how to do so in Section
   5.6, "Running Multiple MySQL Servers on the Same Machine.")

   If no other server is running, try to execute the command telnet
   your_host_name tcp_ip_port_number. (The default MySQL port number
   is 3306.) Then press Enter a couple of times. If you do not get an
   error message like telnet: Unable to connect to remote host:
   Connection refused, some other program is using the TCP/IP port
   that mysqld is trying to use. You will need to track down what
   program this is and disable it, or else tell mysqld to listen to a
   different port with the --port option. In this case, you will also
   need to specify the port number for client programs when
   connecting to the server using TCP/IP.

   Another reason the port might be inaccessible is that you have a
   firewall running that blocks connections to it. If so, modify the
   firewall settings to permit access to the port.

   If the server starts but you cannot connect to it, you should make
   sure that you have an entry in /etc/hosts that looks like this:
127.0.0.1       localhost

   If you cannot get mysqld to start, you can try to make a trace
   file to find the problem by using the --debug option. See MySQL
   Internals: Porting
   (http://forge.mysql.com/wiki/MySQL_Internals_Porting).

2.12.2. Securing the Initial MySQL Accounts

   Part of the MySQL installation process is to set up the mysql
   database that contains the grant tables:

     * Windows distributions contain preinitialized grant tables.

     * On Unix, the mysql_install_db program populates the grant
       tables. Some installation methods run this program for you.
       Others require that you execute it manually. For details, see
       Section 2.12.1, "Unix Postinstallation Procedures."

   The mysql.user grant table defines the initial MySQL user accounts
   and their access privileges:

     * Some accounts have the user name root. These are superuser
       accounts that have all privileges and can do anything. The
       initial root account passwords are empty, so anyone can
       connect to the MySQL server as root without a password and be
       granted all privileges.

          + On Windows, root accounts are created that permit
            connections from the local host only. Connections can be
            made by specifying the host name localhost, the IP
            address 127.0.0.1, or the IPv6 address ::1. If the user
            selects the Enable root access from remote machines
            option during installation, the Windows installer creates
            another root account that permits connections from any
            host.

          + On Unix, each root account permits connections from the
            local host. Connections can be made by specifying the
            host name localhost, the IP address 127.0.0.1, the IPv6
            address ::1, or the actual host name or IP address.
       An attempt to connect to the host 127.0.0.1 normally resolves
       to the localhost account. However, this fails if the server is
       run with the --skip-name-resolve option, so the 127.0.0.1
       account is useful in that case. The ::1 account is used for
       IPv6 connections.

     * Some accounts are for anonymous users. These have an empty
       user name. The anonymous accounts have no password, so anyone
       can use them to connect to the MySQL server.

          + On Windows, there is one anonymous account that permits
            connections from the local host. Connections can be made
            by specifying a host name of localhost.

          + On Unix, each anonymous account permits connections from
            the local host. Connections can be made by specifying a
            host name of localhost for one of the accounts, or the
            actual host name or IP address for the other.

   To display which accounts exist in the mysql.user table and check
   whether their passwords are empty, use the following statement:
mysql> SELECT User, Host, Password FROM mysql.user;
+------+--------------------+----------+
| User | Host               | Password |
+------+--------------------+----------+
| root | localhost          |          |
| root | myhost.example.com |          |
| root | 127.0.0.1          |          |
| root | ::1                |          |
|      | localhost          |          |
|      | myhost.example.com |          |
+------+--------------------+----------+

   This output indicates that there are several root and
   anonymous-user accounts, none of which have passwords. The output
   might differ on your system, but the presence of accounts with
   empty passwords means that your MySQL installation is unprotected
   until you do something about it:

     * You should assign a password to each MySQL root account.

     * If you want to prevent clients from connecting as anonymous
       users without a password, you should either assign a password
       to each anonymous account or else remove the accounts.

   In addition, the mysql.db table contains rows that permit all
   accounts to access the test database and other databases with
   names that start with test_. This is true even for accounts that
   otherwise have no special privileges such as the default anonymous
   accounts. This is convenient for testing but inadvisable on
   production servers. Administrators who want database access
   restricted only to accounts that have permissions granted
   explicitly for that purpose should remove these mysql.db table
   rows.

   The following instructions describe how to set up passwords for
   the initial MySQL accounts, first for the root accounts, then for
   the anonymous accounts. The instructions also cover how to remove
   the anonymous accounts, should you prefer not to permit anonymous
   access at all, and describe how to remove permissive access to
   test databases. Replace newpwd in the examples with the password
   that you want to use. Replace host_name with the name of the
   server host. You can determine this name from the output of the
   preceding SELECT statement. For the output shown, host_name is
   myhost.example.com.
   Note

   For additional information about setting passwords, see Section
   5.5.5, "Assigning Account Passwords." If you forget your root
   password after setting it, see Section C.5.4.1, "How to Reset the
   Root Password."

   You might want to defer setting the passwords until later, to
   avoid the need to specify them while you perform additional setup
   or testing. However, be sure to set them before using your
   installation for production purposes.

   To set up additional accounts, see Section 5.5.2, "Adding User
   Accounts."

Assigning root Account Passwords

   The root account passwords can be set several ways. The following
   discussion demonstrates three methods:

     * Use the SET PASSWORD statement

     * Use the UPDATE statement

     * Use the mysqladmin command-line client program

   To assign passwords using SET PASSWORD, connect to the server as
   root and issue a SET PASSWORD statement for each root account
   listed in the mysql.user table. Be sure to encrypt the password
   using the PASSWORD() function.

   For Windows, do this:
shell> mysql -u root
mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR 'root'@'127.0.0.1' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR 'root'@'::1' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR 'root'@'%' = PASSWORD('newpwd');

   The last statement is unnecessary if the mysql.user table has no
   root account with a host value of %.

   For Unix, do this:
shell> mysql -u root
mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR 'root'@'127.0.0.1' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR 'root'@'::1' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR 'root'@'host_name' = PASSWORD('newpwd');

   You can also use a single statement that assigns a password to all
   root accounts by using UPDATE to modify the mysql.user table
   directly. This method works on any platform:
shell> mysql -u root
mysql> UPDATE mysql.user SET Password = PASSWORD('newpwd')
    ->     WHERE User = 'root';
mysql> FLUSH PRIVILEGES;

   The FLUSH statement causes the server to reread the grant tables.
   Without it, the password change remains unnoticed by the server
   until you restart it.

   To assign passwords to the root accounts using mysqladmin, execute
   the following commands:
shell> mysqladmin -u root password "newpwd"
shell> mysqladmin -u root -h host_name password "newpwd"

   Those commands apply both to Windows and to Unix. The double
   quotation marks around the password are not always necessary, but
   you should use them if the password contains spaces or other
   characters that are special to your command interpreter.

   The mysqladmin method of setting the root account passwords does
   not work for the 'root'@'127.0.0.1' or 'root'@'::1' account. Use
   the SET PASSWORD method shown earlier.

   After the root passwords have been set, you must supply the
   appropriate password whenever you connect as root to the server.
   For example, to shut down the server with mysqladmin, use this
   command:
shell> mysqladmin -u root -p shutdown
Enter password: (enter root password here)

Assigning Anonymous Account Passwords

   The mysql commands in the following instructions include a -p
   option based on the assumption that you have set the root account
   passwords using the preceding instructions and must specify that
   password when connecting to the server.

   To assign passwords to the anonymous accounts, connect to the
   server as root, then use either SET PASSWORD or UPDATE. Be sure to
   encrypt the password using the PASSWORD() function.

   To use SET PASSWORD on Windows, do this:
shell> mysql -u root -p
Enter password: (enter root password here)
mysql> SET PASSWORD FOR ''@'localhost' = PASSWORD('newpwd');

   To use SET PASSWORD on Unix, do this:
shell> mysql -u root -p
Enter password: (enter root password here)
mysql> SET PASSWORD FOR ''@'localhost' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR ''@'host_name' = PASSWORD('newpwd');

   To set the anonymous-user account passwords with a single UPDATE
   statement, do this (on any platform):
shell> mysql -u root -p
Enter password: (enter root password here)
mysql> UPDATE mysql.user SET Password = PASSWORD('newpwd')
    ->     WHERE User = '';
mysql> FLUSH PRIVILEGES;

   The FLUSH statement causes the server to reread the grant tables.
   Without it, the password change remains unnoticed by the server
   until you restart it.

Removing Anonymous Accounts

   If you prefer to remove any anonymous accounts rather than
   assigning them passwords, do so as follows on Windows:
shell> mysql -u root -p
Enter password: (enter root password here)
mysql> DROP USER ''@'localhost';

   On Unix, remove the anonymous accounts like this:
shell> mysql -u root -p
Enter password: (enter root password here)
mysql> DROP USER ''@'localhost';
mysql> DROP USER ''@'host_name';

Securing Test Databases

   By default, the mysql.db table contains rows that permit access by
   any user to the test database and other databases with names that
   start with test_. (These rows have an empty User column value,
   which for access-checking purposes matches any user name.) This
   means that such databases can be used even by accounts that
   otherwise possess no privileges. If you want to remove any-user
   access to test databases, do so as follows:
shell> mysql -u root -p
Enter password: (enter root password here)
mysql> DELETE FROM mysql.db WHERE Db LIKE 'test%';
mysql> FLUSH PRIVILEGES;

   The FLUSH statement causes the server to reread the grant tables.
   Without it, the privilege change remains unnoticed by the server
   until you restart it.

   With the preceding change, only users who have global database
   privileges or privileges granted explicitly for the test database
   can use it. However, if you do not want the database to exist at
   all, drop it:
mysql> DROP DATABASE test;

2.13. Upgrading or Downgrading MySQL

2.13.1. Upgrading MySQL

   As a general rule, to upgrade from one release series to another,
   you should go to the next series rather than skipping a series. To
   upgrade from a release series previous to MySQL 5.4, upgrade to
   each successive release series in turn until you have reached
   MySQL 5.4, and then proceed with the upgrade to MySQL 5.5. For
   example, if you currently are running MySQL 5.1 and wish to
   upgrade to a newer series, upgrade to MySQL 5.4 first before
   upgrading to 5.5, and so forth.

   However, the previous series, MySQL 5.4, was a short-lived
   development series no longer being worked on, so it is more common
   for users to upgrade to MySQL 5.5 directly from MySQL 5.1 than
   from MySQL 5.4. Therefore, this section includes one subsection
   for users upgrading from MySQL 5.1 to 5.5 and another for users
   upgrading from MySQL 5.4 to 5.5.

   To upgrade to MySQL 5.5, use the items in the following checklist
   as a guide:

     * Before any upgrade, back up your databases, including the
       mysql database that contains the grant tables. See Section
       6.2, "Database Backup Methods."

     * Read all the notes in Section 2.13.1.1, "Upgrading from MySQL
       5.1 to 5.5," or Section 2.13.1.2, "Upgrading from MySQL 5.4 to
       5.5," depending on whether you currently use MySQL 5.1 or 5.4.
       These notes enable you to identify upgrade issues that apply
       to your current MySQL installation. Some incompatibilities
       discussed in that section require your attention before
       upgrading. Others should be dealt with after upgrading.

     * Read Appendix D, "MySQL Change History" as well, which
       provides information about features that are new in MySQL 5.5
       or differ from those found in earlier MySQL releases.

     * After upgrading to a new version of MySQL, run mysql_upgrade
       (see Section 4.4.7, "mysql_upgrade --- Check Tables for MySQL
       Upgrade"). This program checks your tables, and attempts to
       repair them if necessary. It also updates your grant tables to
       make sure that they have the current structure so that you can
       take advantage of any new capabilities. (Some releases of
       MySQL introduce changes to the structure of the grant tables
       to add new privileges or features.)
       mysql_upgrade does not upgrade the contents of the help
       tables. For upgrade instructions, see Section 5.1.8,
       "Server-Side Help."

     * If you run MySQL Server on Windows, see Section 2.3.7,
       "Upgrading MySQL on Windows."

     * If you use replication, see Section 17.4.3, "Upgrading a
       Replication Setup," for information on upgrading your
       replication setup.

     * If you upgrade an installation originally produced by
       installing multiple RPM packages, it is best to upgrade all
       the packages, not just some. For example, if you previously
       installed the server and client RPMs, do not upgrade just the
       server RPM.

     * If you have created a user-defined function (UDF) with a given
       name and upgrade MySQL to a version that implements a new
       built-in function with the same name, the UDF becomes
       inaccessible. To correct this, use DROP FUNCTION to drop the
       UDF, and then use CREATE FUNCTION to re-create the UDF with a
       different nonconflicting name. The same is true if the new
       version of MySQL implements a built-in function with the same
       name as an existing stored function. See Section 8.2.4,
       "Function Name Parsing and Resolution," for the rules
       describing how the server interprets references to different
       kinds of functions.

   You can always move the MySQL format files and data files between
   different versions on systems with the same architecture as long
   as you stay within versions for the same release series of MySQL.

   If you are cautious about using new versions, you can always
   rename your old mysqld before installing a newer one. For example,
   if you are using a version of MySQL 5.1 and want to upgrade to
   5.5, rename your current server from mysqld to mysqld-5.1. If your
   new mysqld then does something unexpected, you can simply shut it
   down and restart with your old mysqld.

   If, after an upgrade, you experience problems with compiled client
   programs, such as Commands out of sync or unexpected core dumps,
   you probably have used old header or library files when compiling
   your programs. In this case, you should check the date for your
   mysql.h file and libmysqlclient.a library to verify that they are
   from the new MySQL distribution. If not, recompile your programs
   with the new headers and libraries. Recompilation might also be
   necessary for programs compiled against the shared client library
   if the library major version number has changed (for example from
   libmysqlclient.so.15 to libmysqlclient.so.16.

   If problems occur, such as that the new mysqld server does not
   start or that you cannot connect without a password, verify that
   you do not have an old my.cnf file from your previous
   installation. You can check this with the --print-defaults option
   (for example, mysqld --print-defaults). If this command displays
   anything other than the program name, you have an active my.cnf
   file that affects server or client operation.

   If your MySQL installation contains a large amount of data that
   might take a long time to convert after an in-place upgrade, you
   might find it useful to create a "dummy" database instance for
   assessing what conversions might be needed and the work involved
   to perform them. Make a copy of your MySQL instance that contains
   a full copy of the mysql database, plus all other databases
   without data. Run your upgrade procedure on this dummy instance to
   see what actions might be needed so that you can better evaluate
   the work involved when performing actual data conversion on your
   original database instance.

   It is a good idea to rebuild and reinstall the Perl DBD::mysql
   module whenever you install a new release of MySQL. The same
   applies to other MySQL interfaces as well, such as PHP mysql
   extensions and the Python MySQLdb module.

2.13.1.1. Upgrading from MySQL 5.1 to 5.5

   Note

   It is good practice to back up your data before installing any new
   version of software. Although MySQL works very hard to ensure a
   high level of quality, you should protect your data by making a
   backup.

   To upgrade to 5.5 from any previous version, MySQL recommends that
   you dump your tables with mysqldump before upgrading and reload
   the dump file after upgrading.

   In general, you should do the following when upgrading from MySQL
   5.1 to 5.5:

     * Read all the items in the following sections to see whether
       any of them might affect your applications:

          + Section 2.13.1, "Upgrading MySQL," has general update
            information.

          + The items in the change lists found later in this section
            enable you to identify upgrade issues that apply to your
            current MySQL installation.

          + The MySQL 5.5 change history describes significant new
            features you can use in 5.5 or that differ from those
            found in earlier MySQL releases. Some of these changes
            may result in incompatibilities. See Section D.1,
            "Changes in Release 5.5.x (Development)."
       Note particularly any changes that are marked Known issue or
       Incompatible change. These incompatibilities with earlier
       versions of MySQL may require your attention before you
       upgrade. Our aim is to avoid these changes, but occasionally
       they are necessary to correct problems that would be worse
       than an incompatibility between releases. If any upgrade issue
       applicable to your installation involves an incompatibility
       that requires special handling, follow the instructions given
       in the incompatibility description. Often this will involve
       dumping and reloading tables, or use of a statement such as
       CHECK TABLE or REPAIR TABLE.
       For dump and reload instructions, see Section 2.13.4,
       "Rebuilding or Repairing Tables or Indexes." Any procedure
       that involves REPAIR TABLE with the USE_FRM option must be
       done before upgrading. Use of this statement with a version of
       MySQL different from the one used to create the table (that
       is, using it after upgrading) may damage the table. See
       Section 12.4.2.5, "REPAIR TABLE Syntax."

     * Before upgrading to a new version of MySQL, Section 2.13.3,
       "Checking Whether Tables or Indexes Must Be Rebuilt," to see
       whether changes to table formats or to character sets or
       collations were made between your current version of MySQL and
       the version to which you are upgrading. If so and these
       changes result in an incompatibility between MySQL versions,
       you will need to upgrade the affected tables using the
       instructions in Section 2.13.4, "Rebuilding or Repairing
       Tables or Indexes."

     * After upgrading to a new version of MySQL, run mysql_upgrade
       (see Section 4.4.7, "mysql_upgrade --- Check Tables for MySQL
       Upgrade"). This program checks your tables, and attempts to
       repair them if necessary. It also updates your grant tables to
       make sure that they have the current structure so that you can
       take advantage of any new capabilities. (Some releases of
       MySQL introduce changes to the structure of the grant tables
       to add new privileges or features.)
       mysql_upgrade does not upgrade the contents of the help
       tables. For upgrade instructions, see Section 5.1.8,
       "Server-Side Help."

     * If you run MySQL Server on Windows, see Section 2.3.7,
       "Upgrading MySQL on Windows."

     * If you use replication, see Section 17.4.3, "Upgrading a
       Replication Setup," for information on upgrading your
       replication setup.

   If your MySQL installation contains a large amount of data that
   might take a long time to convert after an in-place upgrade, you
   might find it useful to create a "dummy" database instance for
   assessing what conversions might be needed and the work involved
   to perform them. Make a copy of your MySQL instance that contains
   a full copy of the mysql database, plus all other databases
   without data. Run your upgrade procedure on this dummy instance to
   see what actions might be needed so that you can better evaluate
   the work involved when performing actual data conversion on your
   original database instance.

   The following lists describe changes that may affect applications
   and that you should watch out for when upgrading from MySQL 5.1 to
   5.5.

   Configuration Changes:

     * Incompatible change: The InnoDB Plugin is included in MySQL
       5.5 releases. It becomes the built-in version of InnoDB in
       MySQL Server, replacing the version previously included as the
       built-in InnoDB engine. InnoDB Plugin is also available in
       MySQL 5.1 as of 5.1.38, but it is an optional storage engine
       that must be enabled explicitly using two server options:
[mysqld]
ignore-builtin-innodb
plugin-load=innodb=ha_innodb_plugin.so
       If you were using InnoDB Plugin in MySQL 5.1 by means of those
       options, you must remove them after an upgrade to 5.5 or the
       server will fail to start.
       In addition, in InnoDB Plugin, the innodb_file_io_threads
       system variable has been removed and replaced with
       innodb_read_io_threads and innodb_write_io_threads. If you
       upgrade from MySQL 5.1 to MySQL 5.5 and previously explicitly
       set innodb_file_io_threads at server startup, you must change
       your configuration. Either remove any reference to
       innodb_file_io_threads or replace it with references to
       innodb_read_io_threads and innodb_write_io_threads.

     * Incompatible change: In MySQL 5.5, the server includes a
       plugin services interface that complements the plugin API. The
       services interface enables server functionality to be exposed
       as a "service" that plugins can access through a function-call
       interface. The libmysqlservices library provides access to the
       available services and dynamic plugins now must be linked
       against this library (use the -lmysqlservices flag). For an
       example showing what Makefile.am should look like, see Section
       23.2.6, "MySQL Services for Plugins."

   Server Changes:

     * Incompatible change: As of MySQL 5.5.7, the server requires
       that a new grant table, proxies_priv, be present in the mysql
       database. If you are upgrading from a previous MySQL release
       rather than performing a new installation, the server will
       find that this table is missing and exit during startup with
       the following message:
Table 'mysql.proxies_priv' doesn't exist
       To create the proxies_priv table, start the server with the
       --skip-grant-tables option to cause it to skip the normal
       grant table checks, then run mysql_upgrade. For example:
shell> mysqld --skip-grant-tables &
shell> mysql_upgrade
       Then stop the server and restart it normally.
       You can specify other options on the mysqld command line if
       necessary. Alternatively, if your installation is configured
       so that the server normally reads options from an option file,
       use the --defaults-file option to specify the file (enter each
       command on a single line):
shell> mysqld --defaults-file=/usr/local/mysql/etc/my.cnf
         --skip-grant-tables &
shell> mysql_upgrade
       With the --skip-grant-tables option, the server does no
       password or privilege checking, so any client can connect and
       effectively have all privilges. For additional security, use
       the --skip-networking option as well to prevent remote clients
       from connecting.

     * Incompatible change: Prior to MySQL 5.5.7, if you flushed the
       logs using FLUSH LOGS or mysqladmin flush-logs and mysqld was
       writing the error log to a file (for example, if it was
       started with the --log-error option), it renames the current
       log file with the suffix -old, then created a new empty log
       file. This had the problem that a second log-flushing
       operation thus caused the original error log file to be lost
       unless you saved it under a different name. For example, you
       could use the following commands to save the file:
shell> mysqladmin flush-logs
shell> mv host_name.err-old backup-directory
       To avoid the preceding file-loss problem, no renaming occurs
       as of MySQL 5.5.7; the server merely closes and reopens the
       log file. To rename the file, you can do so manually before
       flushing. Then flushing the logs reopens a new file with the
       original file name. For example, you can rename the file and
       create a new one using the following commands:
shell> mv host_name.err host_name.err-old
shell> mysqladmin flush-logs
shell> mv host_name.err-old backup-directory

     * Incompatible change: As of MySQL 5.5.6, handling of CREATE
       TABLE IF NOT EXISTS ... SELECT statements has been changed for
       the case that the destination table already exists:

          + Previously, for CREATE TABLE IF NOT EXISTS ... SELECT,
            MySQL produced a warning that the table exists, but
            inserted the rows and wrote the statement to the binary
            log anyway. By contrast, CREATE TABLE ... SELECT (without
            IF NOT EXISTS) failed with an error, but MySQL inserted
            no rows and did not write the statement to the binary
            log.

          + MySQL now handles both statements the same way when the
            destination table exists, in that neither statement
            inserts rows or is written to the binary log. The
            difference between them is that MySQL produces a warning
            when IF NOT EXISTS is present and an error when it is
            not.
       This change in handling of IF NOT EXISTS results in an
       incompatibility for statement-based replication from a MySQL
       5.1 master with the original behavior and a MySQL 5.5 slave
       with the new behavior. Suppose that CREATE TABLE IF NOT EXISTS
       ... SELECT is executed on the master and the destination table
       exists. The result is that rows are inserted on the master but
       not on the slave. (Row-based replication does not have this
       problem.)
       To address this issue, statement-based binary logging for
       CREATE TABLE IF NOT EXISTS ... SELECT is changed in MySQL 5.1
       as of 5.1.51:

          + If the destination table does not exist, there is no
            change: The statement is logged as is.

          + If the destination table does exist, the statement is
            logged as the equivalent pair of CREATE TABLE IF NOT
            EXISTS and INSERT ... SELECT statements. (If the SELECT
            in the original statement is preceded by IGNORE or
            REPLACE, the INSERT becomes INSERT IGNORE or REPLACE,
            respectively.)
       This change provides forward compatibility for statement-based
       replication from MySQL 5.1 to 5.5 because when the destination
       table exists, the rows will be inserted on both the master and
       slave. To take advantage of this compatibility measure, the
       5.1 server must be at least 5.1.51 and the 5.5 server must be
       at least 5.5.6.
       To upgrade an existing 5.1-to-5.5 replication scenario,
       upgrade the master first to 5.1.51 or higher. Note that this
       differs from the usual replication upgrade advice of upgrading
       the slave first.
       A workaround for applications that wish to achieve the
       original effect (rows inserted regardless of whether the
       destination table exists) is to use CREATE TABLE IF NOT EXISTS
       and INSERT ... SELECT statements rather than CREATE TABLE IF
       NOT EXISTS ... SELECT statements.
       Along with the change just described, the following related
       change was made: Previously, if an existing view was named as
       the destination table for CREATE TABLE IF NOT EXISTS ...
       SELECT, rows were inserted into the underlying base table and
       the statement was written to the binary log. As of MySQL
       5.1.51 and 5.5.6, nothing is inserted or logged.

     * Incompatible change: Prior to MySQL 5.5.6, if the server was
       started with character_set_server set to utf16, it crashed
       during full-text stopword initialization. Now the stopword
       file is loaded and searched using latin1 if
       character_set_server is ucs2, utf16, or utf32. If any table
       was created with FULLTEXT indexes while the server character
       set was ucs2, utf16, or utf32, it should be repaired using
       this statement:
REPAIR TABLE tbl_name QUICK;

     * Incompatible change: As of MySQL 5.5.5, all numeric operators
       and functions on integer, floating-point and DECIMAL values
       throw an "out of range" error (ER_DATA_OUT_OF_RANGE) rather
       than returning an incorrect value or NULL, when the result is
       out of the supported range for the corresponding data type.
       See Section 10.6, "Out-of-Range and Overflow Handling."

     * Incompatible change: As of MySQL 5.5.3, the Unicode
       implementation has been extended to provide support for
       supplementary characters that lie outside the Basic
       Multilingual Plane (BMP). Noteworthy features:

          + utf16 and utf32 character sets have been added. These
            correspond to the UTF-16 and UTF-32 encodings of the
            Unicode character set, and they both support
            supplementary characters.

          + The utf8mb4 character set has been added. This is similar
            to utf8, but its encoding allows up to four bytes per
            character to enable support for supplementary characters.

          + The ucs2 character set is essentially unchanged except
            for the inclusion of some newer BMP characters.
       In most respects, upgrading to MySQL 5.5 should present few
       problems with regard to Unicode usage, although there are some
       potential areas of incompatibility. These are the primary
       areas of concern:

          + For the variable-length character data types (VARCHAR and
            the TEXT types), the maximum length in characters is less
            for utf8mb4 columns than for utf8 columns.

          + For all character data types (CHAR, VARCHAR, and the TEXT
            types), the maximum number of characters that can be
            indexed is less for utf8mb4 columns than for utf8
            columns.
       Consequently, if you want to upgrade tables from utf8 to
       utf8mb4 to take advantage of supplementary-character support,
       it may be necessary to change some column or index
       definitions.
       For additional details about the new Unicode character sets
       and potential incompatibilities, see Section 9.1.10, "Unicode
       Support," and Section 9.1.11, "Upgrading from Previous to
       Current Unicode Support."

     * Incompatible change: As of MySQL 5.5.3, the server includes
       dtoa, a library for conversion between strings and numbers by
       David M. Gay. In MySQL, this library provides the basis for
       improved conversion between string or DECIMAL values and
       approximate-value (FLOAT/DOUBLE) numbers.
       Because the conversions produced by this library differ in
       some cases from previous results, the potential exists for
       incompatibilities in applications that rely on previous
       results. For example, applications that depend on a specific
       exact result from previous conversions might need adjustment
       to accommodate additional precision.
       For additional information about the properties of dtoa
       conversions, see Section 11.2, "Type Conversion in Expression
       Evaluation."

     * Incompatible change: In MySQL 5.5, several changes were made
       regarding the language and character set of error messages:

          + The --language option for specifying the directory for
            the error message file is now deprecated. The new
            --lc-messages-dir and --lc-messages options should be
            used instead, and --language is handled as an alias for
            --lc-messages-dir.

          + The language system variable has been removed and
            replaced with the new lc_messages_dir and lc_messages
            system variables. lc_messages_dir has only a global value
            and is read only. lc_messages has global and session
            values and can be modified at runtime, so the error
            message language can be changed while the server is
            running, and individual clients each can have a different
            error message language by changing their session
            lc_messages value to a different locale name.

          + Error messages previously were constructed in a mix of
            character sets. This issue is resolved by constructing
            error messages internally within the server using UTF-8
            and returning them to the client in the character set
            specified by the character_set_results system variable.
            The content of error messages therefore may in some cases
            differ from the messags returned previously.
       For more information, see Section 9.2, "Setting the Error
       Message Language," and Section 9.1.6, "Character Set for Error
       Messages."

   SQL Changes:

     * Incompatible change: Previously, the parser accepted an INTO
       clause in nested SELECT statements, which is invalid because
       such statements must return their results to the outer
       context. As of MySQL 5.5.3, this syntax is no longer permitted
       and statements that use it must be changed.

     * Incompatible change: In MySQL 5.5.3, several changes were made
       to alias resolution in multiple-table DELETE statements so
       that it is no longer possible to have inconsistent or
       ambiguous table aliases.

          + In MySQL 5.1.23, alias declarations outside the
            table_references part of the statement were disallowed
            for the USING variant of multiple-table DELETE syntax, to
            reduce the possibility of ambiguous aliases that could
            lead to ambiguous statements that have unexpected results
            such as deleting rows from the wrong table.
            As of MySQL 5.5.3, alias declarations outside
            table_references are disallowed for all multiple-table
            DELETE statements. Alias declarations are permitted only
            in the table_references part.
            Incorrect:
DELETE FROM t1 AS a2 USING t1 AS a1 INNER JOIN t2 AS a2;
DELETE t1 AS a2 FROM t1 AS a1 INNER JOIN t2 AS a2;
            Correct:
DELETE FROM t1 USING t1 AS a1 INNER JOIN t2 AS a2;
DELETE t1 FROM t1 AS a1 INNER JOIN t2 AS a2;

          + Previously, for alias references in the list of tables
            from which to delete rows in a multiple-table delete, the
            default database is used unless one is specified
            explicitly. For example, if the default database is db1,
            the following statement does not work because the
            unqualified alias reference a2 is interpreted as having a
            database of db1:
DELETE a1, a2 FROM db1.t1 AS a1 INNER JOIN db2.t2 AS a2
WHERE a1.id=a2.id;
            To correctly match an alias that refers to a table
            outside the default database, you must explicitly qualify
            the reference with the name of the proper database:
DELETE a1, db2.a2 FROM db1.t1 AS a1 INNER JOIN db2.t2 AS a2
WHERE a1.id=a2.id;
            As of MySQL 5.5.3, alias resolution does not require
            qualification and alias references should not be
            qualified with the database name. Qualified names are
            interpreted as referring to tables, not aliases.
       Statements containing alias constructs that are no longer
       permitted must be rewritten.

     * Some keywords may be reserved in MySQL 5.5 that were not
       reserved in MySQL 5.1. See Section 8.3, "Reserved Words."

2.13.1.2. Upgrading from MySQL 5.4 to 5.5

   Note

   It is good practice to back up your data before installing any new
   version of software. Although MySQL works very hard to ensure a
   high level of quality, you should protect your data by making a
   backup.

   To upgrade to 5.5 from any previous version, MySQL recommends that
   you dump your tables with mysqldump before upgrading and reload
   the dump file after upgrading.

   In general, you should do the following when upgrading from MySQL
   5.4 to 5.5:

     * Read all the items in the following sections to see whether
       any of them might affect your applications:

          + Section 2.13.1, "Upgrading MySQL," has general update
            information.

          + The items in the change lists found later in this section
            enable you to identify upgrade issues that apply to your
            current MySQL installation.

          + The MySQL 5.5 change history describes significant new
            features you can use in 5.5 or that differ from those
            found in earlier MySQL releases. Some of these changes
            may result in incompatibilities. See Section D.1,
            "Changes in Release 5.5.x (Development)."
       Note particularly any changes that are marked Known issue or
       Incompatible change. These incompatibilities with earlier
       versions of MySQL may require your attention before you
       upgrade. Our aim is to avoid these changes, but occasionally
       they are necessary to correct problems that would be worse
       than an incompatibility between releases. If any upgrade issue
       applicable to your installation involves an incompatibility
       that requires special handling, follow the instructions given
       in the incompatibility description. Often this will involve
       dumping and reloading tables, or use of a statement such as
       CHECK TABLE or REPAIR TABLE.
       For dump and reload instructions, see Section 2.13.4,
       "Rebuilding or Repairing Tables or Indexes." Any procedure
       that involves REPAIR TABLE with the USE_FRM option must be
       done before upgrading. Use of this statement with a version of
       MySQL different from the one used to create the table (that
       is, using it after upgrading) may damage the table. See
       Section 12.4.2.5, "REPAIR TABLE Syntax."

     * Before upgrading to a new version of MySQL, Section 2.13.3,
       "Checking Whether Tables or Indexes Must Be Rebuilt," to see
       whether changes to table formats or to character sets or
       collations were made between your current version of MySQL and
       the version to which you are upgrading. If so and these
       changes result in an incompatibility between MySQL versions,
       you will need to upgrade the affected tables using the
       instructions in Section 2.13.4, "Rebuilding or Repairing
       Tables or Indexes."

     * After upgrading to a new version of MySQL, run mysql_upgrade
       (see Section 4.4.7, "mysql_upgrade --- Check Tables for MySQL
       Upgrade"). This program checks your tables, and attempts to
       repair them if necessary. It also updates your grant tables to
       make sure that they have the current structure so that you can
       take advantage of any new capabilities. (Some releases of
       MySQL introduce changes to the structure of the grant tables
       to add new privileges or features.)
       mysql_upgrade does not upgrade the contents of the help
       tables. For upgrade instructions, see Section 5.1.8,
       "Server-Side Help."

     * If you run MySQL Server on Windows, see Section 2.3.7,
       "Upgrading MySQL on Windows."

     * If you use replication, see Section 17.4.3, "Upgrading a
       Replication Setup," for information on upgrading your
       replication setup.

   If your MySQL installation contains a large amount of data that
   might take a long time to convert after an in-place upgrade, you
   might find it useful to create a "dummy" database instance for
   assessing what conversions might be needed and the work involved
   to perform them. Make a copy of your MySQL instance that contains
   a full copy of the mysql database, plus all other databases
   without data. Run your upgrade procedure on this dummy instance to
   see what actions might be needed so that you can better evaluate
   the work involved when performing actual data conversion on your
   original database instance.

   The following lists describe changes that may affect applications
   and that you should watch out for when upgrading from MySQL 5.4 to
   5.5.

   Configuration Changes:

     * Incompatible change: In MySQL 5.5, the server includes a
       plugin services interface that complements the plugin API. The
       services interface enables server functionality to be exposed
       as a "service" that plugins can access through a function-call
       interface. The libmysqlservices library provides access to the
       available services and dynamic plugins now must be linked
       against this library (use the -lmysqlservices flag). For an
       example showing what Makefile.am should look like, see Section
       23.2.6, "MySQL Services for Plugins."

   Server Changes:

     * Incompatible change: As of MySQL 5.5.7, the server requires
       that a new grant table, proxies_priv, be present in the mysql
       database. If you are upgrading from a previous MySQL release
       rather than performing a new installation, the server will
       find that this table is missing and exit during startup with
       the following message:
Table 'mysql.proxies_priv' doesn't exist
       To create the proxies_priv table, start the server with the
       --skip-grant-tables option to cause it to skip the normal
       grant table checks, then run mysql_upgrade. For example:
shell> mysqld --skip-grant-tables &
shell> mysql_upgrade
       Then stop the server and restart it normally.
       You can specify other options on the mysqld command line if
       necessary. Alternatively, if your installation is configured
       so that the server normally reads options from an option file,
       use the --defaults-file option to specify the file (enter each
       command on a single line):
shell> mysqld --defaults-file=/usr/local/mysql/etc/my.cnf
         --skip-grant-tables &
shell> mysql_upgrade
       With the --skip-grant-tables option, the server does no
       password or privilege checking, so any client can connect and
       effectively have all privilges. For additional security, use
       the --skip-networking option as well to prevent remote clients
       from connecting.

     * Incompatible change: As of MySQL 5.5.3, the Unicode
       implementation has been extended to provide support for
       supplementary characters that lie outside the Basic
       Multilingual Plane (BMP). Noteworthy features:

          + utf16 and utf32 character sets have been added. These
            correspond to the UTF-16 and UTF-32 encodings of the
            Unicode character set, and they both support
            supplementary characters.

          + The utf8mb4 character set has been added. This is similar
            to utf8, but its encoding allows up to four bytes per
            character to enable support for supplementary characters.

          + The ucs2 character set is essentially unchanged except
            for the inclusion of some newer BMP characters.
       In most respects, upgrading to MySQL 5.5 should present few
       problems with regard to Unicode usage, although there are some
       potential areas of incompatibility. These are the primary
       areas of concern:

          + For the variable-length character data types (VARCHAR and
            the TEXT types), the maximum length in characters is less
            for utf8mb4 columns than for utf8 columns.

          + For all character data types (CHAR, VARCHAR, and the TEXT
            types), the maximum number of characters that can be
            indexed is less for utf8mb4 columns than for utf8
            columns.
       Consequently, if you want to upgrade tables from utf8 to
       utf8mb4 to take advantage of supplementary-character support,
       it may be necessary to change some column or index
       definitions.
       For additional details about the new Unicode character sets
       and potential incompatibilities, see Section 9.1.10, "Unicode
       Support," and Section 9.1.11, "Upgrading from Previous to
       Current Unicode Support."

     * Incompatible change: As of MySQL 5.5.3, the server includes
       dtoa, a library for conversion between strings and numbers by
       David M. Gay. In MySQL, this library provides the basis for
       improved conversion between string or DECIMAL values and
       approximate-value (FLOAT/DOUBLE) numbers.
       Because the conversions produced by this library differ in
       some cases from previous results, the potential exists for
       incompatibilities in applications that rely on previous
       results. For example, applications that depend on a specific
       exact result from previous conversions might need adjustment
       to accommodate additional precision.
       For additional information about the properties of dtoa
       conversions, see Section 11.2, "Type Conversion in Expression
       Evaluation."

     * Incompatible change: In MySQL 5.5, several changes were made
       regarding the language and character set of error messages:

          + The --language option for specifying the directory for
            the error message file is now deprecated. The new
            --lc-messages-dir and --lc-messages options should be
            used instead, and --language is handled as an alias for
            --lc-messages-dir.

          + The language system variable has been removed and
            replaced with the new lc_messages_dir and lc_messages
            system variables. lc_messages_dir has only a global value
            and is read only. lc_messages has global and session
            values and can be modified at runtime, so the error
            message language can be changed while the server is
            running, and individual clients each can have a different
            error message language by changing their session
            lc_messages value to a different locale name.

          + Error messages previously were constructed in a mix of
            character sets. This issue is resolved by constructing
            error messages internally within the server using UTF-8
            and returning them to the client in the character set
            specified by the character_set_results system variable.
            The content of error messages therefore may in some cases
            differ from the messags returned previously.
       For more information, see Section 9.2, "Setting the Error
       Message Language," and Section 9.1.6, "Character Set for Error
       Messages."

   SQL Changes:

     * Incompatible change: Previously, the parser accepted an INTO
       clause in nested SELECT statements, which is invalid because
       such statements must return their results to the outer
       context. As of MySQL 5.5.3, this syntax is no longer permitted
       and statements that use it must be changed.

     * Some keywords may be reserved in MySQL 5.5 that were not
       reserved in MySQL 5.4. See Section 8.3, "Reserved Words."

2.13.2. Downgrading MySQL

   This section describes what you should do to downgrade to an older
   MySQL version in the unlikely case that the previous version
   worked better than the new one.

   If you are downgrading within the same release series (for
   example, from 5.1.13 to 5.1.12) the general rule is that you just
   have to install the new binaries on top of the old ones. There is
   no need to do anything with the databases. As always, however, it
   is always a good idea to make a backup.

   The following items form a checklist of things you should do
   whenever you perform a downgrade:

     * Read the upgrading section for the release series from which
       you are downgrading to be sure that it does not have any
       features you really need. See Section 2.13.1, "Upgrading
       MySQL."

     * If there is a downgrading section for that version, you should
       read that as well.

     * To see which new features were added between the version to
       which you are downgrading and your current version, see the
       change logs (Appendix D, "MySQL Change History").

     * Check Section 2.13.3, "Checking Whether Tables or Indexes Must
       Be Rebuilt," to see whether changes to table formats or to
       character sets or collations were made between your current
       version of MySQL and the version to which you are downgrading.
       If so and these changes result in an incompatibility between
       MySQL versions, you will need to downgrade the affected tables
       using the instructions in Section 2.13.4, "Rebuilding or
       Repairing Tables or Indexes."

   In most cases, you can move the MySQL format files and data files
   between different versions on the same architecture as long as you
   stay within versions for the same release series of MySQL.

   If you downgrade from one release series to another, there may be
   incompatibilities in table storage formats. In this case, use
   mysqldump to dump your tables before downgrading. After
   downgrading, reload the dump file using mysql or mysqlimport to
   re-create your tables. For examples, see Section 2.13.5, "Copying
   MySQL Databases to Another Machine."

   A typical symptom of a downward-incompatible table format change
   when you downgrade is that you cannot open tables. In that case,
   use the following procedure:

    1. Stop the older MySQL server that you are downgrading to.

    2. Restart the newer MySQL server you are downgrading from.

    3. Dump any tables that were inaccessible to the older server by
       using mysqldump to create a dump file.

    4. Stop the newer MySQL server and restart the older one.

    5. Reload the dump file into the older server. Your tables should
       be accessible.

   It might also be the case that system tables in the mysql database
   have changed and that downgrading introduces some loss of
   functionality or requires some adjustments. Here are some
   examples:

     * Trigger creation requires the TRIGGER privilege as of MySQL
       5.1. In MySQL 5.0, there is no TRIGGER privilege and SUPER is
       required instead. If you downgrade from MySQL 5.1 to 5.0, you
       will need to give the SUPER privilege to those accounts that
       had the TRIGGER privilege in 5.1.

     * Triggers were added in MySQL 5.0, so if you downgrade from 5.0
       to 4.1, you cannot use triggers at all.

     * The mysql.proc.comment column definition changed between MySQL
       5.1 and 5.5. After a downgrade from 5.5 to 5.1, this table is
       seen as corrupt and in need of repair. To workaround this
       problem, execute mysql_upgrade from the version of MySQL to
       which you downgraded.

2.13.2.1. Downgrading to MySQL 5.1

   When downgrading to MySQL 5.1 from MySQL 5.5, you should keep in
   mind the following issues relating to features found in MySQL 5.5,
   but not in MySQL 5.1:

     * InnoDB.  MySQL 5.5 uses InnoDB Plugin as the built-in version
       of InnoDB. MySQL 5.1 includes InnoDB Plugin as of 5.1.38, but
       as an option that must be enabled explicitly. See Changes in
       MySQL 5.1.38
       (http://dev.mysql.com/doc/refman/5.1/en/news-5-1-x.html#news-5
       -1-38).

2.13.3. Checking Whether Tables or Indexes Must Be Rebuilt

   A binary upgrade or downgrade is one that installs one version of
   MySQL "in place" over an existing version, without dumping and
   reloading tables:

    1. Stop the server for the existing version if it is running.

    2. Install a different version of MySQL. This is an upgrade if
       the new version is higher than the original version, a
       downgrade if the version is lower.

    3. Start the server for the new version.

   In many cases, the tables from the previous version of MySQL can
   be used without problem by the new version. However, sometimes
   changes occur that require tables or table indexes to be rebuilt,
   as described in this section. If you have tables that are affected
   by any of the issues described here, rebuild the tables or indexes
   as necessary using the instructions given in Section 2.13.4,
   "Rebuilding or Repairing Tables or Indexes."

   Table Incompatibilities

   After a binary upgrade to MySQL 5.1 from a MySQL 5.0 installation
   that contains ARCHIVE tables, accessing those tables causes the
   server to crash, even if you have run mysql_upgrade or CHECK TABLE
   ... FOR UPGRADE. To work around this problem, use mysqldump to
   dump all ARCHIVE tables before upgrading, and reload them into
   MySQL 5.1 after upgrading. The same problem occurs for binary
   downgrades from MySQL 5.1 to 5.0.

   Index Incompatibilities

   If you perform a binary upgrade without dumping and reloading
   tables, you cannot upgrade directly from MySQL 4.1 to 5.1 or
   higher. This occurs due to an incompatible change in the MyISAM
   table index format in MySQL 5.0. Upgrade from MySQL 4.1 to 5.0 and
   repair all MyISAM tables. Then upgrade from MySQL 5.0 to 5.1 and
   check and repair your tables.

   Modifications to the handling of character sets or collations
   might change the character sort order, which causes the ordering
   of entries in any index that uses an affected character set or
   collation to be incorrect. Such changes result in several possible
   problems:

     * Comparison results that differ from previous results

     * Inability to find some index values due to misordered index
       entries

     * Misordered ORDER BY results

     * Tables that CHECK TABLE reports as being in need of repair

   The solution to these problems is to rebuild any indexes that use
   an affected character set or collation, either by dropping and
   re-creating the indexes, or by dumping and reloading the entire
   table. For information about rebuilding indexes, see Section
   2.13.4, "Rebuilding or Repairing Tables or Indexes."

   To check whether a table has indexes that must be rebuilt, consult
   the following list. It indicates which versions of MySQL
   introduced character set or collation changes that require indexes
   to be rebuilt. Each entry indicates the version in which the
   change occurred and the character sets or collations that the
   change affects. If the change is associated with a particular bug
   report, the bug number is given.

   The list applies both for binary upgrades and downgrades. For
   example, Bug#27877: http://bugs.mysql.com/bug.php?id=27877 was
   fixed in MySQL 5.1.24 and 5.4.0, so it applies to upgrades from
   versions older than 5.1.24 to 5.1.24 or newer, and to downgrades
   from 5.1.24 or newer to versions older than 5.1.24.

   In many cases, you can use CHECK TABLE ... FOR UPGRADE to identify
   tables for which index rebuilding is required. (It will report:
   Table upgrade required. Please do "REPAIR TABLE `tbl_name`" or
   dump/reload to fix it!) In these cases, you can also use
   mysqlcheck --check-upgrade or mysql_upgrade, which execute CHECK
   TABLE. However, the use of CHECK TABLE applies only after
   upgrades, not downgrades. Also, CHECK TABLE is not applicable to
   all storage engines. For details about which storage engines CHECK
   TABLE supports, see Section 12.4.2.2, "CHECK TABLE Syntax."

   Changes that cause index rebuilding to be necessary:

     * MySQL 5.0.48, 5.1.21
       (Bug#29461: http://bugs.mysql.com/bug.php?id=29461)
       Affects indexes for columns that use any of these character
       sets: eucjpms, euc_kr, gb2312, latin7, macce, ujis
       Affected tables can be detected by CHECK TABLE ... FOR UPGRADE
       as of MySQL 5.1.29, 5.4.0 (see
       Bug#39585: http://bugs.mysql.com/bug.php?id=39585).

     * MySQL 5.0.48, 5.1.23
       (Bug#27562: http://bugs.mysql.com/bug.php?id=27562)
       Affects indexes that use the ascii_general_ci collation for
       columns that contain any of these characters: '`' GRAVE
       ACCENT, '[' LEFT SQUARE BRACKET, '\' REVERSE SOLIDUS, ']'
       RIGHT SQUARE BRACKET, '~' TILDE
       Affected tables can be detected by CHECK TABLE ... FOR UPGRADE
       as of MySQL 5.1.29, 5.4.0 (see
       Bug#39585: http://bugs.mysql.com/bug.php?id=39585).

     * MySQL 5.1.24, 5.4.0
       (Bug#27877: http://bugs.mysql.com/bug.php?id=27877)
       Affects indexes that use the utf8_general_ci or
       ucs2_general_ci collation for columns that contain 'ß' LATIN
       SMALL LETTER SHARP S (German).
       Affected tables can be detected by CHECK TABLE ... FOR UPGRADE
       as of MySQL 5.1.30, 5.4.0 (see
       Bug#40053: http://bugs.mysql.com/bug.php?id=40053).

2.13.4. Rebuilding or Repairing Tables or Indexes

   This section describes how to rebuild a table. This can be
   necessitated by changes to MySQL such as how data types are
   handled or changes to character set handling. For example, an
   error in a collation might have been corrected, necessitating a
   table rebuild to update the indexes for character columns that use
   the collation. (For examples, see Section 2.13.3, "Checking
   Whether Tables or Indexes Must Be Rebuilt.") It might also be that
   a table repair or upgrade should be done as indicated by a table
   check operation such as that performed by CHECK TABLE, mysqlcheck,
   or mysql_upgrade.

   Methods for rebuilding a table include dumping and reloading it,
   or using ALTER TABLE or REPAIR TABLE.
   Note

   If you are rebuilding tables because a different version of MySQL
   will not handle them after a binary (in-place) upgrade or
   downgrade, you must use the dump-and-reload method. Dump the
   tables before upgrading or downgrading using your original version
   of MySQL. Then reload the tables after upgrading or downgrading.

   If you use the dump-and-reload method of rebuilding tables only
   for the purpose of rebuilding indexes, you can perform the dump
   either before or after upgrading or downgrading. Reloading still
   must be done afterward.

   To rebuild a table by dumping and reloading it, use mysqldump to
   create a dump file and mysql to reload the file:
shell> mysqldump db_name t1 > dump.sql
shell> mysql db_name < dump.sql

   To rebuild all the tables in a single database, specify the
   database name without any following table name:
shell> mysqldump db_name > dump.sql
shell> mysql db_name < dump.sql

   To rebuild all tables in all databases, use the --all-databases
   option:
shell> mysqldump --all-databases > dump.sql
shell> mysql < dump.sql

   To rebuild a table with ALTER TABLE, use a "null" alteration; that
   is, an ALTER TABLE statement that "changes" the table to use the
   storage engine that it already has. For example, if t1 is a MyISAM
   table, use this statement:
mysql> ALTER TABLE t1 ENGINE = MyISAM;

   If you are not sure which storage engine to specify in the ALTER
   TABLE statement, use SHOW CREATE TABLE to display the table
   definition.

   If you must rebuild a table because a table checking operation
   indicates that the table is corrupt or needs an upgrade, you can
   use REPAIR TABLE if that statement supports the table's storage
   engine. For example, to repair a MyISAM table, use this statement:
mysql> REPAIR TABLE t1;

   For storage engines such as InnoDB that REPAIR TABLE does not
   support, use mysqldump to create a dump file and mysql to reload
   the file, as described earlier.

   For specifics about which storage engines REPAIR TABLE supports,
   see Section 12.4.2.5, "REPAIR TABLE Syntax."

   mysqlcheck --repair provides command-line access to the REPAIR
   TABLE statement. This can be a more convenient means of repairing
   tables because you can use the --databases or --all-databases
   option to repair all tables in specific databases or all
   databases, respectively:
shell> mysqlcheck --repair --databases db_name ...
shell> mysqlcheck --repair --all-databases

2.13.5. Copying MySQL Databases to Another Machine

   You can copy the .frm, .MYI, and .MYD files for MyISAM tables
   between different architectures that support the same
   floating-point format. (MySQL takes care of any byte-swapping
   issues.) See Section 13.5, "The MyISAM Storage Engine."

   In cases where you need to transfer databases between different
   architectures, you can use mysqldump to create a file containing
   SQL statements. You can then transfer the file to the other
   machine and feed it as input to the mysql client.

   Use mysqldump --help to see what options are available.

   The easiest (although not the fastest) way to move a database
   between two machines is to run the following commands on the
   machine on which the database is located:
shell> mysqladmin -h 'other_hostname' create db_name
shell> mysqldump db_name | mysql -h 'other_hostname' db_name

   If you want to copy a database from a remote machine over a slow
   network, you can use these commands:
shell> mysqladmin create db_name
shell> mysqldump -h 'other_hostname' --compress db_name | mysql db_na
me

   You can also store the dump in a file, transfer the file to the
   target machine, and then load the file into the database there.
   For example, you can dump a database to a compressed file on the
   source machine like this:
shell> mysqldump --quick db_name | gzip > db_name.gz

   Transfer the file containing the database contents to the target
   machine and run these commands there:
shell> mysqladmin create db_name
shell> gunzip < db_name.gz | mysql db_name

   You can also use mysqldump and mysqlimport to transfer the
   database. For large tables, this is much faster than simply using
   mysqldump. In the following commands, DUMPDIR represents the full
   path name of the directory you use to store the output from
   mysqldump.

   First, create the directory for the output files and dump the
   database:
shell> mkdir DUMPDIR
shell> mysqldump --tab=DUMPDIR db_name

   Then transfer the files in the DUMPDIR directory to some
   corresponding directory on the target machine and load the files
   into MySQL there:
shell> mysqladmin create db_name           # create database
shell> cat DUMPDIR/*.sql | mysql db_name   # create tables in databas
e
shell> mysqlimport db_name DUMPDIR/*.txt   # load data into tables

   Do not forget to copy the mysql database because that is where the
   grant tables are stored. You might have to run commands as the
   MySQL root user on the new machine until you have the mysql
   database in place.

   After you import the mysql database on the new machine, execute
   mysqladmin flush-privileges so that the server reloads the grant
   table information.

2.14. Environment Variables

   This section lists all the environment variables that are used
   directly or indirectly by MySQL. Most of these can also be found
   in other places in this manual.

   Note that any options on the command line take precedence over
   values specified in option files and environment variables, and
   values in option files take precedence over values in environment
   variables.

   In many cases, it is preferable to use an option file instead of
   environment variables to modify the behavior of MySQL. See Section
   4.2.3.3, "Using Option Files."
   Variable Description
   CXX The name of your C++ compiler (for running CMake).
   CC The name of your C compiler (for running CMake).
   CFLAGS Flags for your C compiler (for running CMake).
   CXXFLAGS Flags for your C++ compiler (for running CMake).
   DBI_USER The default user name for Perl DBI.
   DBI_TRACE Trace options for Perl DBI.
   HOME The default path for the mysql history file is
   $HOME/.mysql_history.
   LD_RUN_PATH Used to specify the location of libmysqlclient.so.
   MYSQL_DEBUG Debug trace options when debugging.
   MYSQL_GROUP_SUFFIX Option group suffix value (like specifying
   --defaults-group-suffix).
   MYSQL_HISTFILE The path to the mysql history file. If this
   variable is set, its value overrides the default for
   $HOME/.mysql_history.
   MYSQL_HOME The path to the directory in which the server-specific
   my.cnf file resides (as of MySQL 5.0.3).
   MYSQL_HOST The default host name used by the mysql command-line
   client.
   MYSQL_PS1 The command prompt to use in the mysql command-line
   client.
   MYSQL_PWD The default password when connecting to mysqld. Note
   that using this is insecure. See Section 5.3.2.2, "End-User
   Guidelines for Password Security."
   MYSQL_TCP_PORT The default TCP/IP port number.
   MYSQL_UNIX_PORT The default Unix socket file name; used for
   connections to localhost.
   PATH Used by the shell to find MySQL programs.
   TMPDIR The directory where temporary files are created.
   TZ This should be set to your local time zone. See Section
   C.5.4.6, "Time Zone Problems."
   UMASK The user-file creation mode when creating files. See note
   following table.
   UMASK_DIR The user-directory creation mode when creating
   directories. See note following table.
   USER The default user name on Windows when connecting to mysqld.

   For information about the mysql history file, see Section 4.5.1.3,
   "mysql History File."

   The UMASK and UMASK_DIR variables, despite their names, are used
   as modes, not masks:

     * If UMASK is set, mysqld uses ($UMASK | 0600) as the mode for
       file creation, so that newly created files have a mode in the
       range from 0600 to 0666 (all values octal).

     * If UMASK_DIR is set, mysqld uses ($UMASK_DIR | 0700) as the
       base mode for directory creation, which then is AND-ed with
       ~(~$UMASK & 0666), so that newly created directories have a
       mode in the range from 0700 to 0777 (all values octal). The
       AND operation may remove read and write permissions from the
       directory mode, but not execute permissions.

   MySQL assumes that the value for UMASK or UMASK_DIR is in octal if
   it starts with a zero.

2.15. Perl Installation Notes

   Perl support for MySQL is provided by means of the DBI/DBD client
   interface. The interface requires Perl 5.6.0, and 5.6.1 or later
   is preferred. DBI does not work if you have an older version of
   Perl.

   To use transactions with Perl DBI, you must use DBD::mysql 2.0900
   or newer. To use the MySQL 4.1 or newer client library, you must
   use DBD::mysql 2.9003 or newer. Support for server-side prepared
   statements requires DBD::mysql 3.0009 or newer. Current versions
   of DBD::mysql on CPAN are 4.xxxx or higher and support all these
   capabilities.

   Perl support is not included with MySQL distributions. You can
   obtain the necessary modules from http://search.cpan.org for Unix,
   or by using the ActiveState ppm program on Windows. The following
   sections describe how to do this.

   Perl support for MySQL must be installed if you want to run the
   MySQL benchmark scripts; see Section 7.12.2, "The MySQL Benchmark
   Suite." It is also required for the MySQL Cluster ndb_size.pl
   utility; see ndb_size.pl
   (http://dev.mysql.com/doc/refman/5.1/en/mysql-cluster-programs-ndb
   -size-pl.html#mysql-cluster-programs-ndb-size-pl).

2.15.1. Installing Perl on Unix

   MySQL Perl support requires that you have installed MySQL client
   programming support (libraries and header files). Most
   installation methods install the necessary files. However, if you
   installed MySQL from RPM files on Linux, be sure that you've
   installed the developer RPM. The client programs are in the client
   RPM, but client programming support is in the developer RPM.

   If you want to install Perl support, the files you need can be
   obtained from the CPAN (Comprehensive Perl Archive Network) at
   http://search.cpan.org.

   The easiest way to install Perl modules on Unix is to use the CPAN
   module. For example:
shell> perl -MCPAN -e shell
cpan> install DBI
cpan> install DBD::mysql

   The DBD::mysql installation runs a number of tests. These tests
   attempt to connect to the local MySQL server using the default
   user name and password. (The default user name is your login name
   on Unix, and ODBC on Windows. The default password is "no
   password.") If you cannot connect to the server with those values
   (for example, if your account has a password), the tests fail. You
   can use force install DBD::mysql to ignore the failed tests.

   DBI requires the Data::Dumper module. It may be installed; if not,
   you should install it before installing DBI.

   It is also possible to download the module distributions in the
   form of compressed tar archives and build the modules manually.
   For example, to unpack and build a DBI distribution, use a
   procedure such as this:

    1. Unpack the distribution into the current directory:
shell> gunzip < DBI-VERSION.tar.gz | tar xvf -
       This command creates a directory named DBI-VERSION.

    2. Change location into the top-level directory of the unpacked
       distribution:
shell> cd DBI-VERSION

    3. Build the distribution and compile everything:
shell> perl Makefile.PL
shell> make
shell> make test
shell> make install

   The make test command is important because it verifies that the
   module is working. Note that when you run that command during the
   DBD::mysql installation to exercise the interface code, the MySQL
   server must be running or the test fails.

   It is a good idea to rebuild and reinstall the DBD::mysql
   distribution whenever you install a new release of MySQL,
   particularly if you notice symptoms such as that all your DBI
   scripts fail after you upgrade MySQL.

   If you do not have access rights to install Perl modules in the
   system directory or if you want to install local Perl modules, the
   following reference may be useful:
   http://servers.digitaldaze.com/extensions/perl/modules.html#module
   s

   Look under the heading "Installing New Modules that Require
   Locally Installed Modules."

2.15.2. Installing ActiveState Perl on Windows

   On Windows, you should do the following to install the MySQL DBD
   module with ActiveState Perl:

    1. Get ActiveState Perl from
       http://www.activestate.com/Products/ActivePerl/ and install
       it.

    2. Open a console window (a "DOS window").

    3. If necessary, set the HTTP_proxy variable. For example, you
       might try a setting like this:
set HTTP_proxy=my.proxy.com:3128

    4. Start the PPM program:
C:\> C:\perl\bin\ppm.pl

    5. If you have not previously done so, install DBI:
ppm> install DBI

    6. If this succeeds, run the following command:
ppm> install DBD-mysql

   This procedure should work with ActiveState Perl 5.6 or newer.

   If you cannot get the procedure to work, you should install the
   MyODBC driver instead and connect to the MySQL server through
   ODBC:
use DBI;
$dbh= DBI->connect("DBI:ODBC:$dsn",$user,$password) ||
  die "Got error $DBI::errstr when connecting to $dsn\n";

2.15.3. Problems Using the Perl DBI/DBD Interface

   If Perl reports that it cannot find the ../mysql/mysql.so module,
   the problem is probably that Perl cannot locate the
   libmysqlclient.so shared library. You should be able to fix this
   problem by one of the following methods:

     * Compile the DBD::mysql distribution with perl Makefile.PL
       -static -config rather than perl Makefile.PL.

     * Copy libmysqlclient.so to the directory where your other
       shared libraries are located (probably /usr/lib or /lib).

     * Modify the -L options used to compile DBD::mysql to reflect
       the actual location of libmysqlclient.so.

     * On Linux, you can add the path name of the directory where
       libmysqlclient.so is located to the /etc/ld.so.conf file.

     * Add the path name of the directory where libmysqlclient.so is
       located to the LD_RUN_PATH environment variable. Some systems
       use LD_LIBRARY_PATH instead.

   Note that you may also need to modify the -L options if there are
   other libraries that the linker fails to find. For example, if the
   linker cannot find libc because it is in /lib and the link command
   specifies -L/usr/lib, change the -L option to -L/lib or add -L/lib
   to the existing link command.

   If you get the following errors from DBD::mysql, you are probably
   using gcc (or using an old binary compiled with gcc):
/usr/bin/perl: can't resolve symbol '__moddi3'
/usr/bin/perl: can't resolve symbol '__divdi3'

   Add -L/usr/lib/gcc-lib/... -lgcc to the link command when the
   mysql.so library gets built (check the output from make for
   mysql.so when you compile the Perl client). The -L option should
   specify the path name of the directory where libgcc.a is located
   on your system.

   Another cause of this problem may be that Perl and MySQL are not
   both compiled with gcc. In this case, you can solve the mismatch
   by compiling both with gcc.

   You may see the following error from DBD::mysql when you run the
   tests:
t/00base............install_driver(mysql) failed:
Can't load '../blib/arch/auto/DBD/mysql/mysql.so' for module DBD::mys
ql:
../blib/arch/auto/DBD/mysql/mysql.so: undefined symbol:
uncompress at /usr/lib/perl5/5.00503/i586-linux/DynaLoader.pm line 16
9.

   This means that you need to include the -lz compression library on
   the link line. That can be done by changing the following line in
   the file lib/DBD/mysql/Install.pm:
$sysliblist .= " -lm";

   Change that line to:
$sysliblist .= " -lm -lz";

   After this, you must run make realclean and then proceed with the
   installation from the beginning.

   If you want to install DBI on SCO, you have to edit the Makefile
   in DBI-xxx and each subdirectory. Note that the following assumes
   gcc 2.95.2 or newer:
OLD:                                  NEW:
CC = cc                               CC = gcc
CCCDLFLAGS = -KPIC -W1,-Bexport       CCCDLFLAGS = -fpic
CCDLFLAGS = -wl,-Bexport              CCDLFLAGS =

LD = ld                               LD = gcc -G -fpic
LDDLFLAGS = -G -L/usr/local/lib       LDDLFLAGS = -L/usr/local/lib
LDFLAGS = -belf -L/usr/local/lib      LDFLAGS = -L/usr/local/lib

LD = ld                               LD = gcc -G -fpic
OPTIMISE = -Od                        OPTIMISE = -O1

OLD:
CCCFLAGS = -belf -dy -w0 -U M_XENIX -DPERL_SCO5 -I/usr/local/include

NEW:
CCFLAGS = -U M_XENIX -DPERL_SCO5 -I/usr/local/include

   These changes are necessary because the Perl dynaloader does not
   load the DBI modules if they were compiled with icc or cc.

   If you want to use the Perl module on a system that does not
   support dynamic linking (such as SCO), you can generate a static
   version of Perl that includes DBI and DBD::mysql. The way this
   works is that you generate a version of Perl with the DBI code
   linked in and install it on top of your current Perl. Then you use
   that to build a version of Perl that additionally has the DBD code
   linked in, and install that.

   On SCO, you must have the following environment variables set:
LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/usr/progressive/lib

   Or:
LD_LIBRARY_PATH=/usr/lib:/lib:/usr/local/lib:/usr/ccs/lib:\
    /usr/progressive/lib:/usr/skunk/lib
LIBPATH=/usr/lib:/lib:/usr/local/lib:/usr/ccs/lib:\
    /usr/progressive/lib:/usr/skunk/lib
MANPATH=scohelp:/usr/man:/usr/local1/man:/usr/local/man:\
    /usr/skunk/man:

   First, create a Perl that includes a statically linked DBI module
   by running these commands in the directory where your DBI
   distribution is located:
shell> perl Makefile.PL -static -config
shell> make
shell> make install
shell> make perl

   Then, you must install the new Perl. The output of make perl
   indicates the exact make command you need to execute to perform
   the installation. On SCO, this is make -f Makefile.aperl inst_perl
   MAP_TARGET=perl.

   Next, use the just-created Perl to create another Perl that also
   includes a statically linked DBD::mysql by running these commands
   in the directory where your DBD::mysql distribution is located:
shell> perl Makefile.PL -static -config
shell> make
shell> make install
shell> make perl

   Finally, you should install this new Perl. Again, the output of
   make perl indicates the command to use.
