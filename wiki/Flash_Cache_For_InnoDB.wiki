#labels SSD,InnoDB,MySQL,Flash,Cache
# Flash Cache for InnoDB

= Introduction =

This is a new flash cache solution for InnoDB, which is totally different from the previous Secondary Buffer Pool for InnoDB. The main feature is:

1. Write on SSD is sequential, no random writes on SSD<br>
2. Flash cache is a persistent cache.<br>
3. Can do merge write.<br>
4. Cache both read and write.<br>


= Architecture =

In this flash cache solution, it replaces the original InnoDB doublewrite file, where pages first sequential write here and then flush to disk. Originally, doublewrite is to avoid partial write problem, no read on it. The difference is when using SSD, we can have a large doublewrite, for example, 100G or 300G. Page first write still happened here(also sequential). After a period time, the page on SSD is flush to disk. Because same page, with different LSN, may on the flash cache, flushing page from flash cache to disk only need the newest page with the fresh version. Hence, this makes the merge write happen. Furthermore, page can be read from doublewrite, which use the feature of high random IOPS of SSD.

*Figure 1-1 Flash Cache Architecture*<br>
[http://blog.chinaunix.net/attachment/201108/29/196376_13145957329oNS.png]

For internal view, flash cache is more like a redo log file. All the writes are appended in the end of the file. 

*Figure 1-2 Flash Cache Architecture*<br>
[http://blog.chinaunix.net/attachment/201112/20/196376_1324350655OBBV.png]

== Data Structure ==

{{{
/** flash cache block strunct */
struct fc_block_struct{
	ulint	space:32;	/*!< tablespace id */
	ulint	offset:32;	/*!< page number */
	ulint	fil_offset:32;	/*!< flash cache page number */
	ulint	state:2;			/*!< flash cache block state */
	fc_block_t* hash;	/*!< hash chain */
	unsigned	is_aio_reading:1; /*!< if is in aio reading status */
};

/** flash cache struct */
struct fc_struct{
	mutex_t			mutex; /*!< mutex protecting flash cache */
	hash_table_t*	hash_table; /*!< hash table of flash cache blocks */
	mutex_t			hash_mutex; /* mutex protecting flash cache hash table */
	ulint			size; /*!< flash cache size */
	ulint			write_off; /*!< write to flash cache offset */
	ulint			flush_off; /*!< flush to disk this offset */
	ulint			write_round; /*!< write round */
	ulint			flush_round; /*!< flush round */
	fc_block_t* block; /*!< flash cache block */
	byte*			read_buf_unalign; /*!< unalign read buf */
	byte*			read_buf;	/*!< read buf */
};
}}}